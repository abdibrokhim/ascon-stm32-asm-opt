
ascon-newuu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003018  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003124  08003124  00004124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ec  080031ec  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031ec  080031ec  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031ec  080031ec  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ec  080031ec  000041ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031f0  080031f0  000041f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08003200  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08003200  0000507c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124b3  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e66  00000000  00000000  000174e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00027ba4  00000000  00000000  0001934e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  00040ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ae3  00000000  00000000  00041818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e40  00000000  00000000  000432fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167cb  00000000  00000000  0005913b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000882d3  00000000  00000000  0006f906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f7bd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c7c  00000000  00000000  000f7c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000f9898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800310c 	.word	0x0800310c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800310c 	.word	0x0800310c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <GOST_Crypt_32_E_Cicle>:
@param *GOST_Table - Указатель на таблицу замены ГОСТ(ДК) в 128 байтном формате
(вместо старшого полубайта 0)
@param GOST_Key - 32хбитная часть ключа(СК).
*/
void GOST_Crypt_32_E_Cicle(GOST_Data_Part *DATA, uint8_t *GOST_Table, uint32_t *GOST_Key)
{
 8000740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 8000744:	e9d0 5300 	ldrd	r5, r3, [r0]
{
 8000748:	4696      	mov	lr, r2
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 800074a:	f04f 0903 	mov.w	r9, #3
{
 800074e:	4683      	mov	fp, r0
 8000750:	b085      	sub	sp, #20
 8000752:	e9cd e702 	strd	lr, r7, [sp, #8]
 8000756:	3220      	adds	r2, #32
 8000758:	9200      	str	r2, [sp, #0]
//Key rotation:
//K0,K1,K2,K3,K4,K5,K6,K7, K0,K1,K2,K3,K4,K5,K6,K7, K0,K1,K2,K3,K4,K5,K6,K7, K7,K6,K5,K4,K3,K2,K1,K0

    for(k=0;k<3;k++)
    {
        for (j=0;j<8;j++)
 800075a:	46ae      	mov	lr, r5
 800075c:	9f02      	ldr	r7, [sp, #8]
 800075e:	461d      	mov	r5, r3
 8000760:	f8cd 9004 	str.w	r9, [sp, #4]
 8000764:	e000      	b.n	8000768 <GOST_Crypt_32_E_Cicle+0x28>
 8000766:	461d      	mov	r5, r3
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half]+GOST_Key) ;//S=(N1+X)mod2^32
 8000768:	f857 2b04 	ldr.w	r2, [r7], #4
 800076c:	4413      	add	r3, r2
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800076e:	f3c3 1403 	ubfx	r4, r3, #4, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000772:	f003 020f 	and.w	r2, r3, #15
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000776:	3410      	adds	r4, #16
 8000778:	f3c3 3603 	ubfx	r6, r3, #12, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 800077c:	f3c3 2003 	ubfx	r0, r3, #8, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000780:	f811 a004 	ldrb.w	sl, [r1, r4]
 8000784:	3630      	adds	r6, #48	@ 0x30
 8000786:	5c8c      	ldrb	r4, [r1, r2]
 8000788:	f3c3 5803 	ubfx	r8, r3, #20, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 800078c:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8000790:	3020      	adds	r0, #32
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000792:	f811 9006 	ldrb.w	r9, [r1, r6]
 8000796:	5c08      	ldrb	r0, [r1, r0]
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000798:	f3c3 6603 	ubfx	r6, r3, #24, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800079c:	f108 0850 	add.w	r8, r8, #80	@ 0x50
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80007a0:	3240      	adds	r2, #64	@ 0x40
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80007a2:	f811 8008 	ldrb.w	r8, [r1, r8]
 80007a6:	5c8a      	ldrb	r2, [r1, r2]
 80007a8:	ea44 140a 	orr.w	r4, r4, sl, lsl #4
 80007ac:	eb01 7313 	add.w	r3, r1, r3, lsr #28
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80007b0:	3660      	adds	r6, #96	@ 0x60
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80007b2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80007b6:	5d8e      	ldrb	r6, [r1, r6]
 80007b8:	f364 0c07 	bfi	ip, r4, #0, #8
 80007bc:	ea40 1009 	orr.w	r0, r0, r9, lsl #4
 80007c0:	ea42 1208 	orr.w	r2, r2, r8, lsl #4
 80007c4:	f360 2c0f 	bfi	ip, r0, #8, #8
 80007c8:	f362 4c17 	bfi	ip, r2, #16, #8
 80007cc:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
        for (j=0;j<8;j++)
 80007d0:	9a00      	ldr	r2, [sp, #0]
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80007d2:	f366 6c1f 	bfi	ip, r6, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 80007d6:	ea8e 537c 	eor.w	r3, lr, ip, ror #21
        for (j=0;j<8;j++)
 80007da:	4297      	cmp	r7, r2
 80007dc:	46ae      	mov	lr, r5
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half];//N2=N1
 80007de:	f8cb 5000 	str.w	r5, [fp]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full;//N1=S
 80007e2:	f8cb 3004 	str.w	r3, [fp, #4]
        for (j=0;j<8;j++)
 80007e6:	d1be      	bne.n	8000766 <GOST_Crypt_32_E_Cicle+0x26>
    for(k=0;k<3;k++)
 80007e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80007ec:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80007f0:	f012 09ff 	ands.w	r9, r2, #255	@ 0xff
 80007f4:	d1b1      	bne.n	800075a <GOST_Crypt_32_E_Cicle+0x1a>
            GOST_Key++;
        }
        GOST_Key=GOST_Key_tmp;
    }

    GOST_Key+=7;//K7
 80007f6:	e9dd e702 	ldrd	lr, r7, [sp, #8]
 80007fa:	f10e 061c 	add.w	r6, lr, #28

    for (j=0;j<7;j++)
 80007fe:	e000      	b.n	8000802 <GOST_Crypt_32_E_Cicle+0xc2>
 8000800:	4613      	mov	r3, r2
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half]+GOST_Key) ;//S=(N1+X)mod2^32
 8000802:	f856 2904 	ldr.w	r2, [r6], #-4
 8000806:	441a      	add	r2, r3
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000808:	f3c2 1003 	ubfx	r0, r2, #4, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 800080c:	f002 0c0f 	and.w	ip, r2, #15
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000810:	3010      	adds	r0, #16
 8000812:	f811 a000 	ldrb.w	sl, [r1, r0]
 8000816:	f811 000c 	ldrb.w	r0, [r1, ip]
 800081a:	f3c2 3803 	ubfx	r8, r2, #12, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 800081e:	f3c2 2403 	ubfx	r4, r2, #8, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000822:	f3c2 5c03 	ubfx	ip, r2, #20, #4
 8000826:	ea40 100a 	orr.w	r0, r0, sl, lsl #4
 800082a:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 800082e:	f10c 0c50 	add.w	ip, ip, #80	@ 0x50
 8000832:	f360 0707 	bfi	r7, r0, #0, #8
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000836:	3420      	adds	r4, #32
 8000838:	f3c2 4003 	ubfx	r0, r2, #16, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800083c:	f811 9008 	ldrb.w	r9, [r1, r8]
 8000840:	5d0c      	ldrb	r4, [r1, r4]
 8000842:	f811 800c 	ldrb.w	r8, [r1, ip]
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000846:	3040      	adds	r0, #64	@ 0x40
 8000848:	f3c2 6c03 	ubfx	ip, r2, #24, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800084c:	5c08      	ldrb	r0, [r1, r0]
 800084e:	eb01 7212 	add.w	r2, r1, r2, lsr #28
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000852:	f10c 0c60 	add.w	ip, ip, #96	@ 0x60
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000856:	ea44 1409 	orr.w	r4, r4, r9, lsl #4
 800085a:	f892 9070 	ldrb.w	r9, [r2, #112]	@ 0x70
 800085e:	f811 200c 	ldrb.w	r2, [r1, ip]
 8000862:	f364 270f 	bfi	r7, r4, #8, #8
 8000866:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
 800086a:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
 800086e:	f360 4717 	bfi	r7, r0, #16, #8
 8000872:	f362 671f 	bfi	r7, r2, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 8000876:	ea85 5277 	eor.w	r2, r5, r7, ror #21
    for (j=0;j<7;j++)
 800087a:	45b6      	cmp	lr, r6
 800087c:	461d      	mov	r5, r3
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half];//N2=N1
 800087e:	f8cb 3000 	str.w	r3, [fp]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full;//N1=S
 8000882:	f8cb 2004 	str.w	r2, [fp, #4]
    for (j=0;j<7;j++)
 8000886:	d1bb      	bne.n	8000800 <GOST_Crypt_32_E_Cicle+0xc0>
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half]+GOST_Key) ;//S=(N1+X)mod2^32
 8000888:	f8de 0000 	ldr.w	r0, [lr]
 800088c:	4402      	add	r2, r0
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800088e:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8000892:	3010      	adds	r0, #16
 8000894:	5c0d      	ldrb	r5, [r1, r0]
 8000896:	2000      	movs	r0, #0
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000898:	f002 040f 	and.w	r4, r2, #15
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800089c:	5d0c      	ldrb	r4, [r1, r4]
 800089e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80008a2:	f364 0007 	bfi	r0, r4, #0, #8
 80008a6:	f3c2 3403 	ubfx	r4, r2, #12, #4
        GOST_Table+= _GOST_TABLE_MAX_NODE_VALUE;//next line in table
 80008aa:	f101 0520 	add.w	r5, r1, #32
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80008ae:	3410      	adds	r4, #16
 80008b0:	5d2e      	ldrb	r6, [r5, r4]
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80008b2:	f3c2 2403 	ubfx	r4, r2, #8, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80008b6:	5d2c      	ldrb	r4, [r5, r4]
        GOST_Table+= _GOST_TABLE_MAX_NODE_VALUE;//next line in table
 80008b8:	f101 0540 	add.w	r5, r1, #64	@ 0x40
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80008bc:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 80008c0:	f364 200f 	bfi	r0, r4, #8, #8
 80008c4:	f3c2 5403 	ubfx	r4, r2, #20, #4
 80008c8:	3410      	adds	r4, #16
 80008ca:	5d2e      	ldrb	r6, [r5, r4]
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80008cc:	f3c2 4403 	ubfx	r4, r2, #16, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80008d0:	5d2c      	ldrb	r4, [r5, r4]
        GOST_Table+= _GOST_TABLE_MAX_NODE_VALUE;//next line in table
 80008d2:	3160      	adds	r1, #96	@ 0x60
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80008d4:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 80008d8:	f364 4017 	bfi	r0, r4, #16, #8
 80008dc:	eb01 7412 	add.w	r4, r1, r2, lsr #28
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80008e0:	f3c2 6203 	ubfx	r2, r2, #24, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80008e4:	5c8a      	ldrb	r2, [r1, r2]
 80008e6:	7c21      	ldrb	r1, [r4, #16]
 80008e8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80008ec:	f362 601f 	bfi	r0, r2, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 80008f0:	ea83 5370 	eor.w	r3, r3, r0, ror #21
        (*DATA).half[_GOST_Data_Part_N2_Half] = S.full; //N2=S
 80008f4:	f8cb 3000 	str.w	r3, [fp]
    {
        GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Next_Step ) ;
        GOST_Key--;
    }
    GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Last_Step ) ;
}
 80008f8:	b005      	add	sp, #20
 80008fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008fe:	bf00      	nop

08000900 <GOST_Crypt_32_D_Cicle>:
(вместо старшого полубайта 0)
@param GOST_Key - 32хбитная часть ключа(СК).
*/
//Basic 32-P decryption algorithm of GOST, usefull only in SR mode
void GOST_Crypt_32_D_Cicle(GOST_Data_Part *DATA, uint8_t *GOST_Table, uint32_t *GOST_Key)
{
 8000900:	4613      	mov	r3, r2
 8000902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	9200      	str	r2, [sp, #0]
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 800090a:	4698      	mov	r8, r3
 800090c:	e9d0 9200 	ldrd	r9, r2, [r0]
 8000910:	f103 0b20 	add.w	fp, r3, #32
 8000914:	9701      	str	r7, [sp, #4]
 8000916:	e000      	b.n	800091a <GOST_Crypt_32_D_Cicle+0x1a>
 8000918:	461a      	mov	r2, r3
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half]+GOST_Key) ;//S=(N1+X)mod2^32
 800091a:	f858 3b04 	ldr.w	r3, [r8], #4
 800091e:	4413      	add	r3, r2
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000920:	f3c3 1703 	ubfx	r7, r3, #4, #4
 8000924:	3710      	adds	r7, #16
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000926:	f003 060f 	and.w	r6, r3, #15
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800092a:	f811 a007 	ldrb.w	sl, [r1, r7]
 800092e:	5d8e      	ldrb	r6, [r1, r6]
 8000930:	f3c3 3e03 	ubfx	lr, r3, #12, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000934:	f3c3 2503 	ubfx	r5, r3, #8, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000938:	f10e 0e30 	add.w	lr, lr, #48	@ 0x30
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 800093c:	3520      	adds	r5, #32
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800093e:	f811 e00e 	ldrb.w	lr, [r1, lr]
 8000942:	5d4d      	ldrb	r5, [r1, r5]
 8000944:	ea46 160a 	orr.w	r6, r6, sl, lsl #4
 8000948:	f3c3 5703 	ubfx	r7, r3, #20, #4
 800094c:	f366 0407 	bfi	r4, r6, #0, #8
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000950:	f3c3 4603 	ubfx	r6, r3, #16, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000954:	ea45 150e 	orr.w	r5, r5, lr, lsl #4
 8000958:	3750      	adds	r7, #80	@ 0x50
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 800095a:	f3c3 6e03 	ubfx	lr, r3, #24, #4
 800095e:	3640      	adds	r6, #64	@ 0x40
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000960:	5dcf      	ldrb	r7, [r1, r7]
 8000962:	5d8e      	ldrb	r6, [r1, r6]
 8000964:	eb01 7313 	add.w	r3, r1, r3, lsr #28
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000968:	f10e 0e60 	add.w	lr, lr, #96	@ 0x60
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 800096c:	f893 a070 	ldrb.w	sl, [r3, #112]	@ 0x70
 8000970:	f811 300e 	ldrb.w	r3, [r1, lr]
 8000974:	f365 240f 	bfi	r4, r5, #8, #8
 8000978:	ea46 1607 	orr.w	r6, r6, r7, lsl #4
 800097c:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
 8000980:	f366 4417 	bfi	r4, r6, #16, #8
 8000984:	f363 641f 	bfi	r4, r3, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 8000988:	ea89 5374 	eor.w	r3, r9, r4, ror #21
    uint8_t k,j;
//Key rotation:
//K0,K1,K2,K3,K4,K5,K6,K7, K7,K6,K5,K4,K3,K2,K1,K0, K7,K6,K5,K4,K3,K2,K1,K0, K7,K6,K5,K4,K3,K2,K1,K0
    for (j=0;j<8;j++)
 800098c:	45d8      	cmp	r8, fp
 800098e:	4691      	mov	r9, r2
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half];//N2=N1
 8000990:	6002      	str	r2, [r0, #0]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full;//N1=S
 8000992:	6043      	str	r3, [r0, #4]
    for (j=0;j<8;j++)
 8000994:	d1c0      	bne.n	8000918 <GOST_Crypt_32_D_Cicle+0x18>
 8000996:	2502      	movs	r5, #2
 8000998:	9f01      	ldr	r7, [sp, #4]
 800099a:	e9cd b702 	strd	fp, r7, [sp, #8]
 800099e:	462f      	mov	r7, r5
        GOST_Key++;
    }
//GOST_Key offset =  GOST_Key + _GOST_32_3P_CICLE_ITERS_J
    for(k=0;k<2;k++)
    {
        for (j=0;j<8;j++)
 80009a0:	4696      	mov	lr, r2
 80009a2:	9c02      	ldr	r4, [sp, #8]
 80009a4:	461a      	mov	r2, r3
 80009a6:	9701      	str	r7, [sp, #4]
 80009a8:	e000      	b.n	80009ac <GOST_Crypt_32_D_Cicle+0xac>
 80009aa:	461a      	mov	r2, r3
        {
            GOST_Key--;
 80009ac:	46a3      	mov	fp, r4
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half]+GOST_Key) ;//S=(N1+X)mod2^32
 80009ae:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80009b2:	442b      	add	r3, r5
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80009b4:	f3c3 1703 	ubfx	r7, r3, #4, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80009b8:	f003 050f 	and.w	r5, r3, #15
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80009bc:	3710      	adds	r7, #16
 80009be:	f811 a007 	ldrb.w	sl, [r1, r7]
 80009c2:	5d4f      	ldrb	r7, [r1, r5]
 80009c4:	f3c3 3903 	ubfx	r9, r3, #12, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80009c8:	f3c3 2603 	ubfx	r6, r3, #8, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80009cc:	f3c3 5803 	ubfx	r8, r3, #20, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80009d0:	f3c3 4503 	ubfx	r5, r3, #16, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80009d4:	ea47 170a 	orr.w	r7, r7, sl, lsl #4
 80009d8:	f109 0930 	add.w	r9, r9, #48	@ 0x30
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80009dc:	3620      	adds	r6, #32
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80009de:	f811 9009 	ldrb.w	r9, [r1, r9]
 80009e2:	5d8e      	ldrb	r6, [r1, r6]
 80009e4:	f367 0c07 	bfi	ip, r7, #0, #8
 80009e8:	f108 0850 	add.w	r8, r8, #80	@ 0x50
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80009ec:	f3c3 6703 	ubfx	r7, r3, #24, #4
 80009f0:	3540      	adds	r5, #64	@ 0x40
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80009f2:	f811 8008 	ldrb.w	r8, [r1, r8]
 80009f6:	5d4d      	ldrb	r5, [r1, r5]
 80009f8:	eb01 7313 	add.w	r3, r1, r3, lsr #28
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 80009fc:	3760      	adds	r7, #96	@ 0x60
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 80009fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8000a02:	5dcf      	ldrb	r7, [r1, r7]
 8000a04:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
 8000a08:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
 8000a0c:	f366 2c0f 	bfi	ip, r6, #8, #8
 8000a10:	f365 4c17 	bfi	ip, r5, #16, #8
 8000a14:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
        for (j=0;j<8;j++)
 8000a18:	9d00      	ldr	r5, [sp, #0]
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000a1a:	f367 6c1f 	bfi	ip, r7, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 8000a1e:	ea8e 537c 	eor.w	r3, lr, ip, ror #21
        for (j=0;j<8;j++)
 8000a22:	42a5      	cmp	r5, r4
 8000a24:	4696      	mov	lr, r2
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half];//N2=N1
 8000a26:	6002      	str	r2, [r0, #0]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full;//N1=S
 8000a28:	6043      	str	r3, [r0, #4]
        for (j=0;j<8;j++)
 8000a2a:	d1be      	bne.n	80009aa <GOST_Crypt_32_D_Cicle+0xaa>
    for(k=0;k<2;k++)
 8000a2c:	9f01      	ldr	r7, [sp, #4]
 8000a2e:	2f01      	cmp	r7, #1
 8000a30:	d001      	beq.n	8000a36 <GOST_Crypt_32_D_Cicle+0x136>
 8000a32:	2701      	movs	r7, #1
 8000a34:	e7b4      	b.n	80009a0 <GOST_Crypt_32_D_Cicle+0xa0>
 8000a36:	46dc      	mov	ip, fp
 8000a38:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8000a3c:	e000      	b.n	8000a40 <GOST_Crypt_32_D_Cicle+0x140>
 8000a3e:	4623      	mov	r3, r4
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half]+GOST_Key) ;//S=(N1+X)mod2^32
 8000a40:	f85b 4d04 	ldr.w	r4, [fp, #-4]!
 8000a44:	441c      	add	r4, r3
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000a46:	f3c4 1503 	ubfx	r5, r4, #4, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000a4a:	f004 0e0f 	and.w	lr, r4, #15
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000a4e:	3510      	adds	r5, #16
 8000a50:	f811 a005 	ldrb.w	sl, [r1, r5]
 8000a54:	f811 500e 	ldrb.w	r5, [r1, lr]
 8000a58:	f3c4 3803 	ubfx	r8, r4, #12, #4
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000a5c:	f3c4 2603 	ubfx	r6, r4, #8, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000a60:	f3c4 5e03 	ubfx	lr, r4, #20, #4
 8000a64:	ea45 150a 	orr.w	r5, r5, sl, lsl #4
 8000a68:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 8000a6c:	f10e 0e50 	add.w	lr, lr, #80	@ 0x50
 8000a70:	f365 0707 	bfi	r7, r5, #0, #8
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000a74:	3620      	adds	r6, #32
 8000a76:	f3c4 4503 	ubfx	r5, r4, #16, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000a7a:	f811 9008 	ldrb.w	r9, [r1, r8]
 8000a7e:	5d8e      	ldrb	r6, [r1, r6]
 8000a80:	f811 800e 	ldrb.w	r8, [r1, lr]
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000a84:	3540      	adds	r5, #64	@ 0x40
 8000a86:	f3c4 6e03 	ubfx	lr, r4, #24, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000a8a:	5d4d      	ldrb	r5, [r1, r5]
 8000a8c:	eb01 7414 	add.w	r4, r1, r4, lsr #28
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000a90:	f10e 0e60 	add.w	lr, lr, #96	@ 0x60
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000a94:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
 8000a98:	f894 9070 	ldrb.w	r9, [r4, #112]	@ 0x70
 8000a9c:	f811 400e 	ldrb.w	r4, [r1, lr]
 8000aa0:	f366 270f 	bfi	r7, r6, #8, #8
 8000aa4:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
 8000aa8:	ea44 1409 	orr.w	r4, r4, r9, lsl #4
 8000aac:	f365 4717 	bfi	r7, r5, #16, #8
 8000ab0:	f364 671f 	bfi	r7, r4, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 8000ab4:	ea82 5477 	eor.w	r4, r2, r7, ror #21
            GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Next_Step ) ;
        }
        GOST_Key+=8;
    }
    for (j=0;j<7;j++)
 8000ab8:	45e3      	cmp	fp, ip
 8000aba:	461a      	mov	r2, r3
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half];//N2=N1
 8000abc:	6003      	str	r3, [r0, #0]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full;//N1=S
 8000abe:	6044      	str	r4, [r0, #4]
    for (j=0;j<7;j++)
 8000ac0:	d1bd      	bne.n	8000a3e <GOST_Crypt_32_D_Cicle+0x13e>
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half]+GOST_Key) ;//S=(N1+X)mod2^32
 8000ac2:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 8000ac6:	4414      	add	r4, r2
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000ac8:	f3c4 1203 	ubfx	r2, r4, #4, #4
 8000acc:	3210      	adds	r2, #16
 8000ace:	5c8e      	ldrb	r6, [r1, r2]
 8000ad0:	2200      	movs	r2, #0
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000ad2:	f004 050f 	and.w	r5, r4, #15
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000ad6:	5d4d      	ldrb	r5, [r1, r5]
 8000ad8:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8000adc:	f365 0207 	bfi	r2, r5, #0, #8
 8000ae0:	f3c4 3503 	ubfx	r5, r4, #12, #4
        GOST_Table+= _GOST_TABLE_MAX_NODE_VALUE;//next line in table
 8000ae4:	f101 0620 	add.w	r6, r1, #32
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000ae8:	3510      	adds	r5, #16
 8000aea:	5d77      	ldrb	r7, [r6, r5]
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000aec:	f3c4 2503 	ubfx	r5, r4, #8, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000af0:	5d75      	ldrb	r5, [r6, r5]
        GOST_Table+= _GOST_TABLE_MAX_NODE_VALUE;//next line in table
 8000af2:	f101 0640 	add.w	r6, r1, #64	@ 0x40
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000af6:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
 8000afa:	f365 220f 	bfi	r2, r5, #8, #8
 8000afe:	f3c4 5503 	ubfx	r5, r4, #20, #4
 8000b02:	3510      	adds	r5, #16
 8000b04:	5d77      	ldrb	r7, [r6, r5]
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000b06:	f3c4 4503 	ubfx	r5, r4, #16, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000b0a:	5d75      	ldrb	r5, [r6, r5]
        GOST_Table+= _GOST_TABLE_MAX_NODE_VALUE;//next line in table
 8000b0c:	3160      	adds	r1, #96	@ 0x60
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000b0e:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
 8000b12:	f365 4217 	bfi	r2, r5, #16, #8
 8000b16:	eb01 7514 	add.w	r5, r1, r4, lsr #28
        S.parts[m] = *(GOST_Table+(tmp&0x0F));//Low value
 8000b1a:	f3c4 6403 	ubfx	r4, r4, #24, #4
        S.parts[m] |= (*(GOST_Table+((tmp&0xF0)>>4)))<<4;//Hi value
 8000b1e:	5d09      	ldrb	r1, [r1, r4]
 8000b20:	7c2c      	ldrb	r4, [r5, #16]
 8000b22:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 8000b26:	f361 621f 	bfi	r2, r1, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half]^custom_lrotl(S.full,11);//S=Rl(11,S); rol S,11 //S XOR N2
 8000b2a:	ea83 5372 	eor.w	r3, r3, r2, ror #21
        (*DATA).half[_GOST_Data_Part_N2_Half] = S.full; //N2=S
 8000b2e:	6003      	str	r3, [r0, #0]
        GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Next_Step ) ;
    }
    GOST_Key--;
    GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Last_Step ) ;

}
 8000b30:	b005      	add	sp, #20
 8000b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b36:	bf00      	nop

08000b38 <GOST_Encrypt_SR>:
@param *GOST_Table - Указатель на таблицу замены ГОСТ(ДК) в 128 байтном формате
(вместо старшого полубайта 0)
@param *GOST_Key - Указатель на 256 битный массив ключа(СК).
*/
void GOST_Encrypt_SR(uint8_t *Data, uint32_t Size, bool Mode, uint8_t *GOST_Table, uint8_t *GOST_Key )
{
 8000b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
    uint8_t Cur_Part_Size;
    GOST_Data_Part Data_prep;
    uint32_t *GOST_Key_pt=(uint32_t *) GOST_Key;

    while (Size!=0)
 8000b42:	b369      	cbz	r1, 8000ba0 <GOST_Encrypt_SR+0x68>
 8000b44:	4606      	mov	r6, r0
 8000b46:	4692      	mov	sl, r2
 8000b48:	4698      	mov	r8, r3
 8000b4a:	460d      	mov	r5, r1
 8000b4c:	466c      	mov	r4, sp
 8000b4e:	b352      	cbz	r2, 8000ba6 <GOST_Encrypt_SR+0x6e>
    {
        Cur_Part_Size=_Min(_GOST_Part_Size,Size);
        memset(&Data_prep,_GOST_Def_Byte,sizeof(Data_prep));
 8000b50:	f04f 0a00 	mov.w	sl, #0
        Cur_Part_Size=_Min(_GOST_Part_Size,Size);
 8000b54:	2d08      	cmp	r5, #8
 8000b56:	462f      	mov	r7, r5
 8000b58:	bf28      	it	cs
 8000b5a:	2708      	movcs	r7, #8
        memcpy(&Data_prep,Data,Cur_Part_Size);
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	463a      	mov	r2, r7
 8000b60:	4620      	mov	r0, r4
        memset(&Data_prep,_GOST_Def_Byte,sizeof(Data_prep));
 8000b62:	e9c4 aa00 	strd	sl, sl, [r4]
        memcpy(&Data_prep,Data,Cur_Part_Size);
 8000b66:	f002 fac3 	bl	80030f0 <memcpy>
#if _GOST_ROT==1
        Data_prep.half[_GOST_Data_Part_N2_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8000b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
        Data_prep.half[_GOST_Data_Part_N1_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
#endif
        if (Mode==_GOST_Mode_Encrypt)
        {
            GOST_Crypt_32_E_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 8000b6e:	4641      	mov	r1, r8
 8000b70:	fa92 fc82 	rev.w	ip, r2
 8000b74:	ba1b      	rev	r3, r3
 8000b76:	464a      	mov	r2, r9
 8000b78:	4620      	mov	r0, r4
        Data_prep.half[_GOST_Data_Part_N1_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8000b7a:	e9cd c300 	strd	ip, r3, [sp]
            GOST_Crypt_32_E_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 8000b7e:	f7ff fddf 	bl	8000740 <GOST_Crypt_32_E_Cicle>
        } else
        {
            GOST_Crypt_32_D_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
        }
#if _GOST_ROT==1
        Data_prep.half[_GOST_Data_Part_N2_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8000b82:	e9dd 3200 	ldrd	r3, r2, [sp]
        Data_prep.half[_GOST_Data_Part_N1_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
#endif
        memcpy(Data,&Data_prep, Cur_Part_Size);
 8000b86:	4630      	mov	r0, r6
 8000b88:	fa93 fc83 	rev.w	ip, r3
 8000b8c:	4621      	mov	r1, r4
 8000b8e:	ba13      	rev	r3, r2
 8000b90:	463a      	mov	r2, r7
        Data_prep.half[_GOST_Data_Part_N1_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8000b92:	e9cd c300 	strd	ip, r3, [sp]
        memcpy(Data,&Data_prep, Cur_Part_Size);
 8000b96:	f002 faab 	bl	80030f0 <memcpy>
    while (Size!=0)
 8000b9a:	1bed      	subs	r5, r5, r7
        Data+=Cur_Part_Size;
 8000b9c:	443e      	add	r6, r7
    while (Size!=0)
 8000b9e:	d1d9      	bne.n	8000b54 <GOST_Encrypt_SR+0x1c>
        Size-=Cur_Part_Size;
   }

}
 8000ba0:	b002      	add	sp, #8
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Cur_Part_Size=_Min(_GOST_Part_Size,Size);
 8000ba6:	2d08      	cmp	r5, #8
 8000ba8:	462f      	mov	r7, r5
 8000baa:	bf28      	it	cs
 8000bac:	2708      	movcs	r7, #8
        memcpy(&Data_prep,Data,Cur_Part_Size);
 8000bae:	4631      	mov	r1, r6
 8000bb0:	463a      	mov	r2, r7
 8000bb2:	4620      	mov	r0, r4
        memset(&Data_prep,_GOST_Def_Byte,sizeof(Data_prep));
 8000bb4:	e9c4 aa00 	strd	sl, sl, [r4]
        memcpy(&Data_prep,Data,Cur_Part_Size);
 8000bb8:	f002 fa9a 	bl	80030f0 <memcpy>
        Data_prep.half[_GOST_Data_Part_N2_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8000bbc:	e9dd 2300 	ldrd	r2, r3, [sp]
            GOST_Crypt_32_D_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 8000bc0:	4641      	mov	r1, r8
 8000bc2:	fa92 fc82 	rev.w	ip, r2
 8000bc6:	ba1b      	rev	r3, r3
 8000bc8:	464a      	mov	r2, r9
 8000bca:	4620      	mov	r0, r4
        Data_prep.half[_GOST_Data_Part_N1_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8000bcc:	e9cd c300 	strd	ip, r3, [sp]
            GOST_Crypt_32_D_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 8000bd0:	f7ff fe96 	bl	8000900 <GOST_Crypt_32_D_Cicle>
        Data_prep.half[_GOST_Data_Part_N2_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8000bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
        memcpy(Data,&Data_prep, Cur_Part_Size);
 8000bd8:	4630      	mov	r0, r6
 8000bda:	fa92 fc82 	rev.w	ip, r2
 8000bde:	ba1b      	rev	r3, r3
 8000be0:	463a      	mov	r2, r7
 8000be2:	4621      	mov	r1, r4
        Data_prep.half[_GOST_Data_Part_N1_Half]=_GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8000be4:	e9cd c300 	strd	ip, r3, [sp]
        memcpy(Data,&Data_prep, Cur_Part_Size);
 8000be8:	f002 fa82 	bl	80030f0 <memcpy>
    while (Size!=0)
 8000bec:	1bed      	subs	r5, r5, r7
        Data+=Cur_Part_Size;
 8000bee:	443e      	add	r6, r7
    while (Size!=0)
 8000bf0:	d1d9      	bne.n	8000ba6 <GOST_Encrypt_SR+0x6e>
 8000bf2:	e7d5      	b.n	8000ba0 <GOST_Encrypt_SR+0x68>

08000bf4 <GOST_Crypt_32_E_Cicle_Opt>:
@param *DATA - Указатель на данные для зашифрования в формате GOST_Data_Part
@param *subst_table - Указатель на оптимизированную таблицу подстановки
@param GOST_Key - 32хбитная часть ключа(СК).
*/
void GOST_Crypt_32_E_Cicle_Opt(uint32_t *n1, uint32_t *n2, GOST_Subst_Table Table, uint32_t *GOST_Key)
{
 8000bf4:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = (data + key) & 0xffffffff;
 8000bf6:	681d      	ldr	r5, [r3, #0]
    // Unroll the first 24 rounds for better performance
    uint32_t tmp;
    
    // Round 1-8 (K0-K7)
    tmp = *n1;
 8000bf8:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000bfa:	eb04 0c05 	add.w	ip, r4, r5
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000bfe:	eb02 651c 	add.w	r5, r2, ip, lsr #24
 8000c02:	f895 6300 	ldrb.w	r6, [r5, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000c06:	fa5f f58c 	uxtb.w	r5, ip
 8000c0a:	5d55      	ldrb	r5, [r2, r5]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c0c:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000c10:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000c14:	4416      	add	r6, r2
 8000c16:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c1a:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000c1e:	4494      	add	ip, r2
 8000c20:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8000c24:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000c28:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8000c2c:	680e      	ldr	r6, [r1, #0]
 8000c2e:	ea86 5675 	eor.w	r6, r6, r5, ror #21
 8000c32:	6006      	str	r6, [r0, #0]
    *n2 = tmp;
 8000c34:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c36:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8000c38:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c3a:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c3e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000c42:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c46:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000c4a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c4e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000c52:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000c56:	4416      	add	r6, r2
 8000c58:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c5c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000c60:	4494      	add	ip, r2
 8000c62:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000c66:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000c6a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 8000c6e:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000c72:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000c74:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c76:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8000c78:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c7a:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c7e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000c82:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c86:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000c8a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c8e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000c92:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000c96:	4416      	add	r6, r2
 8000c98:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c9c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000ca0:	4494      	add	ip, r2
 8000ca2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000ca6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000caa:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8000cae:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000cb2:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000cb4:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000cb6:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000cb8:	68de      	ldr	r6, [r3, #12]
 8000cba:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000cbe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000cc2:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000cc6:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000cca:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000cce:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000cd2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000cd6:	4416      	add	r6, r2
 8000cd8:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000cdc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000ce0:	4494      	add	ip, r2
 8000ce2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000ce6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000cea:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000cee:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000cf2:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000cf4:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000cf6:	691e      	ldr	r6, [r3, #16]

    tmp = *n1;
 8000cf8:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000cfa:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000cfe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000d02:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d06:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000d0a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d0e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000d12:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000d16:	4416      	add	r6, r2
 8000d18:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d1c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000d20:	4494      	add	ip, r2
 8000d22:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000d26:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000d2a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000d2e:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000d32:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000d34:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d36:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000d38:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d3a:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d3e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000d42:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d46:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000d4a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d4e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000d52:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000d56:	4416      	add	r6, r2
 8000d58:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d5c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000d60:	4494      	add	ip, r2
 8000d62:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000d66:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000d6a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 8000d6e:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000d72:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000d74:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d76:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8000d78:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d7a:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d7e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000d82:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d86:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000d8a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d8e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000d92:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000d96:	4416      	add	r6, r2
 8000d98:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d9c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000da0:	4494      	add	ip, r2
 8000da2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000da6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000daa:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000dae:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000db2:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000db4:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000db6:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000db8:	69de      	ldr	r6, [r3, #28]
 8000dba:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000dbe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000dc2:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000dc6:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000dca:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000dce:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000dd2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000dd6:	4416      	add	r6, r2
 8000dd8:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000ddc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000de0:	4494      	add	ip, r2
 8000de2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000de6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000dea:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000dee:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000df2:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000df4:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000df6:	681e      	ldr	r6, [r3, #0]

    // Round 9-16 (K0-K7)
    tmp = *n1;
 8000df8:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000dfa:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000dfe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000e02:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e06:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000e0a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e0e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000e12:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000e16:	4416      	add	r6, r2
 8000e18:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e1c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000e20:	4494      	add	ip, r2
 8000e22:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000e26:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000e2a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8000e2e:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000e32:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000e34:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e36:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8000e38:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e3a:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e3e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000e42:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e46:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000e4a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e4e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000e52:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000e56:	4416      	add	r6, r2
 8000e58:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e5c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000e60:	4494      	add	ip, r2
 8000e62:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000e66:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000e6a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 8000e6e:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000e72:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000e74:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e76:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8000e78:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e7a:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e7e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000e82:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e86:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000e8a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e8e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000e92:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000e96:	4416      	add	r6, r2
 8000e98:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e9c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000ea0:	4494      	add	ip, r2
 8000ea2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000ea6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000eaa:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8000eae:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000eb2:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000eb4:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000eb6:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000eb8:	68de      	ldr	r6, [r3, #12]
 8000eba:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ebe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000ec2:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ec6:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000eca:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000ece:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000ed2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000ed6:	4416      	add	r6, r2
 8000ed8:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000edc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000ee0:	4494      	add	ip, r2
 8000ee2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000ee6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000eea:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000eee:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000ef2:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000ef4:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000ef6:	691e      	ldr	r6, [r3, #16]

    tmp = *n1;
 8000ef8:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000efa:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000efe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000f02:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f06:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000f0a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f0e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000f12:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000f16:	4416      	add	r6, r2
 8000f18:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f1c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000f20:	4494      	add	ip, r2
 8000f22:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000f26:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000f2a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000f2e:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000f32:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000f34:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f36:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000f38:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f3a:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f3e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000f42:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f46:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000f4a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f4e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000f52:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000f56:	4416      	add	r6, r2
 8000f58:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f5c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000f60:	4494      	add	ip, r2
 8000f62:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000f66:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000f6a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 8000f6e:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000f72:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000f74:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f76:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8000f78:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f7a:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f7e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000f82:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f86:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000f8a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f8e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000f92:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000f96:	4416      	add	r6, r2
 8000f98:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f9c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000fa0:	4494      	add	ip, r2
 8000fa2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000fa6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000faa:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000fae:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000fb2:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000fb4:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000fb6:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000fb8:	69de      	ldr	r6, [r3, #28]
 8000fba:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000fbe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000fc2:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000fc6:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000fca:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000fce:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000fd2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000fd6:	4416      	add	r6, r2
 8000fd8:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000fdc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000fe0:	4494      	add	ip, r2
 8000fe2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000fe6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000fea:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000fee:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000ff2:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000ff4:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000ff6:	681e      	ldr	r6, [r3, #0]

    // Round 17-24 (K0-K7)
    tmp = *n1;
 8000ff8:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000ffa:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ffe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001002:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001006:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800100a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800100e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001012:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001016:	4416      	add	r6, r2
 8001018:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800101c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001020:	4494      	add	ip, r2
 8001022:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001026:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800102a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 800102e:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001032:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001034:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001036:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8001038:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800103a:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800103e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001042:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001046:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800104a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800104e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001052:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001056:	4416      	add	r6, r2
 8001058:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800105c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001060:	4494      	add	ip, r2
 8001062:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001066:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800106a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 800106e:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001072:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001074:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001076:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8001078:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800107a:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800107e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001082:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001086:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800108a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800108e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001092:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001096:	4416      	add	r6, r2
 8001098:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800109c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80010a0:	4494      	add	ip, r2
 80010a2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80010a6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80010aa:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 80010ae:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80010b2:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80010b4:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80010b6:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80010b8:	68de      	ldr	r6, [r3, #12]
 80010ba:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80010be:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80010c2:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80010c6:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80010ca:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80010ce:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80010d2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80010d6:	4416      	add	r6, r2
 80010d8:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80010dc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80010e0:	4494      	add	ip, r2
 80010e2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80010e6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80010ea:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 80010ee:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80010f2:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80010f4:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80010f6:	691e      	ldr	r6, [r3, #16]

    tmp = *n1;
 80010f8:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80010fa:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80010fe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001102:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001106:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800110a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800110e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001112:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001116:	4416      	add	r6, r2
 8001118:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800111c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001120:	4494      	add	ip, r2
 8001122:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001126:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800112a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 800112e:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001132:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001134:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001136:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8001138:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800113a:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800113e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001142:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001146:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800114a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800114e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001152:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001156:	4416      	add	r6, r2
 8001158:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800115c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001160:	4494      	add	ip, r2
 8001162:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001166:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800116a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 800116e:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001172:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001174:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001176:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8001178:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800117a:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800117e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001182:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001186:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800118a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800118e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001192:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001196:	4416      	add	r6, r2
 8001198:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800119c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80011a0:	4494      	add	ip, r2
 80011a2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80011a6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80011aa:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 80011ae:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80011b2:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80011b4:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80011b6:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80011b8:	69de      	ldr	r6, [r3, #28]
 80011ba:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80011be:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80011c2:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80011c6:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80011ca:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80011ce:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80011d2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80011d6:	4416      	add	r6, r2
 80011d8:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80011dc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80011e0:	4494      	add	ip, r2
 80011e2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80011e6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80011ea:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 80011ee:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80011f2:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80011f4:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80011f6:	69de      	ldr	r6, [r3, #28]

    // Last 8 rounds (K7-K0)
    tmp = *n1;
 80011f8:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80011fa:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80011fe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001202:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001206:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800120a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800120e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001212:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001216:	4416      	add	r6, r2
 8001218:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800121c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001220:	4494      	add	ip, r2
 8001222:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001226:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800122a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 800122e:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001232:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001234:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001236:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8001238:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800123a:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800123e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001242:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001246:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800124a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800124e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001252:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001256:	4416      	add	r6, r2
 8001258:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800125c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001260:	4494      	add	ip, r2
 8001262:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001266:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800126a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 800126e:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001272:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001274:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001276:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8001278:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800127a:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800127e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001282:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001286:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800128a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800128e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001292:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001296:	4416      	add	r6, r2
 8001298:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800129c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80012a0:	4494      	add	ip, r2
 80012a2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80012a6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80012aa:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 80012ae:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80012b2:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80012b4:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80012b6:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80012b8:	691e      	ldr	r6, [r3, #16]
 80012ba:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80012be:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80012c2:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80012c6:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80012ca:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80012ce:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80012d2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80012d6:	4416      	add	r6, r2
 80012d8:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80012dc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80012e0:	4494      	add	ip, r2
 80012e2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80012e6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80012ea:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 80012ee:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80012f2:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80012f4:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80012f6:	68de      	ldr	r6, [r3, #12]

    tmp = *n1;
 80012f8:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80012fa:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80012fe:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001302:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001306:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800130a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800130e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001312:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001316:	4416      	add	r6, r2
 8001318:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800131c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001320:	4494      	add	ip, r2
 8001322:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001326:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800132a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 800132e:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001332:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001334:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001336:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8001338:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800133a:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800133e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001342:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001346:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800134a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800134e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001352:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001356:	4416      	add	r6, r2
 8001358:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800135c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001360:	4494      	add	ip, r2
 8001362:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001366:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800136a:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 800136e:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001372:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001374:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001376:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8001378:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800137a:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800137e:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001382:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001386:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800138a:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800138e:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001392:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001396:	4416      	add	r6, r2
 8001398:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800139c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80013a0:	4494      	add	ip, r2
 80013a2:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80013a6:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80013aa:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 80013ae:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80013b2:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80013b4:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80013b6:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	442b      	add	r3, r5
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80013bc:	eb02 6613 	add.w	r6, r2, r3, lsr #24
    result = Table[(result & 0xff)] | 
 80013c0:	fa5f fc83 	uxtb.w	ip, r3
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80013c4:	f3c3 2e07 	ubfx	lr, r3, #8, #8
    result = Table[(result & 0xff)] | 
 80013c8:	f812 c00c 	ldrb.w	ip, [r2, ip]
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80013cc:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80013d0:	4496      	add	lr, r2
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80013d2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80013d6:	441a      	add	r2, r3
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80013d8:	f89e 3100 	ldrb.w	r3, [lr, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80013dc:	ea4c 6c06 	orr.w	ip, ip, r6, lsl #24
 80013e0:	f892 2200 	ldrb.w	r2, [r2, #512]	@ 0x200
 80013e4:	ea4c 2303 	orr.w	r3, ip, r3, lsl #8
 80013e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 1);
 80013ec:	ea84 5473 	eor.w	r4, r4, r3, ror #21
 80013f0:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80013f2:	600d      	str	r5, [r1, #0]
}
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
 80013f6:	bf00      	nop

080013f8 <GOST_Crypt_32_D_Cicle_Opt>:
@param *DATA - Указатель на данные для зашифрования в формате GOST_Data_Part
@param *subst_table - Указатель на оптимизированную таблицу подстановки
@param GOST_Key - 32хбитная часть ключа(СК).
*/
void GOST_Crypt_32_D_Cicle_Opt(uint32_t *n1, uint32_t *n2, GOST_Subst_Table Table, uint32_t *GOST_Key)
{
 80013f8:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = (data + key) & 0xffffffff;
 80013fa:	681d      	ldr	r5, [r3, #0]
    // Unroll the 32 rounds for better performance
    uint32_t tmp;
    
    // First 8 rounds (K0-K7)
    tmp = *n1;
 80013fc:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80013fe:	eb04 0c05 	add.w	ip, r4, r5
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001402:	eb02 651c 	add.w	r5, r2, ip, lsr #24
 8001406:	f895 6300 	ldrb.w	r6, [r5, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800140a:	fa5f f58c 	uxtb.w	r5, ip
 800140e:	5d55      	ldrb	r5, [r2, r5]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001410:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001414:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001418:	4416      	add	r6, r2
 800141a:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800141e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001422:	4494      	add	ip, r2
 8001424:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8001428:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800142c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8001430:	680e      	ldr	r6, [r1, #0]
 8001432:	ea86 5675 	eor.w	r6, r6, r5, ror #21
 8001436:	6006      	str	r6, [r0, #0]
    *n2 = tmp;
 8001438:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800143a:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 800143c:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800143e:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001442:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001446:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800144a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800144e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001452:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001456:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800145a:	4416      	add	r6, r2
 800145c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001460:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001464:	4494      	add	ip, r2
 8001466:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800146a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800146e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 8001472:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001476:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001478:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800147a:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 800147c:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800147e:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001482:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001486:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800148a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800148e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001492:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001496:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800149a:	4416      	add	r6, r2
 800149c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80014a0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80014a4:	4494      	add	ip, r2
 80014a6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80014aa:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80014ae:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 80014b2:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80014b6:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80014b8:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80014ba:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80014bc:	68de      	ldr	r6, [r3, #12]
 80014be:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80014c2:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80014c6:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80014ca:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80014ce:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80014d2:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80014d6:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80014da:	4416      	add	r6, r2
 80014dc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80014e0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80014e4:	4494      	add	ip, r2
 80014e6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80014ea:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80014ee:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 80014f2:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80014f6:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80014f8:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80014fa:	691e      	ldr	r6, [r3, #16]

    tmp = *n1;
 80014fc:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80014fe:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001502:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001506:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800150a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800150e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001512:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001516:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800151a:	4416      	add	r6, r2
 800151c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001520:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001524:	4494      	add	ip, r2
 8001526:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800152a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800152e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8001532:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001536:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001538:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800153a:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 800153c:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800153e:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001542:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001546:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800154a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800154e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001552:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001556:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800155a:	4416      	add	r6, r2
 800155c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001560:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001564:	4494      	add	ip, r2
 8001566:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800156a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800156e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 8001572:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001576:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001578:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800157a:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 800157c:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800157e:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001582:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001586:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800158a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800158e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001592:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001596:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800159a:	4416      	add	r6, r2
 800159c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80015a0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80015a4:	4494      	add	ip, r2
 80015a6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80015aa:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80015ae:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 80015b2:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80015b6:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80015b8:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80015ba:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80015bc:	69de      	ldr	r6, [r3, #28]
 80015be:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80015c2:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80015c6:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80015ca:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80015ce:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80015d2:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80015d6:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80015da:	4416      	add	r6, r2
 80015dc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80015e0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80015e4:	4494      	add	ip, r2
 80015e6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80015ea:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80015ee:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 80015f2:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80015f6:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80015f8:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80015fa:	69de      	ldr	r6, [r3, #28]

    // Remaining 24 rounds (K7-K0 repeated three times)
    // Round 9-16 (K7-K0)
    tmp = *n1;
 80015fc:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80015fe:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001602:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001606:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800160a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800160e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001612:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001616:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800161a:	4416      	add	r6, r2
 800161c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001620:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001624:	4494      	add	ip, r2
 8001626:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800162a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800162e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8001632:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001636:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001638:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800163a:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 800163c:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800163e:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001642:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001646:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800164a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800164e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001652:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001656:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800165a:	4416      	add	r6, r2
 800165c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001660:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001664:	4494      	add	ip, r2
 8001666:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800166a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800166e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8001672:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001676:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001678:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800167a:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 800167c:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800167e:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001682:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001686:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800168a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800168e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001692:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001696:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800169a:	4416      	add	r6, r2
 800169c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80016a0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80016a4:	4494      	add	ip, r2
 80016a6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80016aa:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80016ae:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 80016b2:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80016b6:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80016b8:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80016ba:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80016bc:	691e      	ldr	r6, [r3, #16]
 80016be:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80016c2:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80016c6:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80016ca:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80016ce:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80016d2:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80016d6:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80016da:	4416      	add	r6, r2
 80016dc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80016e0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80016e4:	4494      	add	ip, r2
 80016e6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80016ea:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80016ee:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 80016f2:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80016f6:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80016f8:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80016fa:	68de      	ldr	r6, [r3, #12]

    tmp = *n1;
 80016fc:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80016fe:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001702:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001706:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800170a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800170e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001712:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001716:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800171a:	4416      	add	r6, r2
 800171c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001720:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001724:	4494      	add	ip, r2
 8001726:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800172a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800172e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8001732:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001736:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001738:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800173a:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 800173c:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800173e:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001742:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001746:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800174a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800174e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001752:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001756:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800175a:	4416      	add	r6, r2
 800175c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001760:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001764:	4494      	add	ip, r2
 8001766:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800176a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800176e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8001772:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001776:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001778:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800177a:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 800177c:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800177e:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001782:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001786:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800178a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800178e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001792:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001796:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800179a:	4416      	add	r6, r2
 800179c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80017a0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80017a4:	4494      	add	ip, r2
 80017a6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80017aa:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80017ae:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 80017b2:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80017b6:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80017b8:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80017ba:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80017bc:	681e      	ldr	r6, [r3, #0]
 80017be:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80017c2:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80017c6:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80017ca:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80017ce:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80017d2:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80017d6:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80017da:	4416      	add	r6, r2
 80017dc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80017e0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80017e4:	4494      	add	ip, r2
 80017e6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80017ea:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80017ee:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 80017f2:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80017f6:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80017f8:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80017fa:	69de      	ldr	r6, [r3, #28]

    // Round 17-24 (K7-K0)
    tmp = *n1;
 80017fc:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80017fe:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001802:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001806:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800180a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800180e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001812:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001816:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800181a:	4416      	add	r6, r2
 800181c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001820:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001824:	4494      	add	ip, r2
 8001826:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800182a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800182e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8001832:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001836:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001838:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800183a:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 800183c:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800183e:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001842:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001846:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800184a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800184e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001852:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001856:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800185a:	4416      	add	r6, r2
 800185c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001860:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001864:	4494      	add	ip, r2
 8001866:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800186a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800186e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8001872:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001876:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001878:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800187a:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 800187c:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800187e:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001882:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001886:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800188a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800188e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001892:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001896:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800189a:	4416      	add	r6, r2
 800189c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80018a0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80018a4:	4494      	add	ip, r2
 80018a6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80018aa:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80018ae:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 80018b2:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80018b6:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80018b8:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80018ba:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80018bc:	691e      	ldr	r6, [r3, #16]
 80018be:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80018c2:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80018c6:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80018ca:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80018ce:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80018d2:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80018d6:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80018da:	4416      	add	r6, r2
 80018dc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80018e0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80018e4:	4494      	add	ip, r2
 80018e6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80018ea:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80018ee:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 80018f2:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80018f6:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80018f8:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80018fa:	68de      	ldr	r6, [r3, #12]

    tmp = *n1;
 80018fc:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80018fe:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001902:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001906:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800190a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800190e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001912:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001916:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800191a:	4416      	add	r6, r2
 800191c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001920:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001924:	4494      	add	ip, r2
 8001926:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800192a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800192e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8001932:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001936:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001938:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800193a:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 800193c:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800193e:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001942:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001946:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800194a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800194e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001952:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001956:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800195a:	4416      	add	r6, r2
 800195c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001960:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001964:	4494      	add	ip, r2
 8001966:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800196a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 800196e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8001972:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001976:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001978:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800197a:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 800197c:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800197e:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001982:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001986:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800198a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800198e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001992:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001996:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800199a:	4416      	add	r6, r2
 800199c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80019a0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80019a4:	4494      	add	ip, r2
 80019a6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80019aa:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80019ae:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 80019b2:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 80019b6:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 80019b8:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 80019ba:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80019bc:	681e      	ldr	r6, [r3, #0]
 80019be:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80019c2:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80019c6:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80019ca:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80019ce:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80019d2:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80019d6:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80019da:	4416      	add	r6, r2
 80019dc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80019e0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80019e4:	4494      	add	ip, r2
 80019e6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80019ea:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80019ee:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 80019f2:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80019f6:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80019f8:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80019fa:	69de      	ldr	r6, [r3, #28]

    // Round 25-32 (K7-K0)
    tmp = *n1;
 80019fc:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80019fe:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001a02:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001a06:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001a0a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001a0e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001a12:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001a16:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001a1a:	4416      	add	r6, r2
 8001a1c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001a20:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001a24:	4494      	add	ip, r2
 8001a26:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001a2a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001a2e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8001a32:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001a36:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001a38:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001a3a:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8001a3c:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001a3e:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001a42:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001a46:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001a4a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001a4e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001a52:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001a56:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001a5a:	4416      	add	r6, r2
 8001a5c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001a60:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001a64:	4494      	add	ip, r2
 8001a66:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001a6a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001a6e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8001a72:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001a76:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001a78:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001a7a:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8001a7c:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001a7e:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001a82:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001a86:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001a8a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001a8e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001a92:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001a96:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001a9a:	4416      	add	r6, r2
 8001a9c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001aa0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001aa4:	4494      	add	ip, r2
 8001aa6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001aaa:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001aae:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 8001ab2:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001ab6:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001ab8:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8001aba:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001abc:	691e      	ldr	r6, [r3, #16]
 8001abe:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001ac2:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001ac6:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001aca:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001ace:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001ad2:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001ad6:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001ada:	4416      	add	r6, r2
 8001adc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001ae0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001ae4:	4494      	add	ip, r2
 8001ae6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001aea:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001aee:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8001af2:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001af6:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001af8:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001afa:	68de      	ldr	r6, [r3, #12]

    tmp = *n1;
 8001afc:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001afe:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001b02:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001b06:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001b0a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001b0e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001b12:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001b16:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001b1a:	4416      	add	r6, r2
 8001b1c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001b20:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001b24:	4494      	add	ip, r2
 8001b26:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001b2a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001b2e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8001b32:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001b36:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001b38:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001b3a:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8001b3c:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001b3e:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001b42:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001b46:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001b4a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001b4e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001b52:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001b56:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001b5a:	4416      	add	r6, r2
 8001b5c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001b60:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001b64:	4494      	add	ip, r2
 8001b66:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001b6a:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001b6e:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8001b72:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8001b76:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001b78:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001b7a:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8001b7c:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001b7e:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001b82:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8001b86:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001b8a:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001b8e:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001b92:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001b96:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001b9a:	4416      	add	r6, r2
 8001b9c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001ba0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8001ba4:	4494      	add	ip, r2
 8001ba6:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001baa:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001bae:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 8001bb2:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8001bb6:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001bb8:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8001bba:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	442b      	add	r3, r5
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001bc0:	eb02 6613 	add.w	r6, r2, r3, lsr #24
    result = Table[(result & 0xff)] | 
 8001bc4:	fa5f fc83 	uxtb.w	ip, r3
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001bc8:	f3c3 2e07 	ubfx	lr, r3, #8, #8
    result = Table[(result & 0xff)] | 
 8001bcc:	f812 c00c 	ldrb.w	ip, [r2, ip]
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001bd0:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001bd4:	4496      	add	lr, r2
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001bd6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001bda:	441a      	add	r2, r3
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001bdc:	f89e 3100 	ldrb.w	r3, [lr, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001be0:	ea4c 6c06 	orr.w	ip, ip, r6, lsl #24
 8001be4:	f892 2200 	ldrb.w	r2, [r2, #512]	@ 0x200
 8001be8:	ea4c 2303 	orr.w	r3, ip, r3, lsl #8
 8001bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 1);
 8001bf0:	ea84 5473 	eor.w	r4, r4, r3, ror #21
 8001bf4:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001bf6:	600d      	str	r5, [r1, #0]
}
 8001bf8:	bd70      	pop	{r4, r5, r6, pc}
 8001bfa:	bf00      	nop

08001bfc <GOST_Encrypt_SR_Opt>:
@param Mode - Если _GOST_Mode_Encrypt шифрования, _GOST_Mode_Decrypt - расшифрование
@param *subst_table - Указатель на оптимизированную таблицу подстановки
@param *GOST_Key - Указатель на 256 битный массив ключа(СК).
*/
int GOST_Encrypt_SR_Opt(uint8_t *Data, uint32_t Size, uint8_t Mode, GOST_Subst_Table Table, uint8_t *GOST_Key_start)
{
 8001bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c00:	b08f      	sub	sp, #60	@ 0x3c
 8001c02:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8001c04:	461e      	mov	r6, r3
 8001c06:	68a3      	ldr	r3, [r4, #8]
 8001c08:	6825      	ldr	r5, [r4, #0]
 8001c0a:	ba1b      	rev	r3, r3
    GOST_Data_Part Temp;
    uint32_t n;
    
    // Prepare the key in the correct byte order
    for (int i = 0; i < 8; i++) {
        GOST_Key[i] = _GOST_SWAP32(((uint32_t *)GOST_Key_start)[i]);
 8001c0c:	9308      	str	r3, [sp, #32]
 8001c0e:	68e3      	ldr	r3, [r4, #12]
 8001c10:	ba2d      	rev	r5, r5
 8001c12:	ba1b      	rev	r3, r3
 8001c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c16:	6923      	ldr	r3, [r4, #16]
 8001c18:	9506      	str	r5, [sp, #24]
 8001c1a:	ba1b      	rev	r3, r3
 8001c1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8001c1e:	6963      	ldr	r3, [r4, #20]
 8001c20:	6865      	ldr	r5, [r4, #4]
 8001c22:	ba1b      	rev	r3, r3
{
 8001c24:	4692      	mov	sl, r2
 8001c26:	ba2d      	rev	r5, r5
        GOST_Key[i] = _GOST_SWAP32(((uint32_t *)GOST_Key_start)[i]);
 8001c28:	930b      	str	r3, [sp, #44]	@ 0x2c
    }
    
    // Process full blocks
    for (n = 0; n < Size / 8; n++) {
 8001c2a:	ea5f 0cd1 	movs.w	ip, r1, lsr #3
 8001c2e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8001c32:	ba12      	rev	r2, r2
 8001c34:	ba1b      	rev	r3, r3
{
 8001c36:	468b      	mov	fp, r1
 8001c38:	4681      	mov	r9, r0
        GOST_Key[i] = _GOST_SWAP32(((uint32_t *)GOST_Key_start)[i]);
 8001c3a:	9507      	str	r5, [sp, #28]
 8001c3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8001c3e:	930d      	str	r3, [sp, #52]	@ 0x34
    for (n = 0; n < Size / 8; n++) {
 8001c40:	d015      	beq.n	8001c6e <GOST_Encrypt_SR_Opt+0x72>
 8001c42:	f1ba 0f01 	cmp.w	sl, #1
 8001c46:	d065      	beq.n	8001d14 <GOST_Encrypt_SR_Opt+0x118>
 8001c48:	f1ba 0f00 	cmp.w	sl, #0
 8001c4c:	d035      	beq.n	8001cba <GOST_Encrypt_SR_Opt+0xbe>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	1d02      	adds	r2, r0, #4
 8001c52:	eb00 07cc 	add.w	r7, r0, ip, lsl #3
        // Load data directly from the data pointer into GOST_Data_Part structure
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 8001c56:	6859      	ldr	r1, [r3, #4]
    for (n = 0; n < Size / 8; n++) {
 8001c58:	3308      	adds	r3, #8
 8001c5a:	42bb      	cmp	r3, r7
 8001c5c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8001c60:	f102 0208 	add.w	r2, r2, #8
 8001c64:	d1f7      	bne.n	8001c56 <GOST_Encrypt_SR_Opt+0x5a>
 8001c66:	ba00      	rev	r0, r0
 8001c68:	ba09      	rev	r1, r1
 8001c6a:	9003      	str	r0, [sp, #12]
 8001c6c:	9102      	str	r1, [sp, #8]
        ((uint32_t *)(Data + n * 8))[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
    }
    
    // Handle any remaining partial block (less than 8 bytes)
    uint32_t remain = Size % 8;
    if (remain > 0) {
 8001c6e:	f01b 0b07 	ands.w	fp, fp, #7
 8001c72:	d01e      	beq.n	8001cb2 <GOST_Encrypt_SR_Opt+0xb6>
        uint8_t block[8] = {0};
 8001c74:	2300      	movs	r3, #0
 8001c76:	eb09 09cc 	add.w	r9, r9, ip, lsl #3
        // Copy the remaining bytes to a temp buffer
        for (uint32_t i = 0; i < remain; i++) {
            block[i] = Data[n * 8 + i];
 8001c7a:	465a      	mov	r2, fp
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	a804      	add	r0, sp, #16
        uint8_t block[8] = {0};
 8001c80:	e9cd 3304 	strd	r3, r3, [sp, #16]
            block[i] = Data[n * 8 + i];
 8001c84:	f001 fa34 	bl	80030f0 <memcpy>
        }
        
        // Process the final partial block
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)block)[0]);
 8001c88:	9a04      	ldr	r2, [sp, #16]
 8001c8a:	9b05      	ldr	r3, [sp, #20]
 8001c8c:	ba12      	rev	r2, r2
 8001c8e:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)block)[1]);
        
        if (Mode == _GOST_Mode_Encrypt) {
 8001c90:	f1ba 0f01 	cmp.w	sl, #1
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)block)[0]);
 8001c94:	9203      	str	r2, [sp, #12]
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)block)[1]);
 8001c96:	9302      	str	r3, [sp, #8]
        if (Mode == _GOST_Mode_Encrypt) {
 8001c98:	d033      	beq.n	8001d02 <GOST_Encrypt_SR_Opt+0x106>
            GOST_Crypt_32_E_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
        } else if (Mode == _GOST_Mode_Decrypt) {
 8001c9a:	f1ba 0f00 	cmp.w	sl, #0
 8001c9e:	d05d      	beq.n	8001d5c <GOST_Encrypt_SR_Opt+0x160>
            GOST_Crypt_32_D_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
        }
        
        ((uint32_t *)block)[0] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N1_Half]);
 8001ca0:	ba15      	rev	r5, r2
 8001ca2:	ba1b      	rev	r3, r3
        ((uint32_t *)block)[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
        
        // Copy the encrypted/decrypted data back to the original buffer
        for (uint32_t i = 0; i < remain; i++) {
            Data[n * 8 + i] = block[i];
 8001ca4:	465a      	mov	r2, fp
 8001ca6:	4648      	mov	r0, r9
 8001ca8:	a904      	add	r1, sp, #16
        ((uint32_t *)block)[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
 8001caa:	e9cd 5304 	strd	r5, r3, [sp, #16]
            Data[n * 8 + i] = block[i];
 8001cae:	f001 fa1f 	bl	80030f0 <memcpy>
        }
    }
    
    return 0;
}
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	b00f      	add	sp, #60	@ 0x3c
 8001cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cba:	4604      	mov	r4, r0
 8001cbc:	1d05      	adds	r5, r0, #4
 8001cbe:	eb00 08cc 	add.w	r8, r0, ip, lsl #3
 8001cc2:	af06      	add	r7, sp, #24
 8001cc4:	a902      	add	r1, sp, #8
 8001cc6:	a803      	add	r0, sp, #12
 8001cc8:	f8cd c004 	str.w	ip, [sp, #4]
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 8001ccc:	f855 3c04 	ldr.w	r3, [r5, #-4]
            GOST_Crypt_32_D_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001cd0:	4632      	mov	r2, r6
 8001cd2:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 8001cd4:	9303      	str	r3, [sp, #12]
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[1]);
 8001cd6:	6863      	ldr	r3, [r4, #4]
    for (n = 0; n < Size / 8; n++) {
 8001cd8:	3408      	adds	r4, #8
 8001cda:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[1]);
 8001cdc:	9302      	str	r3, [sp, #8]
            GOST_Crypt_32_D_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001cde:	463b      	mov	r3, r7
 8001ce0:	f7ff fb8a 	bl	80013f8 <GOST_Crypt_32_D_Cicle_Opt>
 8001ce4:	9b02      	ldr	r3, [sp, #8]
        ((uint32_t *)(Data + n * 8))[0] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N1_Half]);
 8001ce6:	9a03      	ldr	r2, [sp, #12]
 8001ce8:	ba1b      	rev	r3, r3
 8001cea:	ba12      	rev	r2, r2
 8001cec:	f845 2c04 	str.w	r2, [r5, #-4]
        ((uint32_t *)(Data + n * 8))[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
 8001cf0:	f844 3c04 	str.w	r3, [r4, #-4]
    for (n = 0; n < Size / 8; n++) {
 8001cf4:	4544      	cmp	r4, r8
 8001cf6:	f105 0508 	add.w	r5, r5, #8
 8001cfa:	d1e7      	bne.n	8001ccc <GOST_Encrypt_SR_Opt+0xd0>
 8001cfc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001d00:	e7b5      	b.n	8001c6e <GOST_Encrypt_SR_Opt+0x72>
            GOST_Crypt_32_E_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001d02:	4632      	mov	r2, r6
 8001d04:	ab06      	add	r3, sp, #24
 8001d06:	a902      	add	r1, sp, #8
 8001d08:	a803      	add	r0, sp, #12
 8001d0a:	f7fe ff73 	bl	8000bf4 <GOST_Crypt_32_E_Cicle_Opt>
 8001d0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8001d12:	e7c5      	b.n	8001ca0 <GOST_Encrypt_SR_Opt+0xa4>
 8001d14:	4604      	mov	r4, r0
 8001d16:	1d05      	adds	r5, r0, #4
 8001d18:	eb00 08cc 	add.w	r8, r0, ip, lsl #3
 8001d1c:	af06      	add	r7, sp, #24
 8001d1e:	a902      	add	r1, sp, #8
 8001d20:	a803      	add	r0, sp, #12
 8001d22:	f8cd c004 	str.w	ip, [sp, #4]
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 8001d26:	f855 3c04 	ldr.w	r3, [r5, #-4]
            GOST_Crypt_32_E_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001d2a:	4632      	mov	r2, r6
 8001d2c:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 8001d2e:	9303      	str	r3, [sp, #12]
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[1]);
 8001d30:	6863      	ldr	r3, [r4, #4]
    for (n = 0; n < Size / 8; n++) {
 8001d32:	3408      	adds	r4, #8
 8001d34:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[1]);
 8001d36:	9302      	str	r3, [sp, #8]
            GOST_Crypt_32_E_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001d38:	463b      	mov	r3, r7
 8001d3a:	f7fe ff5b 	bl	8000bf4 <GOST_Crypt_32_E_Cicle_Opt>
 8001d3e:	9b02      	ldr	r3, [sp, #8]
        ((uint32_t *)(Data + n * 8))[0] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N1_Half]);
 8001d40:	9a03      	ldr	r2, [sp, #12]
 8001d42:	ba1b      	rev	r3, r3
 8001d44:	ba12      	rev	r2, r2
 8001d46:	f845 2c04 	str.w	r2, [r5, #-4]
        ((uint32_t *)(Data + n * 8))[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
 8001d4a:	f844 3c04 	str.w	r3, [r4, #-4]
    for (n = 0; n < Size / 8; n++) {
 8001d4e:	4544      	cmp	r4, r8
 8001d50:	f105 0508 	add.w	r5, r5, #8
 8001d54:	d1e7      	bne.n	8001d26 <GOST_Encrypt_SR_Opt+0x12a>
 8001d56:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001d5a:	e788      	b.n	8001c6e <GOST_Encrypt_SR_Opt+0x72>
            GOST_Crypt_32_D_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001d5c:	4632      	mov	r2, r6
 8001d5e:	ab06      	add	r3, sp, #24
 8001d60:	a902      	add	r1, sp, #8
 8001d62:	a803      	add	r0, sp, #12
 8001d64:	f7ff fb48 	bl	80013f8 <GOST_Crypt_32_D_Cicle_Opt>
 8001d68:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8001d6c:	e798      	b.n	8001ca0 <GOST_Encrypt_SR_Opt+0xa4>
 8001d6e:	bf00      	nop

08001d70 <gost_main>:

//   return result;
// }

/* GOST test function */
int gost_main() {
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	b0bb      	sub	sp, #236	@ 0xec
    // Define the 256-bit key (32 bytes)
    uint8_t key[32] = {
 8001d74:	ad02      	add	r5, sp, #8
 8001d76:	462c      	mov	r4, r5
 8001d78:	4e41      	ldr	r6, [pc, #260]	@ (8001e80 <gost_main+0x110>)
 8001d7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0x15, 0x47, 0x12, 0x42, 0x91, 0xAE, 0x1E, 0x8A, 
        0x2F, 0x79, 0xCD, 0x9E, 0xD2, 0xBC, 0xEF, 0xBD
    };

    // Define a sample S-box (128 bytes, 8 rows of 16 nibbles)
    uint8_t sbox[128] = {
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	493e      	ldr	r1, [pc, #248]	@ (8001e84 <gost_main+0x114>)
 8001d8a:	a81a      	add	r0, sp, #104	@ 0x68
 8001d8c:	f001 f9b0 	bl	80030f0 <memcpy>

    // Test data (64 bytes - multiple blocks)
    uint8_t test_data[64];
    
    // Initialize test data
    for (int i = 0; i < sizeof(test_data); i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	f10d 0227 	add.w	r2, sp, #39	@ 0x27
        test_data[i] = i & 0xFF;
 8001d96:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (int i = 0; i < sizeof(test_data); i++) {
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	2b40      	cmp	r3, #64	@ 0x40
 8001d9e:	d1fa      	bne.n	8001d96 <gost_main+0x26>
    // Performance measurement variables
    uint32_t iterations = 20000;
    uint32_t start_time, end_time, elapsed;
    
    // Signal start of benchmark
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001da6:	4838      	ldr	r0, [pc, #224]	@ (8001e88 <gost_main+0x118>)
 8001da8:	f000 fd78 	bl	800289c <HAL_GPIO_WritePin>
    HAL_Delay(10000); // Wait 3 seconds
 8001dac:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001db0:	f000 faf6 	bl	80023a0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dba:	4833      	ldr	r0, [pc, #204]	@ (8001e88 <gost_main+0x118>)
 8001dbc:	f000 fd6e 	bl	800289c <HAL_GPIO_WritePin>
    
    // Measure time for original GOST implementation
    start_time = HAL_GetTick();
 8001dc0:	f000 fae8 	bl	8002394 <HAL_GetTick>
 8001dc4:	f644 6420 	movw	r4, #20000	@ 0x4e20
 8001dc8:	4606      	mov	r6, r0
    for (uint32_t i = 0; i < iterations; i++) {
        GOST_Encrypt_SR(test_data, 8, _GOST_Mode_Encrypt, sbox, key);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2108      	movs	r1, #8
 8001dce:	ab1a      	add	r3, sp, #104	@ 0x68
 8001dd0:	a80a      	add	r0, sp, #40	@ 0x28
 8001dd2:	9500      	str	r5, [sp, #0]
 8001dd4:	f7fe feb0 	bl	8000b38 <GOST_Encrypt_SR>
    for (uint32_t i = 0; i < iterations; i++) {
 8001dd8:	3c01      	subs	r4, #1
 8001dda:	d1f6      	bne.n	8001dca <gost_main+0x5a>
    }
    end_time = HAL_GetTick();
 8001ddc:	f000 fada 	bl	8002394 <HAL_GetTick>
 8001de0:	4607      	mov	r7, r0
    elapsed = end_time - start_time;
    
    // Signal end of benchmark
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001de2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001de6:	4622      	mov	r2, r4
 8001de8:	4827      	ldr	r0, [pc, #156]	@ (8001e88 <gost_main+0x118>)
 8001dea:	f000 fd57 	bl	800289c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001dee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001df2:	f000 fad5 	bl	80023a0 <HAL_Delay>
    elapsed = end_time - start_time;
 8001df6:	1bbf      	subs	r7, r7, r6
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dfe:	4822      	ldr	r0, [pc, #136]	@ (8001e88 <gost_main+0x118>)
 8001e00:	f000 fd4c 	bl	800289c <HAL_GPIO_WritePin>
    
    // Flash LED to indicate elapsed time (in seconds)
    uint32_t elapsed_seconds = elapsed / 1000;
    if (elapsed_seconds == 0) elapsed_seconds = 1;
 8001e04:	f5b7 7f7a 	cmp.w	r7, #1000	@ 0x3e8
 8001e08:	d218      	bcs.n	8001e3c <gost_main+0xcc>
    
    HAL_Delay(2000); // Pause before blinking
 8001e0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e0e:	f000 fac7 	bl	80023a0 <HAL_Delay>
    
    for (uint32_t i = 0; i < elapsed_seconds; i++) {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001e12:	4622      	mov	r2, r4
 8001e14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e18:	481b      	ldr	r0, [pc, #108]	@ (8001e88 <gost_main+0x118>)
 8001e1a:	f000 fd3f 	bl	800289c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8001e1e:	20c8      	movs	r0, #200	@ 0xc8
 8001e20:	f000 fabe 	bl	80023a0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8001e24:	2201      	movs	r2, #1
 8001e26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e2a:	4817      	ldr	r0, [pc, #92]	@ (8001e88 <gost_main+0x118>)
 8001e2c:	f000 fd36 	bl	800289c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8001e30:	20c8      	movs	r0, #200	@ 0xc8
 8001e32:	f000 fab5 	bl	80023a0 <HAL_Delay>
    }
    
    return elapsed;
}
 8001e36:	4638      	mov	r0, r7
 8001e38:	b03b      	add	sp, #236	@ 0xec
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_Delay(2000); // Pause before blinking
 8001e3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e40:	f000 faae 	bl	80023a0 <HAL_Delay>
    uint32_t elapsed_seconds = elapsed / 1000;
 8001e44:	4e11      	ldr	r6, [pc, #68]	@ (8001e8c <gost_main+0x11c>)
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001e46:	4d10      	ldr	r5, [pc, #64]	@ (8001e88 <gost_main+0x118>)
    uint32_t elapsed_seconds = elapsed / 1000;
 8001e48:	fba6 3607 	umull	r3, r6, r6, r7
 8001e4c:	09b6      	lsrs	r6, r6, #6
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e54:	4628      	mov	r0, r5
 8001e56:	f000 fd21 	bl	800289c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8001e5a:	20c8      	movs	r0, #200	@ 0xc8
 8001e5c:	f000 faa0 	bl	80023a0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8001e60:	2201      	movs	r2, #1
 8001e62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e66:	4628      	mov	r0, r5
 8001e68:	f000 fd18 	bl	800289c <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < elapsed_seconds; i++) {
 8001e6c:	3401      	adds	r4, #1
        HAL_Delay(200);
 8001e6e:	20c8      	movs	r0, #200	@ 0xc8
 8001e70:	f000 fa96 	bl	80023a0 <HAL_Delay>
    for (uint32_t i = 0; i < elapsed_seconds; i++) {
 8001e74:	42a6      	cmp	r6, r4
 8001e76:	d1ea      	bne.n	8001e4e <gost_main+0xde>
}
 8001e78:	4638      	mov	r0, r7
 8001e7a:	b03b      	add	sp, #236	@ 0xec
 8001e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	080031a4 	.word	0x080031a4
 8001e84:	08003124 	.word	0x08003124
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	10624dd3 	.word	0x10624dd3

08001e90 <gost_opt_main>:

/* GOST test function */
// Optimized GOST
int gost_opt_main() {
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	f2ad 4dec 	subw	sp, sp, #1260	@ 0x4ec
    // Define the 256-bit key (32 bytes) - SAME AS gost_main()
    uint8_t key[32] = {
 8001e96:	ac02      	add	r4, sp, #8
 8001e98:	4625      	mov	r5, r4
 8001e9a:	4e59      	ldr	r6, [pc, #356]	@ (8002000 <gost_opt_main+0x170>)
 8001e9c:	af1a      	add	r7, sp, #104	@ 0x68
 8001e9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ea6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        0x15, 0x47, 0x12, 0x42, 0x91, 0xAE, 0x1E, 0x8A, 
        0x2F, 0x79, 0xCD, 0x9E, 0xD2, 0xBC, 0xEF, 0xBD
    };

    // Define a sample S-box (128 bytes, 8 rows of 16 nibbles) - SAME AS gost_main()
    uint8_t sbox[128] = {
 8001eaa:	2280      	movs	r2, #128	@ 0x80
 8001eac:	4955      	ldr	r1, [pc, #340]	@ (8002004 <gost_opt_main+0x174>)
 8001eae:	a81a      	add	r0, sp, #104	@ 0x68
 8001eb0:	f001 f91e 	bl	80030f0 <memcpy>
 8001eb4:	2500      	movs	r5, #0
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	ae3a      	add	r6, sp, #232	@ 0xe8
        for(int b = 0; b < 256; b++) {
            uint8_t low_nibble = b & 0x0F;
            uint8_t high_nibble = (b >> 4) & 0x0F;
            uint8_t low_subst = sbox_low[low_nibble];
            uint8_t high_subst = sbox_high[high_nibble];
            subst_table[i*256 + b] = low_subst | (high_subst << 4);
 8001eba:	4630      	mov	r0, r6
        for(int b = 0; b < 256; b++) {
 8001ebc:	2201      	movs	r2, #1
            subst_table[i*256 + b] = low_subst | (high_subst << 4);
 8001ebe:	7c39      	ldrb	r1, [r7, #16]
 8001ec0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001ec4:	7033      	strb	r3, [r6, #0]
        for(int b = 0; b < 256; b++) {
 8001ec6:	f505 639f 	add.w	r3, r5, #1272	@ 0x4f8
 8001eca:	eb0d 0c03 	add.w	ip, sp, r3
 8001ece:	f505 639d 	add.w	r3, r5, #1256	@ 0x4e8
 8001ed2:	eb0d 0e03 	add.w	lr, sp, r3
            uint8_t low_subst = sbox_low[low_nibble];
 8001ed6:	f002 030f 	and.w	r3, r2, #15
            uint8_t high_subst = sbox_high[high_nibble];
 8001eda:	eb0c 1122 	add.w	r1, ip, r2, asr #4
            uint8_t low_subst = sbox_low[low_nibble];
 8001ede:	4473      	add	r3, lr
            uint8_t high_subst = sbox_high[high_nibble];
 8001ee0:	f5a1 6190 	sub.w	r1, r1, #1152	@ 0x480
            uint8_t low_subst = sbox_low[low_nibble];
 8001ee4:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
            subst_table[i*256 + b] = low_subst | (high_subst << 4);
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	7809      	ldrb	r1, [r1, #0]
        for(int b = 0; b < 256; b++) {
 8001eec:	3201      	adds	r2, #1
            subst_table[i*256 + b] = low_subst | (high_subst << 4);
 8001eee:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
        for(int b = 0; b < 256; b++) {
 8001ef2:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
            subst_table[i*256 + b] = low_subst | (high_subst << 4);
 8001ef6:	f800 3f01 	strb.w	r3, [r0, #1]!
        for(int b = 0; b < 256; b++) {
 8001efa:	d1ec      	bne.n	8001ed6 <gost_opt_main+0x46>
    for(int i = 0; i < 4; i++) {
 8001efc:	3520      	adds	r5, #32
 8001efe:	2d80      	cmp	r5, #128	@ 0x80
 8001f00:	f506 7680 	add.w	r6, r6, #256	@ 0x100
 8001f04:	d002      	beq.n	8001f0c <gost_opt_main+0x7c>
            uint8_t low_subst = sbox_low[low_nibble];
 8001f06:	f817 3f20 	ldrb.w	r3, [r7, #32]!
 8001f0a:	e7d6      	b.n	8001eba <gost_opt_main+0x2a>

    // Test data (identical to gost_main)
    uint8_t test_data[64];
    
    // Initialize test data (identical to gost_main)
    for (int i = 0; i < sizeof(test_data); i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f10d 0227 	add.w	r2, sp, #39	@ 0x27
        test_data[i] = i & 0xFF;
 8001f12:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (int i = 0; i < sizeof(test_data); i++) {
 8001f16:	3301      	adds	r3, #1
 8001f18:	2b40      	cmp	r3, #64	@ 0x40
 8001f1a:	d1fa      	bne.n	8001f12 <gost_opt_main+0x82>
    // Performance measurement variables
    uint32_t iterations = 20000;
    uint32_t start_time, end_time, elapsed;
    
    // Signal start of benchmark
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f22:	4839      	ldr	r0, [pc, #228]	@ (8002008 <gost_opt_main+0x178>)
 8001f24:	f000 fcba 	bl	800289c <HAL_GPIO_WritePin>
    HAL_Delay(10000); // Wait 3 seconds
 8001f28:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001f2c:	f000 fa38 	bl	80023a0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8001f30:	2201      	movs	r2, #1
 8001f32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f36:	4834      	ldr	r0, [pc, #208]	@ (8002008 <gost_opt_main+0x178>)
 8001f38:	f000 fcb0 	bl	800289c <HAL_GPIO_WritePin>

    // Measure performance
    start_time = HAL_GetTick();
 8001f3c:	f000 fa2a 	bl	8002394 <HAL_GetTick>
 8001f40:	f644 6520 	movw	r5, #20000	@ 0x4e20
 8001f44:	4606      	mov	r6, r0
    for (uint32_t i = 0; i < iterations; i++) {
        GOST_Encrypt_SR_Opt(test_data, 8, _GOST_Mode_Encrypt, subst_table, key);
 8001f46:	2201      	movs	r2, #1
 8001f48:	2108      	movs	r1, #8
 8001f4a:	ab3a      	add	r3, sp, #232	@ 0xe8
 8001f4c:	a80a      	add	r0, sp, #40	@ 0x28
 8001f4e:	9400      	str	r4, [sp, #0]
 8001f50:	f7ff fe54 	bl	8001bfc <GOST_Encrypt_SR_Opt>
    for (uint32_t i = 0; i < iterations; i++) {
 8001f54:	3d01      	subs	r5, #1
 8001f56:	d1f6      	bne.n	8001f46 <gost_opt_main+0xb6>
    }
    end_time = HAL_GetTick();
 8001f58:	f000 fa1c 	bl	8002394 <HAL_GetTick>
 8001f5c:	4607      	mov	r7, r0
    elapsed = end_time - start_time;
    
    // Signal end of benchmark
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001f5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f62:	462a      	mov	r2, r5
 8001f64:	4828      	ldr	r0, [pc, #160]	@ (8002008 <gost_opt_main+0x178>)
 8001f66:	f000 fc99 	bl	800289c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001f6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f6e:	f000 fa17 	bl	80023a0 <HAL_Delay>
    elapsed = end_time - start_time;
 8001f72:	1bbf      	subs	r7, r7, r6
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f7a:	4823      	ldr	r0, [pc, #140]	@ (8002008 <gost_opt_main+0x178>)
 8001f7c:	f000 fc8e 	bl	800289c <HAL_GPIO_WritePin>
    
    // Flash LED to indicate elapsed time (in seconds)
    uint32_t elapsed_seconds = elapsed / 1000;
    if (elapsed_seconds == 0) elapsed_seconds = 1;
 8001f80:	f5b7 7f7a 	cmp.w	r7, #1000	@ 0x3e8
 8001f84:	d219      	bcs.n	8001fba <gost_opt_main+0x12a>
    
    HAL_Delay(2000); // Pause before blinking
 8001f86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f8a:	f000 fa09 	bl	80023a0 <HAL_Delay>
    
    for (uint32_t i = 0; i < elapsed_seconds; i++) {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001f8e:	462a      	mov	r2, r5
 8001f90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f94:	481c      	ldr	r0, [pc, #112]	@ (8002008 <gost_opt_main+0x178>)
 8001f96:	f000 fc81 	bl	800289c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8001f9a:	20c8      	movs	r0, #200	@ 0xc8
 8001f9c:	f000 fa00 	bl	80023a0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa6:	4818      	ldr	r0, [pc, #96]	@ (8002008 <gost_opt_main+0x178>)
 8001fa8:	f000 fc78 	bl	800289c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8001fac:	20c8      	movs	r0, #200	@ 0xc8
 8001fae:	f000 f9f7 	bl	80023a0 <HAL_Delay>
    }

    return elapsed;
}
 8001fb2:	4638      	mov	r0, r7
 8001fb4:	f20d 4dec 	addw	sp, sp, #1260	@ 0x4ec
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_Delay(2000); // Pause before blinking
 8001fba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fbe:	f000 f9ef 	bl	80023a0 <HAL_Delay>
    uint32_t elapsed_seconds = elapsed / 1000;
 8001fc2:	4e12      	ldr	r6, [pc, #72]	@ (800200c <gost_opt_main+0x17c>)
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001fc4:	4c10      	ldr	r4, [pc, #64]	@ (8002008 <gost_opt_main+0x178>)
    uint32_t elapsed_seconds = elapsed / 1000;
 8001fc6:	fba6 3607 	umull	r3, r6, r6, r7
 8001fca:	09b6      	lsrs	r6, r6, #6
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f000 fc62 	bl	800289c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8001fd8:	20c8      	movs	r0, #200	@ 0xc8
 8001fda:	f000 f9e1 	bl	80023a0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f000 fc59 	bl	800289c <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < elapsed_seconds; i++) {
 8001fea:	3501      	adds	r5, #1
        HAL_Delay(200);
 8001fec:	20c8      	movs	r0, #200	@ 0xc8
 8001fee:	f000 f9d7 	bl	80023a0 <HAL_Delay>
    for (uint32_t i = 0; i < elapsed_seconds; i++) {
 8001ff2:	42ae      	cmp	r6, r5
 8001ff4:	d1ea      	bne.n	8001fcc <gost_opt_main+0x13c>
}
 8001ff6:	4638      	mov	r0, r7
 8001ff8:	f20d 4dec 	addw	sp, sp, #1260	@ 0x4ec
 8001ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffe:	bf00      	nop
 8002000:	080031a4 	.word	0x080031a4
 8002004:	08003124 	.word	0x08003124
 8002008:	40011000 	.word	0x40011000
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002010:	b530      	push	{r4, r5, lr}
 8002012:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002014:	2224      	movs	r2, #36	@ 0x24
 8002016:	2100      	movs	r1, #0
 8002018:	a807      	add	r0, sp, #28
 800201a:	f001 f83d 	bl	8003098 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201e:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002020:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002022:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002024:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002026:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002028:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800202c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002030:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002034:	9206      	str	r2, [sp, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002036:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002038:	f000 fc34 	bl	80028a4 <HAL_RCC_OscConfig>
 800203c:	b108      	cbz	r0, 8002042 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002040:	e7fe      	b.n	8002040 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002042:	4601      	mov	r1, r0
 8002044:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002046:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002048:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002050:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002052:	f000 fe15 	bl	8002c80 <HAL_RCC_ClockConfig>
 8002056:	b108      	cbz	r0, 800205c <SystemClock_Config+0x4c>
 8002058:	b672      	cpsid	i
  while (1)
 800205a:	e7fe      	b.n	800205a <SystemClock_Config+0x4a>
}
 800205c:	b011      	add	sp, #68	@ 0x44
 800205e:	bd30      	pop	{r4, r5, pc}

08002060 <main>:
{
 8002060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	2400      	movs	r4, #0
{
 8002066:	b088      	sub	sp, #32
  HAL_Init();
 8002068:	f000 f976 	bl	8002358 <HAL_Init>
  SystemClock_Config();
 800206c:	f7ff ffd0 	bl	8002010 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002074:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002078:	4b68      	ldr	r3, [pc, #416]	@ (800221c <main+0x1bc>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800207a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002080:	4867      	ldr	r0, [pc, #412]	@ (8002220 <main+0x1c0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	f042 0210 	orr.w	r2, r2, #16
 8002086:	619a      	str	r2, [r3, #24]
 8002088:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800208a:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208e:	f002 0210 	and.w	r2, r2, #16
 8002092:	9200      	str	r2, [sp, #0]
 8002094:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	f042 0204 	orr.w	r2, r2, #4
 800209e:	619a      	str	r2, [r3, #24]
 80020a0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020a2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020ac:	f000 fbf6 	bl	800289c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b2:	485b      	ldr	r0, [pc, #364]	@ (8002220 <main+0x1c0>)
 80020b4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020be:	f000 f9e7 	bl	8002490 <HAL_GPIO_Init>
  htim1.Init.Period = 65535;
 80020c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim1.Instance = TIM1;
 80020c6:	4d57      	ldr	r5, [pc, #348]	@ (8002224 <main+0x1c4>)
 80020c8:	4a57      	ldr	r2, [pc, #348]	@ (8002228 <main+0x1c8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ca:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020cc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80020d0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d4:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 80020d8:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Instance = TIM1;
 80020dc:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = 65535;
 80020de:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	9402      	str	r4, [sp, #8]
  htim1.Init.RepetitionCounter = 0;
 80020e2:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	9403      	str	r4, [sp, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020e6:	f000 fe8d 	bl	8002e04 <HAL_TIM_Base_Init>
 80020ea:	b108      	cbz	r0, 80020f0 <main+0x90>
 80020ec:	b672      	cpsid	i
  while (1)
 80020ee:	e7fe      	b.n	80020ee <main+0x8e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020f4:	4628      	mov	r0, r5
 80020f6:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f8:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020fa:	f000 fef1 	bl	8002ee0 <HAL_TIM_ConfigClockSource>
 80020fe:	b108      	cbz	r0, 8002104 <main+0xa4>
 8002100:	b672      	cpsid	i
  while (1)
 8002102:	e7fe      	b.n	8002102 <main+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	2200      	movs	r2, #0
 8002106:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002108:	4628      	mov	r0, r5
 800210a:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002110:	f000 ff90 	bl	8003034 <HAL_TIMEx_MasterConfigSynchronization>
 8002114:	4604      	mov	r4, r0
 8002116:	b108      	cbz	r0, 800211c <main+0xbc>
 8002118:	b672      	cpsid	i
  while (1)
 800211a:	e7fe      	b.n	800211a <main+0xba>
  uint32_t orig_time = gost_main();
 800211c:	f7ff fe28 	bl	8001d70 <gost_main>
 8002120:	4680      	mov	r8, r0
  uint32_t opt_time = gost_opt_main();
 8002122:	f7ff feb5 	bl	8001e90 <gost_opt_main>
 8002126:	4605      	mov	r5, r0
  HAL_Delay(3000); // Pause before final results
 8002128:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800212c:	f000 f938 	bl	80023a0 <HAL_Delay>
  if (opt_time > 0) {
 8002130:	2d00      	cmp	r5, #0
 8002132:	d05a      	beq.n	80021ea <main+0x18a>
    improvement = (float)orig_time / opt_time;
 8002134:	4640      	mov	r0, r8
 8002136:	f7fe f8bf 	bl	80002b8 <__aeabi_ui2f>
 800213a:	4603      	mov	r3, r0
 800213c:	4628      	mov	r0, r5
 800213e:	461d      	mov	r5, r3
 8002140:	f7fe f8ba 	bl	80002b8 <__aeabi_ui2f>
 8002144:	4601      	mov	r1, r0
 8002146:	4628      	mov	r0, r5
 8002148:	f7fe f9c2 	bl	80004d0 <__aeabi_fdiv>
  if (improvement >= 1.0f) {
 800214c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
    improvement = (float)orig_time / opt_time;
 8002150:	4605      	mov	r5, r0
  if (improvement >= 1.0f) {
 8002152:	f7fe fabb 	bl	80006cc <__aeabi_fcmpge>
 8002156:	2800      	cmp	r0, #0
 8002158:	d047      	beq.n	80021ea <main+0x18a>
    blinks = (int)improvement;
 800215a:	4628      	mov	r0, r5
 800215c:	f7fe faca 	bl	80006f4 <__aeabi_f2iz>
 8002160:	4605      	mov	r5, r0
    if (blinks > 10) blinks = 10; // Cap at 10 blinks
 8002162:	2d0a      	cmp	r5, #10
 8002164:	bfa8      	it	ge
 8002166:	250a      	movge	r5, #10
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8002168:	4631      	mov	r1, r6
 800216a:	2d01      	cmp	r5, #1
 800216c:	4622      	mov	r2, r4
 800216e:	482c      	ldr	r0, [pc, #176]	@ (8002220 <main+0x1c0>)
 8002170:	bfb8      	it	lt
 8002172:	2501      	movlt	r5, #1
 8002174:	f000 fb92 	bl	800289c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8002178:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800217c:	f000 f910 	bl	80023a0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8002180:	4631      	mov	r1, r6
 8002182:	463a      	mov	r2, r7
 8002184:	4826      	ldr	r0, [pc, #152]	@ (8002220 <main+0x1c0>)
 8002186:	f000 fb89 	bl	800289c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800218a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800218e:	f000 f907 	bl	80023a0 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8002192:	4e23      	ldr	r6, [pc, #140]	@ (8002220 <main+0x1c0>)
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800219a:	4630      	mov	r0, r6
 800219c:	f000 fb7e 	bl	800289c <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80021a0:	2064      	movs	r0, #100	@ 0x64
 80021a2:	f000 f8fd 	bl	80023a0 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021ac:	4630      	mov	r0, r6
 80021ae:	f000 fb75 	bl	800289c <HAL_GPIO_WritePin>
    for (int i = 0; i < blinks; i++) {
 80021b2:	3401      	adds	r4, #1
      HAL_Delay(100);
 80021b4:	2064      	movs	r0, #100	@ 0x64
 80021b6:	f000 f8f3 	bl	80023a0 <HAL_Delay>
    for (int i = 0; i < blinks; i++) {
 80021ba:	42a5      	cmp	r5, r4
 80021bc:	d1ea      	bne.n	8002194 <main+0x134>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80021be:	4c18      	ldr	r4, [pc, #96]	@ (8002220 <main+0x1c0>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c6:	4620      	mov	r0, r4
 80021c8:	f000 fb68 	bl	800289c <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 80021cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021d0:	f000 f8e6 	bl	80023a0 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80021d4:	4620      	mov	r0, r4
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021dc:	f000 fb5e 	bl	800289c <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 80021e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021e4:	f000 f8dc 	bl	80023a0 <HAL_Delay>
  while (1)
 80021e8:	e7ea      	b.n	80021c0 <main+0x160>
 80021ea:	2403      	movs	r4, #3
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 80021ec:	4d0c      	ldr	r5, [pc, #48]	@ (8002220 <main+0x1c0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021f4:	4628      	mov	r0, r5
 80021f6:	f000 fb51 	bl	800289c <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 80021fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021fe:	f000 f8cf 	bl	80023a0 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8002202:	2201      	movs	r2, #1
 8002204:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002208:	4628      	mov	r0, r5
 800220a:	f000 fb47 	bl	800289c <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 800220e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002212:	f000 f8c5 	bl	80023a0 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8002216:	3c01      	subs	r4, #1
 8002218:	d1e9      	bne.n	80021ee <main+0x18e>
 800221a:	e7d0      	b.n	80021be <main+0x15e>
 800221c:	40021000 	.word	0x40021000
 8002220:	40011000 	.word	0x40011000
 8002224:	20000030 	.word	0x20000030
 8002228:	40012c00 	.word	0x40012c00

0800222c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800222c:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_MspInit+0x3c>)
{
 800222e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002230:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002232:	490e      	ldr	r1, [pc, #56]	@ (800226c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	619a      	str	r2, [r3, #24]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	f002 0201 	and.w	r2, r2, #1
 8002240:	9200      	str	r2, [sp, #0]
 8002242:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800224a:	61da      	str	r2, [r3, #28]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002256:	684b      	ldr	r3, [r1, #4]
 8002258:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800225c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002260:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002262:	b002      	add	sp, #8
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	40010000 	.word	0x40010000

08002270 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_TIM_Base_MspInit+0x28>)
 8002272:	6802      	ldr	r2, [r0, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d000      	beq.n	800227a <HAL_TIM_Base_MspInit+0xa>
 8002278:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227a:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800227e:	699a      	ldr	r2, [r3, #24]
{
 8002280:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002286:	619a      	str	r2, [r3, #24]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002292:	b002      	add	sp, #8
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40012c00 	.word	0x40012c00

0800229c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800229c:	e7fe      	b.n	800229c <NMI_Handler>
 800229e:	bf00      	nop

080022a0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <HardFault_Handler>
 80022a2:	bf00      	nop

080022a4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <MemManage_Handler>
 80022a6:	bf00      	nop

080022a8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <BusFault_Handler>
 80022aa:	bf00      	nop

080022ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <UsageFault_Handler>
 80022ae:	bf00      	nop

080022b0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop

080022bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 b85e 	b.w	800237c <HAL_IncTick>

080022c0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop

080022c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c4:	f7ff fffc 	bl	80022c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c8:	480b      	ldr	r0, [pc, #44]	@ (80022f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022ca:	490c      	ldr	r1, [pc, #48]	@ (80022fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002300 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d0:	e002      	b.n	80022d8 <LoopCopyDataInit>

080022d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d6:	3304      	adds	r3, #4

080022d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022dc:	d3f9      	bcc.n	80022d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022de:	4a09      	ldr	r2, [pc, #36]	@ (8002304 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022e0:	4c09      	ldr	r4, [pc, #36]	@ (8002308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e4:	e001      	b.n	80022ea <LoopFillZerobss>

080022e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e8:	3204      	adds	r2, #4

080022ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ec:	d3fb      	bcc.n	80022e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ee:	f000 fedb 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022f2:	f7ff feb5 	bl	8002060 <main>
  bx lr
 80022f6:	4770      	bx	lr
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002300:	080031f4 	.word	0x080031f4
  ldr r2, =_sbss
 8002304:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002308:	2000007c 	.word	0x2000007c

0800230c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC1_2_IRQHandler>
	...

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002316:	4a0d      	ldr	r2, [pc, #52]	@ (800234c <HAL_InitTick+0x3c>)
{
 8002318:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800231a:	7811      	ldrb	r1, [r2, #0]
 800231c:	4a0c      	ldr	r2, [pc, #48]	@ (8002350 <HAL_InitTick+0x40>)
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	fbb2 f0f3 	udiv	r0, r2, r3
 8002328:	f000 f89a 	bl	8002460 <HAL_SYSTICK_Config>
 800232c:	b908      	cbnz	r0, 8002332 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	2d0f      	cmp	r5, #15
 8002330:	d901      	bls.n	8002336 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002332:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002334:	bd38      	pop	{r3, r4, r5, pc}
 8002336:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002338:	4602      	mov	r2, r0
 800233a:	4629      	mov	r1, r5
 800233c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002340:	f000 f852 	bl	80023e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002344:	4b03      	ldr	r3, [pc, #12]	@ (8002354 <HAL_InitTick+0x44>)
 8002346:	4620      	mov	r0, r4
 8002348:	601d      	str	r5, [r3, #0]
}
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	20000004 	.word	0x20000004
 8002350:	20000000 	.word	0x20000000
 8002354:	20000008 	.word	0x20000008

08002358 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_Init+0x20>)
{
 800235a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	f043 0310 	orr.w	r3, r3, #16
 8002364:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002366:	f000 f82d 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800236a:	200f      	movs	r0, #15
 800236c:	f7ff ffd0 	bl	8002310 <HAL_InitTick>
  HAL_MspInit();
 8002370:	f7ff ff5c 	bl	800222c <HAL_MspInit>
}
 8002374:	2000      	movs	r0, #0
 8002376:	bd08      	pop	{r3, pc}
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800237c:	4a03      	ldr	r2, [pc, #12]	@ (800238c <HAL_IncTick+0x10>)
 800237e:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <HAL_IncTick+0x14>)
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	440b      	add	r3, r1
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000078 	.word	0x20000078
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002394:	4b01      	ldr	r3, [pc, #4]	@ (800239c <HAL_GetTick+0x8>)
 8002396:	6818      	ldr	r0, [r3, #0]
}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000078 	.word	0x20000078

080023a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff fff6 	bl	8002394 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80023aa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80023ac:	d002      	beq.n	80023b4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <HAL_Delay+0x20>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	1b40      	subs	r0, r0, r5
 80023ba:	42a0      	cmp	r0, r4
 80023bc:	d3fa      	bcc.n	80023b4 <HAL_Delay+0x14>
  {
  }
}
 80023be:	bd38      	pop	{r3, r4, r5, pc}
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c4:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4906      	ldr	r1, [pc, #24]	@ (80023e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023ca:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023ce:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80023e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ea:	b500      	push	{lr}
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f2:	f1c3 0e07 	rsb	lr, r3, #7
 80023f6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fe:	bf28      	it	cs
 8002400:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002404:	f1bc 0f06 	cmp.w	ip, #6
 8002408:	d91c      	bls.n	8002444 <HAL_NVIC_SetPriority+0x5c>
 800240a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002412:	fa03 f30c 	lsl.w	r3, r3, ip
 8002416:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800241e:	fa03 f30e 	lsl.w	r3, r3, lr
 8002422:	ea21 0303 	bic.w	r3, r1, r3
 8002426:	fa03 f30c 	lsl.w	r3, r3, ip
 800242a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800242e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002432:	db0a      	blt.n	800244a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002438:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800243c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002440:	f85d fb04 	ldr.w	pc, [sp], #4
 8002444:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	4694      	mov	ip, r2
 8002448:	e7e7      	b.n	800241a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	4a04      	ldr	r2, [pc, #16]	@ (800245c <HAL_NVIC_SetPriority+0x74>)
 800244c:	f000 000f 	and.w	r0, r0, #15
 8002450:	4402      	add	r2, r0
 8002452:	7613      	strb	r3, [r2, #24]
 8002454:	f85d fb04 	ldr.w	pc, [sp], #4
 8002458:	e000ed00 	.word	0xe000ed00
 800245c:	e000ecfc 	.word	0xe000ecfc

08002460 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	3801      	subs	r0, #1
 8002462:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002466:	d301      	bcc.n	800246c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002468:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800246a:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	2107      	movs	r1, #7
{
 8002478:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	4c04      	ldr	r4, [pc, #16]	@ (800248c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002482:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002488:	6119      	str	r1, [r3, #16]
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	680c      	ldr	r4, [r1, #0]
{
 8002496:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002498:	2c00      	cmp	r4, #0
 800249a:	f000 80ad 	beq.w	80025f8 <HAL_GPIO_Init+0x168>
 800249e:	4bb3      	ldr	r3, [pc, #716]	@ (800276c <HAL_GPIO_Init+0x2dc>)
 80024a0:	4298      	cmp	r0, r3
 80024a2:	f000 80d7 	beq.w	8002654 <HAL_GPIO_Init+0x1c4>
 80024a6:	2200      	movs	r2, #0
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024a8:	1d03      	adds	r3, r0, #4
 80024aa:	9301      	str	r3, [sp, #4]
    ioposition = (0x01uL << position);
 80024ac:	2501      	movs	r5, #1
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024ae:	270f      	movs	r7, #15
  uint32_t config = 0x00u;
 80024b0:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80024b2:	4613      	mov	r3, r2
 80024b4:	4683      	mov	fp, r0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024b6:	f8df 82b8 	ldr.w	r8, [pc, #696]	@ 8002770 <HAL_GPIO_Init+0x2e0>
 80024ba:	e006      	b.n	80024ca <HAL_GPIO_Init+0x3a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80024bc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	fa34 f003 	lsrs.w	r0, r4, r3
 80024c2:	f102 0204 	add.w	r2, r2, #4
 80024c6:	f000 8097 	beq.w	80025f8 <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 80024ca:	fa05 f003 	lsl.w	r0, r5, r3
    if (iocurrent == ioposition)
 80024ce:	ea30 0c04 	bics.w	ip, r0, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d2:	ea00 0604 	and.w	r6, r0, r4
    if (iocurrent == ioposition)
 80024d6:	d1f1      	bne.n	80024bc <HAL_GPIO_Init+0x2c>
      switch (GPIO_Init->Mode)
 80024d8:	684c      	ldr	r4, [r1, #4]
 80024da:	2c12      	cmp	r4, #18
 80024dc:	f200 80a0 	bhi.w	8002620 <HAL_GPIO_Init+0x190>
 80024e0:	2c12      	cmp	r4, #18
 80024e2:	d816      	bhi.n	8002512 <HAL_GPIO_Init+0x82>
 80024e4:	e8df f014 	tbh	[pc, r4, lsl #1]
 80024e8:	001300af 	.word	0x001300af
 80024ec:	01950098 	.word	0x01950098
 80024f0:	00150015 	.word	0x00150015
 80024f4:	00150015 	.word	0x00150015
 80024f8:	00150015 	.word	0x00150015
 80024fc:	00150015 	.word	0x00150015
 8002500:	00150015 	.word	0x00150015
 8002504:	00150015 	.word	0x00150015
 8002508:	00940015 	.word	0x00940015
 800250c:	0090      	.short	0x0090
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800250e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002512:	2eff      	cmp	r6, #255	@ 0xff
 8002514:	bf99      	ittee	ls
 8002516:	465c      	movls	r4, fp
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002518:	4694      	movls	ip, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800251a:	9c01      	ldrhi	r4, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800251c:	f1a2 0c20 	subhi.w	ip, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002520:	6820      	ldr	r0, [r4, #0]
 8002522:	fa07 fe0c 	lsl.w	lr, r7, ip
 8002526:	ea20 000e 	bic.w	r0, r0, lr
 800252a:	fa0a fc0c 	lsl.w	ip, sl, ip
 800252e:	ea40 000c 	orr.w	r0, r0, ip
 8002532:	6020      	str	r0, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002534:	684c      	ldr	r4, [r1, #4]
 8002536:	00e0      	lsls	r0, r4, #3
 8002538:	d564      	bpl.n	8002604 <HAL_GPIO_Init+0x174>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800253a:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800253e:	f023 0c03 	bic.w	ip, r3, #3
 8002542:	f040 0001 	orr.w	r0, r0, #1
 8002546:	f8c8 0018 	str.w	r0, [r8, #24]
 800254a:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800254e:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8002552:	f000 0001 	and.w	r0, r0, #1
 8002556:	9003      	str	r0, [sp, #12]
 8002558:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800255c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002560:	9803      	ldr	r0, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002562:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002566:	f8dc 0008 	ldr.w	r0, [ip, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800256a:	fa07 fe09 	lsl.w	lr, r7, r9
 800256e:	ea20 0e0e 	bic.w	lr, r0, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002572:	4880      	ldr	r0, [pc, #512]	@ (8002774 <HAL_GPIO_Init+0x2e4>)
 8002574:	4583      	cmp	fp, r0
 8002576:	f000 812c 	beq.w	80027d2 <HAL_GPIO_Init+0x342>
 800257a:	487f      	ldr	r0, [pc, #508]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 800257c:	4583      	cmp	fp, r0
 800257e:	f000 8139 	beq.w	80027f4 <HAL_GPIO_Init+0x364>
 8002582:	487e      	ldr	r0, [pc, #504]	@ (800277c <HAL_GPIO_Init+0x2ec>)
 8002584:	4583      	cmp	fp, r0
 8002586:	bf0c      	ite	eq
 8002588:	2003      	moveq	r0, #3
 800258a:	2004      	movne	r0, #4
 800258c:	fa00 f009 	lsl.w	r0, r0, r9
 8002590:	ea40 000e 	orr.w	r0, r0, lr
        AFIO->EXTICR[position >> 2u] = temp;
 8002594:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002598:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8002780 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800259c:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a0:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80025a4:	bf14      	ite	ne
 80025a6:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025a8:	43b0      	biceq	r0, r6
 80025aa:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ae:	f8df c1d0 	ldr.w	ip, [pc, #464]	@ 8002780 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b2:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b6:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80025ba:	bf14      	ite	ne
 80025bc:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025be:	43b0      	biceq	r0, r6
 80025c0:	f8cc 000c 	str.w	r0, [ip, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80025c4:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8002780 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c8:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80025cc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80025d0:	bf14      	ite	ne
 80025d2:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025d4:	43b0      	biceq	r0, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d6:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80025da:	4c69      	ldr	r4, [pc, #420]	@ (8002780 <HAL_GPIO_Init+0x2f0>)
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025dc:	f8cc 0004 	str.w	r0, [ip, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80025e0:	6820      	ldr	r0, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e2:	d00c      	beq.n	80025fe <HAL_GPIO_Init+0x16e>
          SET_BIT(EXTI->IMR, iocurrent);
 80025e4:	4330      	orrs	r0, r6
 80025e6:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e8:	680c      	ldr	r4, [r1, #0]
	position++;
 80025ea:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	fa34 f003 	lsrs.w	r0, r4, r3
 80025f0:	f102 0204 	add.w	r2, r2, #4
 80025f4:	f47f af69 	bne.w	80024ca <HAL_GPIO_Init+0x3a>
  }
}
 80025f8:	b005      	add	sp, #20
 80025fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025fe:	ea20 0006 	bic.w	r0, r0, r6
 8002602:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002604:	680c      	ldr	r4, [r1, #0]
 8002606:	e759      	b.n	80024bc <HAL_GPIO_Init+0x2c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002608:	68c8      	ldr	r0, [r1, #12]
 800260a:	f100 0a0c 	add.w	sl, r0, #12
          break;
 800260e:	e780      	b.n	8002512 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002610:	68c8      	ldr	r0, [r1, #12]
 8002612:	f100 0a04 	add.w	sl, r0, #4
          break;
 8002616:	e77c      	b.n	8002512 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002618:	68c8      	ldr	r0, [r1, #12]
 800261a:	f100 0a08 	add.w	sl, r0, #8
          break;
 800261e:	e778      	b.n	8002512 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8002620:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8002784 <HAL_GPIO_Init+0x2f4>
 8002624:	4564      	cmp	r4, ip
 8002626:	d00e      	beq.n	8002646 <HAL_GPIO_Init+0x1b6>
 8002628:	f200 80d9 	bhi.w	80027de <HAL_GPIO_Init+0x34e>
 800262c:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8002630:	4564      	cmp	r4, ip
 8002632:	d008      	beq.n	8002646 <HAL_GPIO_Init+0x1b6>
 8002634:	f50c 2c70 	add.w	ip, ip, #983040	@ 0xf0000
 8002638:	4564      	cmp	r4, ip
 800263a:	d004      	beq.n	8002646 <HAL_GPIO_Init+0x1b6>
 800263c:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8002640:	4564      	cmp	r4, ip
 8002642:	f47f af66 	bne.w	8002512 <HAL_GPIO_Init+0x82>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002646:	688c      	ldr	r4, [r1, #8]
 8002648:	2c00      	cmp	r4, #0
 800264a:	f040 80d9 	bne.w	8002800 <HAL_GPIO_Init+0x370>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800264e:	f04f 0a04 	mov.w	sl, #4
 8002652:	e75e      	b.n	8002512 <HAL_GPIO_Init+0x82>
  uint32_t config = 0x00u;
 8002654:	f04f 0900 	mov.w	r9, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002658:	f06f 051f 	mvn.w	r5, #31
    ioposition = (0x01uL << position);
 800265c:	2701      	movs	r7, #1
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800265e:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8002662:	464b      	mov	r3, r9
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002664:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8002770 <HAL_GPIO_Init+0x2e0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002668:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8002788 <HAL_GPIO_Init+0x2f8>
 800266c:	e005      	b.n	800267a <HAL_GPIO_Init+0x1ea>
	position++;
 800266e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002670:	fa34 f203 	lsrs.w	r2, r4, r3
 8002674:	f105 0504 	add.w	r5, r5, #4
 8002678:	d0be      	beq.n	80025f8 <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 800267a:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent == ioposition)
 800267e:	ea32 0a04 	bics.w	sl, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002682:	ea04 0602 	and.w	r6, r4, r2
    if (iocurrent == ioposition)
 8002686:	d1f2      	bne.n	800266e <HAL_GPIO_Init+0x1de>
      switch (GPIO_Init->Mode)
 8002688:	684c      	ldr	r4, [r1, #4]
 800268a:	2c12      	cmp	r4, #18
 800268c:	f200 80c4 	bhi.w	8002818 <HAL_GPIO_Init+0x388>
 8002690:	2c12      	cmp	r4, #18
 8002692:	d816      	bhi.n	80026c2 <HAL_GPIO_Init+0x232>
 8002694:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002698:	001300d2 	.word	0x001300d2
 800269c:	00f400df 	.word	0x00f400df
 80026a0:	00150015 	.word	0x00150015
 80026a4:	00150015 	.word	0x00150015
 80026a8:	00150015 	.word	0x00150015
 80026ac:	00150015 	.word	0x00150015
 80026b0:	00150015 	.word	0x00150015
 80026b4:	00150015 	.word	0x00150015
 80026b8:	00e30015 	.word	0x00e30015
 80026bc:	00db      	.short	0x00db
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026be:	f8d1 900c 	ldr.w	r9, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c2:	2eff      	cmp	r6, #255	@ 0xff
 80026c4:	d962      	bls.n	800278c <HAL_GPIO_Init+0x2fc>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026c6:	46aa      	mov	sl, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c8:	4644      	mov	r4, r8
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026ca:	6822      	ldr	r2, [r4, #0]
 80026cc:	fa0e fb0a 	lsl.w	fp, lr, sl
 80026d0:	ea22 020b 	bic.w	r2, r2, fp
 80026d4:	fa09 fa0a 	lsl.w	sl, r9, sl
 80026d8:	ea42 020a 	orr.w	r2, r2, sl
 80026dc:	6022      	str	r2, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026de:	684a      	ldr	r2, [r1, #4]
 80026e0:	00d4      	lsls	r4, r2, #3
 80026e2:	d557      	bpl.n	8002794 <HAL_GPIO_Init+0x304>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026e4:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026e8:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026ec:	f044 0401 	orr.w	r4, r4, #1
 80026f0:	f8cc 4018 	str.w	r4, [ip, #24]
 80026f4:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026f8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026fc:	f004 0401 	and.w	r4, r4, #1
 8002700:	9403      	str	r4, [sp, #12]
 8002702:	9c03      	ldr	r4, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 8002704:	f023 0403 	bic.w	r4, r3, #3
 8002708:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800270c:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8002710:	f8d4 b008 	ldr.w	fp, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002714:	fa0e fa0a 	lsl.w	sl, lr, sl
 8002718:	ea2b 0a0a 	bic.w	sl, fp, sl
        AFIO->EXTICR[position >> 2u] = temp;
 800271c:	f8c4 a008 	str.w	sl, [r4, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002720:	02d4      	lsls	r4, r2, #11
 8002722:	d539      	bpl.n	8002798 <HAL_GPIO_Init+0x308>
          SET_BIT(EXTI->RTSR, iocurrent);
 8002724:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8002780 <HAL_GPIO_Init+0x2f0>
 8002728:	f8da 4008 	ldr.w	r4, [sl, #8]
 800272c:	4334      	orrs	r4, r6
 800272e:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002732:	0294      	lsls	r4, r2, #10
 8002734:	d53a      	bpl.n	80027ac <HAL_GPIO_Init+0x31c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8002736:	f8df a048 	ldr.w	sl, [pc, #72]	@ 8002780 <HAL_GPIO_Init+0x2f0>
 800273a:	f8da 400c 	ldr.w	r4, [sl, #12]
 800273e:	4334      	orrs	r4, r6
 8002740:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002744:	0394      	lsls	r4, r2, #14
 8002746:	d53b      	bpl.n	80027c0 <HAL_GPIO_Init+0x330>
          SET_BIT(EXTI->EMR, iocurrent);
 8002748:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8002780 <HAL_GPIO_Init+0x2f0>
 800274c:	f8da 4004 	ldr.w	r4, [sl, #4]
 8002750:	4334      	orrs	r4, r6
 8002752:	f8ca 4004 	str.w	r4, [sl, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002756:	4c0a      	ldr	r4, [pc, #40]	@ (8002780 <HAL_GPIO_Init+0x2f0>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002758:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800275c:	6822      	ldr	r2, [r4, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800275e:	bf0c      	ite	eq
 8002760:	43b2      	biceq	r2, r6
          SET_BIT(EXTI->IMR, iocurrent);
 8002762:	4332      	orrne	r2, r6
 8002764:	6022      	str	r2, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	680c      	ldr	r4, [r1, #0]
 8002768:	e781      	b.n	800266e <HAL_GPIO_Init+0x1de>
 800276a:	bf00      	nop
 800276c:	40010800 	.word	0x40010800
 8002770:	40021000 	.word	0x40021000
 8002774:	40010c00 	.word	0x40010c00
 8002778:	40011000 	.word	0x40011000
 800277c:	40011400 	.word	0x40011400
 8002780:	40010400 	.word	0x40010400
 8002784:	10220000 	.word	0x10220000
 8002788:	40010804 	.word	0x40010804
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800278c:	4604      	mov	r4, r0
 800278e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8002792:	e79a      	b.n	80026ca <HAL_GPIO_Init+0x23a>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002794:	680c      	ldr	r4, [r1, #0]
 8002796:	e76a      	b.n	800266e <HAL_GPIO_Init+0x1de>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002798:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 800288c <HAL_GPIO_Init+0x3fc>
 800279c:	f8da 4008 	ldr.w	r4, [sl, #8]
 80027a0:	ea24 0406 	bic.w	r4, r4, r6
 80027a4:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a8:	0294      	lsls	r4, r2, #10
 80027aa:	d4c4      	bmi.n	8002736 <HAL_GPIO_Init+0x2a6>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ac:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 800288c <HAL_GPIO_Init+0x3fc>
 80027b0:	f8da 400c 	ldr.w	r4, [sl, #12]
 80027b4:	ea24 0406 	bic.w	r4, r4, r6
 80027b8:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027bc:	0394      	lsls	r4, r2, #14
 80027be:	d4c3      	bmi.n	8002748 <HAL_GPIO_Init+0x2b8>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800288c <HAL_GPIO_Init+0x3fc>
 80027c4:	f8da 4004 	ldr.w	r4, [sl, #4]
 80027c8:	ea24 0406 	bic.w	r4, r4, r6
 80027cc:	f8ca 4004 	str.w	r4, [sl, #4]
 80027d0:	e7c1      	b.n	8002756 <HAL_GPIO_Init+0x2c6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d2:	2001      	movs	r0, #1
 80027d4:	fa00 f009 	lsl.w	r0, r0, r9
 80027d8:	ea40 000e 	orr.w	r0, r0, lr
 80027dc:	e6da      	b.n	8002594 <HAL_GPIO_Init+0x104>
      switch (GPIO_Init->Mode)
 80027de:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8002890 <HAL_GPIO_Init+0x400>
 80027e2:	4564      	cmp	r4, ip
 80027e4:	f43f af2f 	beq.w	8002646 <HAL_GPIO_Init+0x1b6>
 80027e8:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
 80027ec:	4564      	cmp	r4, ip
 80027ee:	f47f ae90 	bne.w	8002512 <HAL_GPIO_Init+0x82>
 80027f2:	e728      	b.n	8002646 <HAL_GPIO_Init+0x1b6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027f4:	2002      	movs	r0, #2
 80027f6:	fa00 f009 	lsl.w	r0, r0, r9
 80027fa:	ea40 000e 	orr.w	r0, r0, lr
 80027fe:	e6c9      	b.n	8002594 <HAL_GPIO_Init+0x104>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002800:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002802:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8002806:	bf0c      	ite	eq
 8002808:	f8cb 0010 	streq.w	r0, [fp, #16]
            GPIOx->BRR = ioposition;
 800280c:	f8cb 0014 	strne.w	r0, [fp, #20]
 8002810:	e67f      	b.n	8002512 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8002812:	f04f 0a00 	mov.w	sl, #0
 8002816:	e67c      	b.n	8002512 <HAL_GPIO_Init+0x82>
 8002818:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8002894 <HAL_GPIO_Init+0x404>
 800281c:	4554      	cmp	r4, sl
 800281e:	d00d      	beq.n	800283c <HAL_GPIO_Init+0x3ac>
 8002820:	d821      	bhi.n	8002866 <HAL_GPIO_Init+0x3d6>
 8002822:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8002826:	4554      	cmp	r4, sl
 8002828:	d008      	beq.n	800283c <HAL_GPIO_Init+0x3ac>
 800282a:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 800282e:	4554      	cmp	r4, sl
 8002830:	d004      	beq.n	800283c <HAL_GPIO_Init+0x3ac>
 8002832:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8002836:	4554      	cmp	r4, sl
 8002838:	f47f af43 	bne.w	80026c2 <HAL_GPIO_Init+0x232>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800283c:	688c      	ldr	r4, [r1, #8]
 800283e:	b1e4      	cbz	r4, 800287a <HAL_GPIO_Init+0x3ea>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002840:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002842:	4c15      	ldr	r4, [pc, #84]	@ (8002898 <HAL_GPIO_Init+0x408>)
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002844:	d01f      	beq.n	8002886 <HAL_GPIO_Init+0x3f6>
            GPIOx->BRR = ioposition;
 8002846:	6162      	str	r2, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002848:	f04f 0908 	mov.w	r9, #8
 800284c:	e739      	b.n	80026c2 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800284e:	68ca      	ldr	r2, [r1, #12]
 8002850:	f102 090c 	add.w	r9, r2, #12
          break;
 8002854:	e735      	b.n	80026c2 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002856:	68ca      	ldr	r2, [r1, #12]
 8002858:	f102 0908 	add.w	r9, r2, #8
          break;
 800285c:	e731      	b.n	80026c2 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800285e:	68ca      	ldr	r2, [r1, #12]
 8002860:	f102 0904 	add.w	r9, r2, #4
          break;
 8002864:	e72d      	b.n	80026c2 <HAL_GPIO_Init+0x232>
      switch (GPIO_Init->Mode)
 8002866:	f8df a028 	ldr.w	sl, [pc, #40]	@ 8002890 <HAL_GPIO_Init+0x400>
 800286a:	4554      	cmp	r4, sl
 800286c:	d0e6      	beq.n	800283c <HAL_GPIO_Init+0x3ac>
 800286e:	f50a 3a80 	add.w	sl, sl, #65536	@ 0x10000
 8002872:	4554      	cmp	r4, sl
 8002874:	f47f af25 	bne.w	80026c2 <HAL_GPIO_Init+0x232>
 8002878:	e7e0      	b.n	800283c <HAL_GPIO_Init+0x3ac>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800287a:	f04f 0904 	mov.w	r9, #4
 800287e:	e720      	b.n	80026c2 <HAL_GPIO_Init+0x232>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002880:	f04f 0900 	mov.w	r9, #0
 8002884:	e71d      	b.n	80026c2 <HAL_GPIO_Init+0x232>
            GPIOx->BSRR = ioposition;
 8002886:	6122      	str	r2, [r4, #16]
 8002888:	e7de      	b.n	8002848 <HAL_GPIO_Init+0x3b8>
 800288a:	bf00      	nop
 800288c:	40010400 	.word	0x40010400
 8002890:	10310000 	.word	0x10310000
 8002894:	10220000 	.word	0x10220000
 8002898:	40010800 	.word	0x40010800

0800289c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800289c:	b902      	cbnz	r2, 80028a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800289e:	0409      	lsls	r1, r1, #16
 80028a0:	6101      	str	r1, [r0, #16]
  }
}
 80028a2:	4770      	bx	lr

080028a4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a4:	2800      	cmp	r0, #0
 80028a6:	f000 81e4 	beq.w	8002c72 <HAL_RCC_OscConfig+0x3ce>
{
 80028aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	6803      	ldr	r3, [r0, #0]
 80028b0:	4604      	mov	r4, r0
 80028b2:	07dd      	lsls	r5, r3, #31
{
 80028b4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	d535      	bpl.n	8002924 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b8:	4999      	ldr	r1, [pc, #612]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 80028ba:	684a      	ldr	r2, [r1, #4]
 80028bc:	f002 020c 	and.w	r2, r2, #12
 80028c0:	2a04      	cmp	r2, #4
 80028c2:	f000 80ed 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c6:	684a      	ldr	r2, [r1, #4]
 80028c8:	f002 020c 	and.w	r2, r2, #12
 80028cc:	2a08      	cmp	r2, #8
 80028ce:	f000 80e3 	beq.w	8002a98 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d2:	6863      	ldr	r3, [r4, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d8:	d010      	beq.n	80028fc <HAL_RCC_OscConfig+0x58>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 810a 	beq.w	8002af4 <HAL_RCC_OscConfig+0x250>
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	f000 8180 	beq.w	8002be8 <HAL_RCC_OscConfig+0x344>
 80028e8:	4b8d      	ldr	r3, [pc, #564]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028f8:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fa:	e004      	b.n	8002906 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fc:	4a88      	ldr	r2, [pc, #544]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002904:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7ff fd45 	bl	8002394 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4e85      	ldr	r6, [pc, #532]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 800290c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	e005      	b.n	800291c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7ff fd40 	bl	8002394 <HAL_GetTick>
 8002914:	1b40      	subs	r0, r0, r5
 8002916:	2864      	cmp	r0, #100	@ 0x64
 8002918:	f200 80e8 	bhi.w	8002aec <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291c:	6833      	ldr	r3, [r6, #0]
 800291e:	039a      	lsls	r2, r3, #14
 8002920:	d5f6      	bpl.n	8002910 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	079f      	lsls	r7, r3, #30
 8002926:	d528      	bpl.n	800297a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002928:	4a7d      	ldr	r2, [pc, #500]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 800292a:	6851      	ldr	r1, [r2, #4]
 800292c:	f011 0f0c 	tst.w	r1, #12
 8002930:	f000 8096 	beq.w	8002a60 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002934:	6851      	ldr	r1, [r2, #4]
 8002936:	f001 010c 	and.w	r1, r1, #12
 800293a:	2908      	cmp	r1, #8
 800293c:	f000 808c 	beq.w	8002a58 <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002940:	6923      	ldr	r3, [r4, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8116 	beq.w	8002b74 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002948:	2201      	movs	r2, #1
 800294a:	4b76      	ldr	r3, [pc, #472]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4e74      	ldr	r6, [pc, #464]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 800294e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002950:	f7ff fd20 	bl	8002394 <HAL_GetTick>
 8002954:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	e005      	b.n	8002964 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002958:	f7ff fd1c 	bl	8002394 <HAL_GetTick>
 800295c:	1b40      	subs	r0, r0, r5
 800295e:	2802      	cmp	r0, #2
 8002960:	f200 80c4 	bhi.w	8002aec <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	6833      	ldr	r3, [r6, #0]
 8002966:	0798      	lsls	r0, r3, #30
 8002968:	d5f6      	bpl.n	8002958 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296a:	6833      	ldr	r3, [r6, #0]
 800296c:	6962      	ldr	r2, [r4, #20]
 800296e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002972:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002976:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	071a      	lsls	r2, r3, #28
 800297c:	d429      	bmi.n	80029d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297e:	075d      	lsls	r5, r3, #29
 8002980:	d54b      	bpl.n	8002a1a <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002982:	4b67      	ldr	r3, [pc, #412]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	00d0      	lsls	r0, r2, #3
 8002988:	f100 8084 	bmi.w	8002a94 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800298c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002994:	61da      	str	r2, [r3, #28]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	4e61      	ldr	r6, [pc, #388]	@ (8002b28 <HAL_RCC_OscConfig+0x284>)
 80029a2:	6833      	ldr	r3, [r6, #0]
 80029a4:	05d9      	lsls	r1, r3, #23
 80029a6:	f140 8091 	bpl.w	8002acc <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029aa:	68e3      	ldr	r3, [r4, #12]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	f000 80f2 	beq.w	8002b96 <HAL_RCC_OscConfig+0x2f2>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80be 	beq.w	8002b34 <HAL_RCC_OscConfig+0x290>
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	4b59      	ldr	r3, [pc, #356]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	f000 8120 	beq.w	8002c02 <HAL_RCC_OscConfig+0x35e>
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	621a      	str	r2, [r3, #32]
 80029c8:	6a1a      	ldr	r2, [r3, #32]
 80029ca:	f022 0204 	bic.w	r2, r2, #4
 80029ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d0:	e0e6      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d2:	69a3      	ldr	r3, [r4, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d04c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 80029d8:	2201      	movs	r2, #1
 80029da:	4b52      	ldr	r3, [pc, #328]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029dc:	4e50      	ldr	r6, [pc, #320]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 80029de:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80029e2:	f7ff fcd7 	bl	8002394 <HAL_GetTick>
 80029e6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e8:	e004      	b.n	80029f4 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ea:	f7ff fcd3 	bl	8002394 <HAL_GetTick>
 80029ee:	1b40      	subs	r0, r0, r5
 80029f0:	2802      	cmp	r0, #2
 80029f2:	d87b      	bhi.n	8002aec <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f4:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80029f6:	079b      	lsls	r3, r3, #30
 80029f8:	d5f7      	bpl.n	80029ea <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029fa:	4b4c      	ldr	r3, [pc, #304]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 80029fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002b30 <HAL_RCC_OscConfig+0x28c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	0a5b      	lsrs	r3, r3, #9
 8002a06:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002a08:	bf00      	nop
  }
  while (Delay --);
 8002a0a:	9b01      	ldr	r3, [sp, #4]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	9201      	str	r2, [sp, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f9      	bne.n	8002a08 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	075d      	lsls	r5, r3, #29
 8002a18:	d4b3      	bmi.n	8002982 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1a:	69e3      	ldr	r3, [r4, #28]
 8002a1c:	b1c3      	cbz	r3, 8002a50 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1e:	4d40      	ldr	r5, [pc, #256]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 8002a20:	686a      	ldr	r2, [r5, #4]
 8002a22:	f002 020c 	and.w	r2, r2, #12
 8002a26:	2a08      	cmp	r2, #8
 8002a28:	f000 80cd 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2e:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002a30:	4b3c      	ldr	r3, [pc, #240]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a32:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a34:	f000 80ed 	beq.w	8002c12 <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8002a38:	f7ff fcac 	bl	8002394 <HAL_GetTick>
 8002a3c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e004      	b.n	8002a4a <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff fca8 	bl	8002394 <HAL_GetTick>
 8002a44:	1b00      	subs	r0, r0, r4
 8002a46:	2802      	cmp	r0, #2
 8002a48:	d850      	bhi.n	8002aec <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	682b      	ldr	r3, [r5, #0]
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	d4f7      	bmi.n	8002a40 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 8002a50:	2000      	movs	r0, #0
}
 8002a52:	b002      	add	sp, #8
 8002a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a58:	6852      	ldr	r2, [r2, #4]
 8002a5a:	03d6      	lsls	r6, r2, #15
 8002a5c:	f53f af70 	bmi.w	8002940 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a60:	4a2f      	ldr	r2, [pc, #188]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	0795      	lsls	r5, r2, #30
 8002a66:	d525      	bpl.n	8002ab4 <HAL_RCC_OscConfig+0x210>
 8002a68:	6922      	ldr	r2, [r4, #16]
 8002a6a:	2a01      	cmp	r2, #1
 8002a6c:	d022      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 8002a6e:	2001      	movs	r0, #1
 8002a70:	e7ef      	b.n	8002a52 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 8002a72:	4a2c      	ldr	r2, [pc, #176]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4e2a      	ldr	r6, [pc, #168]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8002a76:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002a7a:	f7ff fc8b 	bl	8002394 <HAL_GetTick>
 8002a7e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	e004      	b.n	8002a8c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a82:	f7ff fc87 	bl	8002394 <HAL_GetTick>
 8002a86:	1b40      	subs	r0, r0, r5
 8002a88:	2802      	cmp	r0, #2
 8002a8a:	d82f      	bhi.n	8002aec <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002a8e:	079f      	lsls	r7, r3, #30
 8002a90:	d4f7      	bmi.n	8002a82 <HAL_RCC_OscConfig+0x1de>
 8002a92:	e7bf      	b.n	8002a14 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8002a94:	2500      	movs	r5, #0
 8002a96:	e783      	b.n	80029a0 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a98:	684a      	ldr	r2, [r1, #4]
 8002a9a:	03d0      	lsls	r0, r2, #15
 8002a9c:	f57f af19 	bpl.w	80028d2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	0391      	lsls	r1, r2, #14
 8002aa6:	f57f af3d 	bpl.w	8002924 <HAL_RCC_OscConfig+0x80>
 8002aaa:	6862      	ldr	r2, [r4, #4]
 8002aac:	2a00      	cmp	r2, #0
 8002aae:	f47f af39 	bne.w	8002924 <HAL_RCC_OscConfig+0x80>
 8002ab2:	e7dc      	b.n	8002a6e <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab4:	491a      	ldr	r1, [pc, #104]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 8002ab6:	6960      	ldr	r0, [r4, #20]
 8002ab8:	680a      	ldr	r2, [r1, #0]
 8002aba:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002abe:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002ac2:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac4:	071a      	lsls	r2, r3, #28
 8002ac6:	f57f af5a 	bpl.w	800297e <HAL_RCC_OscConfig+0xda>
 8002aca:	e782      	b.n	80029d2 <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002acc:	6833      	ldr	r3, [r6, #0]
 8002ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002ad4:	f7ff fc5e 	bl	8002394 <HAL_GetTick>
 8002ad8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	6833      	ldr	r3, [r6, #0]
 8002adc:	05da      	lsls	r2, r3, #23
 8002ade:	f53f af64 	bmi.w	80029aa <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae2:	f7ff fc57 	bl	8002394 <HAL_GetTick>
 8002ae6:	1bc0      	subs	r0, r0, r7
 8002ae8:	2864      	cmp	r0, #100	@ 0x64
 8002aea:	d9f6      	bls.n	8002ada <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
}
 8002aee:	b002      	add	sp, #8
 8002af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af4:	4d0a      	ldr	r5, [pc, #40]	@ (8002b20 <HAL_RCC_OscConfig+0x27c>)
 8002af6:	682b      	ldr	r3, [r5, #0]
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002afc:	602b      	str	r3, [r5, #0]
 8002afe:	682b      	ldr	r3, [r5, #0]
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b06:	f7ff fc45 	bl	8002394 <HAL_GetTick>
 8002b0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0c:	e004      	b.n	8002b18 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0e:	f7ff fc41 	bl	8002394 <HAL_GetTick>
 8002b12:	1b80      	subs	r0, r0, r6
 8002b14:	2864      	cmp	r0, #100	@ 0x64
 8002b16:	d8e9      	bhi.n	8002aec <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	039b      	lsls	r3, r3, #14
 8002b1c:	d4f7      	bmi.n	8002b0e <HAL_RCC_OscConfig+0x26a>
 8002b1e:	e700      	b.n	8002922 <HAL_RCC_OscConfig+0x7e>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	42420000 	.word	0x42420000
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	4e50      	ldr	r6, [pc, #320]	@ (8002c78 <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3a:	6a33      	ldr	r3, [r6, #32]
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6233      	str	r3, [r6, #32]
 8002b42:	6a33      	ldr	r3, [r6, #32]
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fc23 	bl	8002394 <HAL_GetTick>
 8002b4e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	e004      	b.n	8002b5c <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7ff fc1f 	bl	8002394 <HAL_GetTick>
 8002b56:	1bc0      	subs	r0, r0, r7
 8002b58:	4540      	cmp	r0, r8
 8002b5a:	d8c7      	bhi.n	8002aec <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	6a33      	ldr	r3, [r6, #32]
 8002b5e:	0798      	lsls	r0, r3, #30
 8002b60:	d4f7      	bmi.n	8002b52 <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 8002b62:	2d00      	cmp	r5, #0
 8002b64:	f43f af59 	beq.w	8002a1a <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4a43      	ldr	r2, [pc, #268]	@ (8002c78 <HAL_RCC_OscConfig+0x3d4>)
 8002b6a:	69d3      	ldr	r3, [r2, #28]
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	e752      	b.n	8002a1a <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8002b74:	4a41      	ldr	r2, [pc, #260]	@ (8002c7c <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4e40      	ldr	r6, [pc, #256]	@ (8002c78 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8002b78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b7a:	f7ff fc0b 	bl	8002394 <HAL_GetTick>
 8002b7e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b80:	e004      	b.n	8002b8c <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b82:	f7ff fc07 	bl	8002394 <HAL_GetTick>
 8002b86:	1b40      	subs	r0, r0, r5
 8002b88:	2802      	cmp	r0, #2
 8002b8a:	d8af      	bhi.n	8002aec <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8c:	6833      	ldr	r3, [r6, #0]
 8002b8e:	0799      	lsls	r1, r3, #30
 8002b90:	d4f7      	bmi.n	8002b82 <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	e6f1      	b.n	800297a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b96:	4a38      	ldr	r2, [pc, #224]	@ (8002c78 <HAL_RCC_OscConfig+0x3d4>)
 8002b98:	6a13      	ldr	r3, [r2, #32]
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fbf8 	bl	8002394 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002ba8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	4f33      	ldr	r7, [pc, #204]	@ (8002c78 <HAL_RCC_OscConfig+0x3d4>)
 8002bac:	e004      	b.n	8002bb8 <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7ff fbf1 	bl	8002394 <HAL_GetTick>
 8002bb2:	1b80      	subs	r0, r0, r6
 8002bb4:	4540      	cmp	r0, r8
 8002bb6:	d899      	bhi.n	8002aec <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	079b      	lsls	r3, r3, #30
 8002bbc:	d5f7      	bpl.n	8002bae <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	f43f af2b 	beq.w	8002a1a <HAL_RCC_OscConfig+0x176>
 8002bc4:	e7d0      	b.n	8002b68 <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	f43f af51 	beq.w	8002a6e <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8002bcc:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	6a22      	ldr	r2, [r4, #32]
 8002bd0:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002bd4:	4291      	cmp	r1, r2
 8002bd6:	f47f af4a 	bne.w	8002a6e <HAL_RCC_OscConfig+0x1ca>
 8002bda:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bdc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	1a18      	subs	r0, r3, r0
 8002be2:	bf18      	it	ne
 8002be4:	2001      	movne	r0, #1
 8002be6:	e734      	b.n	8002a52 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bec:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002bfe:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c00:	e681      	b.n	8002906 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c02:	f042 0204 	orr.w	r2, r2, #4
 8002c06:	621a      	str	r2, [r3, #32]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c10:	e7c6      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 8002c12:	f7ff fbbf 	bl	8002394 <HAL_GetTick>
 8002c16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c18:	e005      	b.n	8002c26 <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7ff fbbb 	bl	8002394 <HAL_GetTick>
 8002c1e:	1b80      	subs	r0, r0, r6
 8002c20:	2802      	cmp	r0, #2
 8002c22:	f63f af63 	bhi.w	8002aec <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	0199      	lsls	r1, r3, #6
 8002c2a:	d4f6      	bmi.n	8002c1a <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c2c:	6a23      	ldr	r3, [r4, #32]
 8002c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c32:	d105      	bne.n	8002c40 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c34:	686a      	ldr	r2, [r5, #4]
 8002c36:	68a1      	ldr	r1, [r4, #8]
 8002c38:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c40:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c42:	4d0d      	ldr	r5, [pc, #52]	@ (8002c78 <HAL_RCC_OscConfig+0x3d4>)
 8002c44:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002c46:	686a      	ldr	r2, [r5, #4]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8002c4e:	490b      	ldr	r1, [pc, #44]	@ (8002c7c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c50:	4313      	orrs	r3, r2
 8002c52:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c54:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002c56:	f7ff fb9d 	bl	8002394 <HAL_GetTick>
 8002c5a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5c:	e005      	b.n	8002c6a <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7ff fb99 	bl	8002394 <HAL_GetTick>
 8002c62:	1b00      	subs	r0, r0, r4
 8002c64:	2802      	cmp	r0, #2
 8002c66:	f63f af41 	bhi.w	8002aec <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c6a:	682b      	ldr	r3, [r5, #0]
 8002c6c:	019a      	lsls	r2, r3, #6
 8002c6e:	d5f6      	bpl.n	8002c5e <HAL_RCC_OscConfig+0x3ba>
 8002c70:	e6ee      	b.n	8002a50 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 8002c72:	2001      	movs	r0, #1
}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	42420000 	.word	0x42420000

08002c80 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002c80:	2800      	cmp	r0, #0
 8002c82:	f000 80a1 	beq.w	8002dc8 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c86:	4a56      	ldr	r2, [pc, #344]	@ (8002de0 <HAL_RCC_ClockConfig+0x160>)
{
 8002c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	4604      	mov	r4, r0
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	428b      	cmp	r3, r1
 8002c96:	460d      	mov	r5, r1
 8002c98:	d20c      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	6813      	ldr	r3, [r2, #0]
 8002c9c:	f023 0307 	bic.w	r3, r3, #7
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca4:	6813      	ldr	r3, [r2, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	428b      	cmp	r3, r1
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
}
 8002cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	079e      	lsls	r6, r3, #30
 8002cb8:	d514      	bpl.n	8002ce4 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cba:	0758      	lsls	r0, r3, #29
 8002cbc:	d504      	bpl.n	8002cc8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cbe:	4949      	ldr	r1, [pc, #292]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
 8002cc0:	684a      	ldr	r2, [r1, #4]
 8002cc2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002cc6:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	0719      	lsls	r1, r3, #28
 8002cca:	d504      	bpl.n	8002cd6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ccc:	4945      	ldr	r1, [pc, #276]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
 8002cce:	684a      	ldr	r2, [r1, #4]
 8002cd0:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8002cd4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd6:	4943      	ldr	r1, [pc, #268]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
 8002cd8:	68a0      	ldr	r0, [r4, #8]
 8002cda:	684a      	ldr	r2, [r1, #4]
 8002cdc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002ce0:	4302      	orrs	r2, r0
 8002ce2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce4:	07da      	lsls	r2, r3, #31
 8002ce6:	d520      	bpl.n	8002d2a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b3e      	ldr	r3, [pc, #248]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cec:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf0:	d06c      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf2:	2a02      	cmp	r2, #2
 8002cf4:	d065      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf6:	079e      	lsls	r6, r3, #30
 8002cf8:	d5d9      	bpl.n	8002cae <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfa:	4e3a      	ldr	r6, [pc, #232]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d00:	6873      	ldr	r3, [r6, #4]
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002d0a:	f7ff fb43 	bl	8002394 <HAL_GetTick>
 8002d0e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d10:	e004      	b.n	8002d1c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d12:	f7ff fb3f 	bl	8002394 <HAL_GetTick>
 8002d16:	1bc0      	subs	r0, r0, r7
 8002d18:	4540      	cmp	r0, r8
 8002d1a:	d85a      	bhi.n	8002dd2 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1c:	6873      	ldr	r3, [r6, #4]
 8002d1e:	6862      	ldr	r2, [r4, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d28:	d1f3      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002de0 <HAL_RCC_ClockConfig+0x160>)
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	42ab      	cmp	r3, r5
 8002d34:	d909      	bls.n	8002d4a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f023 0307 	bic.w	r3, r3, #7
 8002d3c:	432b      	orrs	r3, r5
 8002d3e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d40:	6813      	ldr	r3, [r2, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	42ab      	cmp	r3, r5
 8002d48:	d1b1      	bne.n	8002cae <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	0758      	lsls	r0, r3, #29
 8002d4e:	d506      	bpl.n	8002d5e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d50:	4924      	ldr	r1, [pc, #144]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
 8002d52:	68e0      	ldr	r0, [r4, #12]
 8002d54:	684a      	ldr	r2, [r1, #4]
 8002d56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d5a:	4302      	orrs	r2, r0
 8002d5c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5e:	0719      	lsls	r1, r3, #28
 8002d60:	d507      	bpl.n	8002d72 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d62:	4a20      	ldr	r2, [pc, #128]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
 8002d64:	6921      	ldr	r1, [r4, #16]
 8002d66:	6853      	ldr	r3, [r2, #4]
 8002d68:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002d6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d70:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8002d72:	491c      	ldr	r1, [pc, #112]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
 8002d74:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002d76:	f002 030c 	and.w	r3, r2, #12
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d80:	4a18      	ldr	r2, [pc, #96]	@ (8002de4 <HAL_RCC_ClockConfig+0x164>)
 8002d82:	481a      	ldr	r0, [pc, #104]	@ (8002dec <HAL_RCC_ClockConfig+0x16c>)
 8002d84:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8002d86:	491a      	ldr	r1, [pc, #104]	@ (8002df0 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d88:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d8c:	5c80      	ldrb	r0, [r0, r2]
 8002d8e:	4a19      	ldr	r2, [pc, #100]	@ (8002df4 <HAL_RCC_ClockConfig+0x174>)
 8002d90:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8002d92:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d94:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8002d96:	f7ff fabb 	bl	8002310 <HAL_InitTick>
  return HAL_OK;
 8002d9a:	2000      	movs	r0, #0
}
 8002d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002da0:	4815      	ldr	r0, [pc, #84]	@ (8002df8 <HAL_RCC_ClockConfig+0x178>)
 8002da2:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002da6:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002da8:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002daa:	d514      	bpl.n	8002dd6 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dac:	480e      	ldr	r0, [pc, #56]	@ (8002de8 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dae:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002db0:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002db4:	4911      	ldr	r1, [pc, #68]	@ (8002dfc <HAL_RCC_ClockConfig+0x17c>)
 8002db6:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002dba:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc0:	e7de      	b.n	8002d80 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	019f      	lsls	r7, r3, #6
 8002dc4:	d499      	bmi.n	8002cfa <HAL_RCC_ClockConfig+0x7a>
 8002dc6:	e772      	b.n	8002cae <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002dc8:	2001      	movs	r0, #1
}
 8002dca:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dcc:	039b      	lsls	r3, r3, #14
 8002dce:	d494      	bmi.n	8002cfa <HAL_RCC_ClockConfig+0x7a>
 8002dd0:	e76d      	b.n	8002cae <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002dd2:	2003      	movs	r0, #3
 8002dd4:	e76c      	b.n	8002cb0 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <HAL_RCC_ClockConfig+0x180>)
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	e7d0      	b.n	8002d80 <HAL_RCC_ClockConfig+0x100>
 8002dde:	bf00      	nop
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	080031c8 	.word	0x080031c8
 8002df0:	20000008 	.word	0x20000008
 8002df4:	20000000 	.word	0x20000000
 8002df8:	080031dc 	.word	0x080031dc
 8002dfc:	080031d8 	.word	0x080031d8
 8002e00:	003d0900 	.word	0x003d0900

08002e04 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d066      	beq.n	8002ed6 <HAL_TIM_Base_Init+0xd2>
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e0e:	4604      	mov	r4, r0
 8002e10:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d059      	beq.n	8002ecc <HAL_TIM_Base_Init+0xc8>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1c:	4e2f      	ldr	r6, [pc, #188]	@ (8002edc <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e22:	42b2      	cmp	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e24:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e26:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e28:	6861      	ldr	r1, [r4, #4]
  tmpcr1 = TIMx->CR1;
 8002e2a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e2c:	d030      	beq.n	8002e90 <HAL_TIM_Base_Init+0x8c>
 8002e2e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002e32:	d02d      	beq.n	8002e90 <HAL_TIM_Base_Init+0x8c>
 8002e34:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8002e38:	42b2      	cmp	r2, r6
 8002e3a:	d03e      	beq.n	8002eba <HAL_TIM_Base_Init+0xb6>
 8002e3c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002e40:	42b2      	cmp	r2, r6
 8002e42:	d03a      	beq.n	8002eba <HAL_TIM_Base_Init+0xb6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e48:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002e4a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e4c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e4e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e50:	2301      	movs	r3, #1
 8002e52:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e54:	6913      	ldr	r3, [r2, #16]
 8002e56:	07db      	lsls	r3, r3, #31
 8002e58:	d503      	bpl.n	8002e62 <HAL_TIM_Base_Init+0x5e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e5a:	6913      	ldr	r3, [r2, #16]
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002e6c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002e70:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002e74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e80:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002e84:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002e8c:	2000      	movs	r0, #0
}
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8002e90:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e96:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e98:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ea4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002ea6:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <HAL_TIM_Base_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eaa:	62d0      	str	r0, [r2, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eac:	429a      	cmp	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002eae:	bf08      	it	eq
 8002eb0:	6963      	ldreq	r3, [r4, #20]
  TIMx->PSC = Structure->Prescaler;
 8002eb2:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb4:	bf08      	it	eq
 8002eb6:	6313      	streq	r3, [r2, #48]	@ 0x30
 8002eb8:	e7ca      	b.n	8002e50 <HAL_TIM_Base_Init+0x4c>
    tmpcr1 |= Structure->CounterMode;
 8002eba:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ec0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec8:	4333      	orrs	r3, r6
 8002eca:	e7bb      	b.n	8002e44 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8002ecc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ed0:	f7ff f9ce 	bl	8002270 <HAL_TIM_Base_MspInit>
 8002ed4:	e7a0      	b.n	8002e18 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8002ed6:	2001      	movs	r0, #1
}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002ee0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002ee4:	2a01      	cmp	r2, #1
 8002ee6:	d06e      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0xe6>
 8002ee8:	4603      	mov	r3, r0
{
 8002eea:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002eec:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002eee:	2402      	movs	r4, #2
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(htim);
 8002ef2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef6:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002efa:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efc:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8002f00:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002f04:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f06:	680c      	ldr	r4, [r1, #0]
 8002f08:	2c60      	cmp	r4, #96	@ 0x60
 8002f0a:	d076      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x11a>
 8002f0c:	d811      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x52>
 8002f0e:	2c40      	cmp	r4, #64	@ 0x40
 8002f10:	d05b      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0xea>
 8002f12:	d82e      	bhi.n	8002f72 <HAL_TIM_ConfigClockSource+0x92>
 8002f14:	2c20      	cmp	r4, #32
 8002f16:	d004      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x42>
 8002f18:	f200 8088 	bhi.w	800302c <HAL_TIM_ConfigClockSource+0x14c>
 8002f1c:	f034 0110 	bics.w	r1, r4, #16
 8002f20:	d11f      	bne.n	8002f62 <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f22:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f24:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f28:	4321      	orrs	r1, r4
 8002f2a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f2e:	6091      	str	r1, [r2, #8]
}
 8002f30:	e016      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8002f32:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8002f36:	d013      	beq.n	8002f60 <HAL_TIM_ConfigClockSource+0x80>
 8002f38:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8002f3c:	d033      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0xc6>
 8002f3e:	2c70      	cmp	r4, #112	@ 0x70
 8002f40:	d10f      	bne.n	8002f62 <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f42:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002f46:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f48:	4328      	orrs	r0, r5
 8002f4a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f50:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002f54:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f56:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002f58:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5a:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002f5e:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002f64:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f66:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002f6e:	bc30      	pop	{r4, r5}
 8002f70:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002f72:	2c50      	cmp	r4, #80	@ 0x50
 8002f74:	d1f5      	bne.n	8002f62 <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8002f76:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002f78:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f7a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f7c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002f80:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f82:	6a11      	ldr	r1, [r2, #32]
 8002f84:	f021 0101 	bic.w	r1, r1, #1
 8002f88:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f90:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f94:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002f96:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002f98:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f9e:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002fa2:	6091      	str	r1, [r2, #8]
}
 8002fa4:	e7dc      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fa6:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002faa:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fac:	4328      	orrs	r0, r5
 8002fae:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb0:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002fb8:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8002fba:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbc:	6891      	ldr	r1, [r2, #8]
 8002fbe:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002fc2:	6091      	str	r1, [r2, #8]
      break;
 8002fc4:	e7cc      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 8002fc6:	2002      	movs	r0, #2
}
 8002fc8:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8002fca:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002fcc:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002fce:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002fd4:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd6:	6a11      	ldr	r1, [r2, #32]
 8002fd8:	f021 0101 	bic.w	r1, r1, #1
 8002fdc:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fde:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fe0:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fe4:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002fe8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002fea:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002fec:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fee:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff2:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8002ff6:	6091      	str	r1, [r2, #8]
}
 8002ff8:	e7b2      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 8002ffa:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002ffc:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ffe:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003000:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003004:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003008:	6a10      	ldr	r0, [r2, #32]
 800300a:	f020 0010 	bic.w	r0, r0, #16
 800300e:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003010:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003012:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003016:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800301a:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 800301c:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800301e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003020:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003024:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003028:	6091      	str	r1, [r2, #8]
}
 800302a:	e799      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 800302c:	2c30      	cmp	r4, #48	@ 0x30
 800302e:	f43f af78 	beq.w	8002f22 <HAL_TIM_ConfigClockSource+0x42>
 8003032:	e796      	b.n	8002f62 <HAL_TIM_ConfigClockSource+0x82>

08003034 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003034:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003038:	2a01      	cmp	r2, #1
 800303a:	d027      	beq.n	800308c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800303c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003040:	681a      	ldr	r2, [r3, #0]
{
 8003042:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003048:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800304a:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304c:	4d10      	ldr	r5, [pc, #64]	@ (8003090 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800304e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003052:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003056:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8003058:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305a:	d009      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800305c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003060:	d006      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003062:	480c      	ldr	r0, [pc, #48]	@ (8003094 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003064:	4282      	cmp	r2, r0
 8003066:	d003      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003068:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800306c:	4282      	cmp	r2, r0
 800306e:	d104      	bne.n	800307a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003070:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003072:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003076:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003078:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800307a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800307c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003082:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003086:	4610      	mov	r0, r2
}
 8003088:	bc30      	pop	{r4, r5}
 800308a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800308c:	2002      	movs	r0, #2
}
 800308e:	4770      	bx	lr
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40000400 	.word	0x40000400

08003098 <memset>:
 8003098:	4603      	mov	r3, r0
 800309a:	4402      	add	r2, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	2600      	movs	r6, #0
 80030ac:	4d0c      	ldr	r5, [pc, #48]	@ (80030e0 <__libc_init_array+0x38>)
 80030ae:	4c0d      	ldr	r4, [pc, #52]	@ (80030e4 <__libc_init_array+0x3c>)
 80030b0:	1b64      	subs	r4, r4, r5
 80030b2:	10a4      	asrs	r4, r4, #2
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	f000 f828 	bl	800310c <_init>
 80030bc:	2600      	movs	r6, #0
 80030be:	4d0a      	ldr	r5, [pc, #40]	@ (80030e8 <__libc_init_array+0x40>)
 80030c0:	4c0a      	ldr	r4, [pc, #40]	@ (80030ec <__libc_init_array+0x44>)
 80030c2:	1b64      	subs	r4, r4, r5
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	080031ec 	.word	0x080031ec
 80030e4:	080031ec 	.word	0x080031ec
 80030e8:	080031ec 	.word	0x080031ec
 80030ec:	080031f0 	.word	0x080031f0

080030f0 <memcpy>:
 80030f0:	440a      	add	r2, r1
 80030f2:	4291      	cmp	r1, r2
 80030f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80030f8:	d100      	bne.n	80030fc <memcpy+0xc>
 80030fa:	4770      	bx	lr
 80030fc:	b510      	push	{r4, lr}
 80030fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003102:	4291      	cmp	r1, r2
 8003104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003108:	d1f9      	bne.n	80030fe <memcpy+0xe>
 800310a:	bd10      	pop	{r4, pc}

0800310c <_init>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	bf00      	nop
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr

08003118 <_fini>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	bf00      	nop
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr
