
ascon-newuu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000301c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003128  08003128  00004128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ec  080031ec  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031ec  080031ec  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031ec  080031ec  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ec  080031ec  000041ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031f0  080031f0  000041f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08003200  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08003200  0000507c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5a6  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c77  00000000  00000000  000145db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00024620  00000000  00000000  00016252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0003a878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000176a  00000000  00000000  0003b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ea6  00000000  00000000  0003c89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136b3  00000000  00000000  00052740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000880ba  00000000  00000000  00065df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000edead  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001928  00000000  00000000  000edef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000ef818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003110 	.word	0x08003110

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003110 	.word	0x08003110

0800014c <GOST_Crypt_32_E_Cicle>:
@param *GOST_Table - Указатель на таблицу замены ГОСТ(ДК) в 128 байтном формате
(вместо старшого полубайта 0)
@param GOST_Key - 32хбитная часть ключа(СК).
*/
void GOST_Crypt_32_E_Cicle(GOST_Data_Part *DATA, uint8_t *GOST_Table, uint32_t *GOST_Key)
{
 800014c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000150:	6847      	ldr	r7, [r0, #4]
 8000152:	6814      	ldr	r4, [r2, #0]
        GOST_Table += 2 * _GOST_TABLE_MAX_NODE_VALUE;
 8000154:	f101 0e40 	add.w	lr, r1, #64	@ 0x40
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000158:	443c      	add	r4, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800015a:	f3c4 5303 	ubfx	r3, r4, #20, #4
 800015e:	3310      	adds	r3, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000160:	f81e 6003 	ldrb.w	r6, [lr, r3]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000164:	f3c4 4303 	ubfx	r3, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000168:	f81e 3003 	ldrb.w	r3, [lr, r3]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800016c:	f3c4 3503 	ubfx	r5, r4, #12, #4
        GOST_Table += 2 * _GOST_TABLE_MAX_NODE_VALUE;
 8000170:	f101 0c20 	add.w	ip, r1, #32
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000174:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000176:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800017a:	f81c 6005 	ldrb.w	r6, [ip, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800017e:	f3c4 2503 	ubfx	r5, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000182:	f81c 5005 	ldrb.w	r5, [ip, r5]
        result |= ((uint32_t)subst_result << (8 * m));
 8000186:	b2db      	uxtb	r3, r3
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000188:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800018c:	b2ed      	uxtb	r5, r5
 800018e:	041b      	lsls	r3, r3, #16
 8000190:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000194:	f3c4 1503 	ubfx	r5, r4, #4, #4
 8000198:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800019a:	5d4e      	ldrb	r6, [r1, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800019c:	f004 050f 	and.w	r5, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80001a0:	5d4d      	ldrb	r5, [r1, r5]
 80001a2:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80001a6:	b2ed      	uxtb	r5, r5
 80001a8:	431d      	orrs	r5, r3
        GOST_Table += 2 * _GOST_TABLE_MAX_NODE_VALUE;
 80001aa:	f101 0360 	add.w	r3, r1, #96	@ 0x60
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80001ae:	eb03 7614 	add.w	r6, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80001b2:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80001b6:	7c36      	ldrb	r6, [r6, #16]
 80001b8:	5d1c      	ldrb	r4, [r3, r4]
 80001ba:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    S.full = n2 ^ rotated;
 80001be:	6806      	ldr	r6, [r0, #0]
        result |= ((uint32_t)subst_result << (8 * m));
 80001c0:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
    S.full = n2 ^ rotated;
 80001c4:	ea86 5674 	eor.w	r6, r6, r4, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80001c8:	e9c0 7600 	strd	r7, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80001cc:	6855      	ldr	r5, [r2, #4]
 80001ce:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80001d0:	f3c5 5403 	ubfx	r4, r5, #20, #4
 80001d4:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80001d6:	f81e 9004 	ldrb.w	r9, [lr, r4]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80001da:	f3c5 3403 	ubfx	r4, r5, #12, #4
 80001de:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80001e0:	f81c 8004 	ldrb.w	r8, [ip, r4]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80001e4:	f3c5 4403 	ubfx	r4, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80001e8:	f81e 4004 	ldrb.w	r4, [lr, r4]
 80001ec:	ea44 1409 	orr.w	r4, r4, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80001f0:	b2e4      	uxtb	r4, r4
 80001f2:	ea4f 4904 	mov.w	r9, r4, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80001f6:	f3c5 2403 	ubfx	r4, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80001fa:	f81c 4004 	ldrb.w	r4, [ip, r4]
 80001fe:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000202:	b2e4      	uxtb	r4, r4
 8000204:	ea49 2904 	orr.w	r9, r9, r4, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000208:	f3c5 1403 	ubfx	r4, r5, #4, #4
 800020c:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800020e:	f811 8004 	ldrb.w	r8, [r1, r4]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000212:	f005 040f 	and.w	r4, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000216:	5d0c      	ldrb	r4, [r1, r4]
 8000218:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800021c:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000220:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000224:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000228:	5d5d      	ldrb	r5, [r3, r5]
        result |= ((uint32_t)subst_result << (8 * m));
 800022a:	b2e4      	uxtb	r4, r4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800022c:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000230:	ea49 0404 	orr.w	r4, r9, r4
 8000234:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    S.full = n2 ^ rotated;
 8000238:	ea87 5474 	eor.w	r4, r7, r4, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800023c:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000240:	6895      	ldr	r5, [r2, #8]
 8000242:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000244:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8000248:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800024a:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800024e:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8000252:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000254:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000258:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800025c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000260:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000264:	b2ff      	uxtb	r7, r7
 8000266:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800026a:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800026e:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000272:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000276:	b2ff      	uxtb	r7, r7
 8000278:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800027c:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8000280:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000282:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000286:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800028a:	5dcf      	ldrb	r7, [r1, r7]
 800028c:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000290:	b2ff      	uxtb	r7, r7
 8000292:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000296:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800029a:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800029e:	f898 8010 	ldrb.w	r8, [r8, #16]
 80002a2:	5d5d      	ldrb	r5, [r3, r5]
 80002a4:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80002a8:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80002ac:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80002b0:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80002b4:	68d5      	ldr	r5, [r2, #12]
 80002b6:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80002b8:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80002bc:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80002be:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80002c2:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80002c6:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80002c8:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80002cc:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80002d0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80002d4:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80002d8:	b2ff      	uxtb	r7, r7
 80002da:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80002de:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80002e2:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80002e6:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80002ea:	b2ff      	uxtb	r7, r7
 80002ec:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80002f0:	f3c5 1703 	ubfx	r7, r5, #4, #4
 80002f4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80002f6:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80002fa:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80002fe:	5dcf      	ldrb	r7, [r1, r7]
 8000300:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000304:	b2ff      	uxtb	r7, r7
 8000306:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800030a:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800030e:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000312:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000316:	5d5d      	ldrb	r5, [r3, r5]
 8000318:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800031c:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8000320:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000324:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000328:	6915      	ldr	r5, [r2, #16]
 800032a:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800032c:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8000330:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000332:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000336:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800033a:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800033c:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000340:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000344:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000348:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800034c:	b2ff      	uxtb	r7, r7
 800034e:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000352:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000356:	f81c 7007 	ldrb.w	r7, [ip, r7]
 800035a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800035e:	b2ff      	uxtb	r7, r7
 8000360:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000364:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8000368:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800036a:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800036e:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000372:	5dcf      	ldrb	r7, [r1, r7]
 8000374:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000378:	b2ff      	uxtb	r7, r7
 800037a:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800037e:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000382:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000386:	f898 8010 	ldrb.w	r8, [r8, #16]
 800038a:	5d5d      	ldrb	r5, [r3, r5]
 800038c:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000390:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8000394:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000398:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800039c:	6955      	ldr	r5, [r2, #20]
 800039e:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80003a0:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80003a4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80003a6:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80003aa:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80003ae:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80003b0:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80003b4:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80003b8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80003bc:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80003c0:	b2ff      	uxtb	r7, r7
 80003c2:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80003c6:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80003ca:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80003ce:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80003d2:	b2ff      	uxtb	r7, r7
 80003d4:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80003d8:	f3c5 1703 	ubfx	r7, r5, #4, #4
 80003dc:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80003de:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80003e2:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80003e6:	5dcf      	ldrb	r7, [r1, r7]
 80003e8:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80003ec:	b2ff      	uxtb	r7, r7
 80003ee:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80003f2:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80003f6:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80003fa:	f898 8010 	ldrb.w	r8, [r8, #16]
 80003fe:	5d5d      	ldrb	r5, [r3, r5]
 8000400:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000404:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8000408:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800040c:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000410:	6995      	ldr	r5, [r2, #24]
 8000412:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000414:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8000418:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800041a:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800041e:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8000422:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000424:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000428:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800042c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000430:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000434:	b2ff      	uxtb	r7, r7
 8000436:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800043a:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800043e:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000442:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000446:	b2ff      	uxtb	r7, r7
 8000448:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800044c:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8000450:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000452:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000456:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800045a:	5dcf      	ldrb	r7, [r1, r7]
 800045c:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000460:	b2ff      	uxtb	r7, r7
 8000462:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000466:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800046a:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800046e:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000472:	5d5d      	ldrb	r5, [r3, r5]
 8000474:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000478:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 800047c:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000480:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000484:	69d5      	ldr	r5, [r2, #28]
 8000486:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000488:	f3c5 5703 	ubfx	r7, r5, #20, #4
 800048c:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800048e:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000492:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8000496:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000498:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800049c:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80004a0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80004a4:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80004a8:	b2ff      	uxtb	r7, r7
 80004aa:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80004ae:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80004b2:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80004b6:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80004ba:	b2ff      	uxtb	r7, r7
 80004bc:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80004c0:	f3c5 1703 	ubfx	r7, r5, #4, #4
 80004c4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80004c6:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80004ca:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80004ce:	5dcf      	ldrb	r7, [r1, r7]
 80004d0:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80004d4:	b2ff      	uxtb	r7, r7
 80004d6:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80004da:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80004de:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80004e2:	f898 8010 	ldrb.w	r8, [r8, #16]
 80004e6:	5d5d      	ldrb	r5, [r3, r5]
 80004e8:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80004ec:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80004f0:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80004f4:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80004f8:	6815      	ldr	r5, [r2, #0]
 80004fa:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80004fc:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8000500:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000502:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000506:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800050a:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800050c:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000510:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000514:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000518:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800051c:	b2ff      	uxtb	r7, r7
 800051e:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000522:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000526:	f81c 7007 	ldrb.w	r7, [ip, r7]
 800052a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800052e:	b2ff      	uxtb	r7, r7
 8000530:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000534:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8000538:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800053a:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800053e:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000542:	5dcf      	ldrb	r7, [r1, r7]
 8000544:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000548:	b2ff      	uxtb	r7, r7
 800054a:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800054e:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000552:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000556:	f898 8010 	ldrb.w	r8, [r8, #16]
 800055a:	5d5d      	ldrb	r5, [r3, r5]
 800055c:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000560:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8000564:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000568:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800056c:	6855      	ldr	r5, [r2, #4]
 800056e:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000570:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8000574:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000576:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800057a:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800057e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000580:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000584:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000588:	f81e 7007 	ldrb.w	r7, [lr, r7]
 800058c:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000590:	b2ff      	uxtb	r7, r7
 8000592:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000596:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800059a:	f81c 7007 	ldrb.w	r7, [ip, r7]
 800059e:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80005a2:	b2ff      	uxtb	r7, r7
 80005a4:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80005a8:	f3c5 1703 	ubfx	r7, r5, #4, #4
 80005ac:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80005ae:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80005b2:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80005b6:	5dcf      	ldrb	r7, [r1, r7]
 80005b8:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80005bc:	b2ff      	uxtb	r7, r7
 80005be:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80005c2:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80005c6:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80005ca:	f898 8010 	ldrb.w	r8, [r8, #16]
 80005ce:	5d5d      	ldrb	r5, [r3, r5]
 80005d0:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80005d4:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80005d8:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80005dc:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80005e0:	6895      	ldr	r5, [r2, #8]
 80005e2:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80005e4:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80005e8:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80005ea:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80005ee:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80005f2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80005f4:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80005f8:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80005fc:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000600:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000604:	b2ff      	uxtb	r7, r7
 8000606:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800060a:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800060e:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000612:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000616:	b2ff      	uxtb	r7, r7
 8000618:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800061c:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8000620:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000622:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000626:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800062a:	5dcf      	ldrb	r7, [r1, r7]
 800062c:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000630:	b2ff      	uxtb	r7, r7
 8000632:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000636:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800063a:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800063e:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000642:	5d5d      	ldrb	r5, [r3, r5]
 8000644:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000648:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 800064c:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000650:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000654:	68d5      	ldr	r5, [r2, #12]
 8000656:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000658:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800065c:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800065e:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000662:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8000666:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000668:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800066c:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000670:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000674:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000678:	b2ff      	uxtb	r7, r7
 800067a:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800067e:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000682:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000686:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800068a:	b2ff      	uxtb	r7, r7
 800068c:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000690:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8000694:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000696:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800069a:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800069e:	5dcf      	ldrb	r7, [r1, r7]
 80006a0:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80006a4:	b2ff      	uxtb	r7, r7
 80006a6:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80006aa:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80006ae:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80006b2:	f898 8010 	ldrb.w	r8, [r8, #16]
 80006b6:	5d5d      	ldrb	r5, [r3, r5]
 80006b8:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80006bc:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80006c0:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80006c4:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80006c8:	6915      	ldr	r5, [r2, #16]
 80006ca:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80006cc:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80006d0:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80006d2:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80006d6:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80006da:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80006dc:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80006e0:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80006e4:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80006e8:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80006ec:	b2ff      	uxtb	r7, r7
 80006ee:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80006f2:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80006f6:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80006fa:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80006fe:	b2ff      	uxtb	r7, r7
 8000700:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000704:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8000708:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800070a:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800070e:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000712:	5dcf      	ldrb	r7, [r1, r7]
 8000714:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000718:	b2ff      	uxtb	r7, r7
 800071a:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800071e:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000722:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000726:	f898 8010 	ldrb.w	r8, [r8, #16]
 800072a:	5d5d      	ldrb	r5, [r3, r5]
 800072c:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000730:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8000734:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000738:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800073c:	6955      	ldr	r5, [r2, #20]
 800073e:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000740:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8000744:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000746:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800074a:	f3c5 5703 	ubfx	r7, r5, #20, #4
 800074e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000750:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000754:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000758:	f81c 7007 	ldrb.w	r7, [ip, r7]
 800075c:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000760:	b2ff      	uxtb	r7, r7
 8000762:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000766:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800076a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 800076e:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000772:	b2ff      	uxtb	r7, r7
 8000774:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000778:	f3c5 1703 	ubfx	r7, r5, #4, #4
 800077c:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800077e:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000782:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000786:	5dcf      	ldrb	r7, [r1, r7]
 8000788:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800078c:	b2ff      	uxtb	r7, r7
 800078e:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000792:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000796:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800079a:	f898 8010 	ldrb.w	r8, [r8, #16]
 800079e:	5d5d      	ldrb	r5, [r3, r5]
 80007a0:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80007a4:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80007a8:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80007ac:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80007b0:	6995      	ldr	r5, [r2, #24]
 80007b2:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80007b4:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80007b8:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80007ba:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80007be:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80007c2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80007c4:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80007c8:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80007cc:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80007d0:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80007d4:	fa5f f887 	uxtb.w	r8, r7
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80007d8:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80007dc:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80007e0:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80007e4:	b2ff      	uxtb	r7, r7
 80007e6:	023f      	lsls	r7, r7, #8
 80007e8:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80007ec:	f3c5 1803 	ubfx	r8, r5, #4, #4
 80007f0:	f108 0810 	add.w	r8, r8, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80007f4:	f811 9008 	ldrb.w	r9, [r1, r8]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80007f8:	f005 080f 	and.w	r8, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80007fc:	f811 8008 	ldrb.w	r8, [r1, r8]
 8000800:	ea48 1809 	orr.w	r8, r8, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000804:	fa5f f888 	uxtb.w	r8, r8
 8000808:	ea47 0708 	orr.w	r7, r7, r8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800080c:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000810:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000814:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000818:	5d5d      	ldrb	r5, [r3, r5]
 800081a:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800081e:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8000822:	ea86 5777 	eor.w	r7, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000826:	e9c0 4700 	strd	r4, r7, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800082a:	69d6      	ldr	r6, [r2, #28]
 800082c:	19bd      	adds	r5, r7, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800082e:	f3c5 3603 	ubfx	r6, r5, #12, #4
 8000832:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000834:	f81c 8006 	ldrb.w	r8, [ip, r6]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000838:	f3c5 5603 	ubfx	r6, r5, #20, #4
 800083c:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800083e:	f81e 9006 	ldrb.w	r9, [lr, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000842:	f3c5 2603 	ubfx	r6, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000846:	f81c 6006 	ldrb.w	r6, [ip, r6]
 800084a:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800084e:	b2f6      	uxtb	r6, r6
 8000850:	ea4f 2806 	mov.w	r8, r6, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000854:	f3c5 4603 	ubfx	r6, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000858:	f81e 6006 	ldrb.w	r6, [lr, r6]
 800085c:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000860:	b2f6      	uxtb	r6, r6
 8000862:	ea48 4806 	orr.w	r8, r8, r6, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000866:	f3c5 1603 	ubfx	r6, r5, #4, #4
 800086a:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800086c:	f811 9006 	ldrb.w	r9, [r1, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000870:	f005 060f 	and.w	r6, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000874:	5d8e      	ldrb	r6, [r1, r6]
 8000876:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800087a:	b2f6      	uxtb	r6, r6
 800087c:	ea48 0606 	orr.w	r6, r8, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000880:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000884:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000888:	f898 8010 	ldrb.w	r8, [r8, #16]
 800088c:	5d5d      	ldrb	r5, [r3, r5]
 800088e:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000892:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    S.full = n2 ^ rotated;
 8000896:	ea84 5476 	eor.w	r4, r4, r6, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800089a:	e9c0 7400 	strd	r7, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800089e:	6816      	ldr	r6, [r2, #0]
 80008a0:	19a5      	adds	r5, r4, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80008a2:	f3c5 3603 	ubfx	r6, r5, #12, #4
 80008a6:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80008a8:	f81c 8006 	ldrb.w	r8, [ip, r6]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80008ac:	f3c5 5603 	ubfx	r6, r5, #20, #4
 80008b0:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80008b2:	f81e 9006 	ldrb.w	r9, [lr, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80008b6:	f3c5 2603 	ubfx	r6, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80008ba:	f81c 6006 	ldrb.w	r6, [ip, r6]
 80008be:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80008c2:	b2f6      	uxtb	r6, r6
 80008c4:	ea4f 2806 	mov.w	r8, r6, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80008c8:	f3c5 4603 	ubfx	r6, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80008cc:	f81e 6006 	ldrb.w	r6, [lr, r6]
 80008d0:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80008d4:	b2f6      	uxtb	r6, r6
 80008d6:	ea48 4806 	orr.w	r8, r8, r6, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80008da:	f3c5 1603 	ubfx	r6, r5, #4, #4
 80008de:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80008e0:	f811 9006 	ldrb.w	r9, [r1, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80008e4:	f005 060f 	and.w	r6, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80008e8:	5d8e      	ldrb	r6, [r1, r6]
 80008ea:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80008ee:	b2f6      	uxtb	r6, r6
 80008f0:	ea48 0606 	orr.w	r6, r8, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80008f4:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80008f8:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80008fc:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000900:	5d5d      	ldrb	r5, [r3, r5]
 8000902:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000906:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    S.full = n2 ^ rotated;
 800090a:	ea87 5776 	eor.w	r7, r7, r6, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800090e:	e9c0 4700 	strd	r4, r7, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000912:	6856      	ldr	r6, [r2, #4]
 8000914:	19bd      	adds	r5, r7, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000916:	f3c5 5603 	ubfx	r6, r5, #20, #4
 800091a:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800091c:	f81e 9006 	ldrb.w	r9, [lr, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000920:	f3c5 4603 	ubfx	r6, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000924:	f81e 6006 	ldrb.w	r6, [lr, r6]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000928:	f3c5 3803 	ubfx	r8, r5, #12, #4
 800092c:	f108 0810 	add.w	r8, r8, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000930:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
 8000934:	f81c 9008 	ldrb.w	r9, [ip, r8]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000938:	f3c5 2803 	ubfx	r8, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800093c:	f81c 8008 	ldrb.w	r8, [ip, r8]
        result |= ((uint32_t)subst_result << (8 * m));
 8000940:	b2f6      	uxtb	r6, r6
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000942:	ea48 1809 	orr.w	r8, r8, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000946:	fa5f f888 	uxtb.w	r8, r8
 800094a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800094e:	ea48 4806 	orr.w	r8, r8, r6, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000952:	f3c5 1603 	ubfx	r6, r5, #4, #4
 8000956:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000958:	f811 9006 	ldrb.w	r9, [r1, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800095c:	f005 060f 	and.w	r6, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000960:	5d8e      	ldrb	r6, [r1, r6]
 8000962:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000966:	b2f6      	uxtb	r6, r6
 8000968:	ea48 0606 	orr.w	r6, r8, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800096c:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000970:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000974:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000978:	5d5d      	ldrb	r5, [r3, r5]
 800097a:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800097e:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    S.full = n2 ^ rotated;
 8000982:	ea84 5676 	eor.w	r6, r4, r6, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000986:	e9c0 7600 	strd	r7, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800098a:	6894      	ldr	r4, [r2, #8]
 800098c:	4434      	add	r4, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800098e:	f3c4 3503 	ubfx	r5, r4, #12, #4
 8000992:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000994:	f81c 8005 	ldrb.w	r8, [ip, r5]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000998:	f3c4 5503 	ubfx	r5, r4, #20, #4
 800099c:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800099e:	f81e 9005 	ldrb.w	r9, [lr, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80009a2:	f3c4 2503 	ubfx	r5, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80009a6:	f81c 5005 	ldrb.w	r5, [ip, r5]
 80009aa:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80009ae:	b2ed      	uxtb	r5, r5
 80009b0:	ea4f 2805 	mov.w	r8, r5, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80009b4:	f3c4 4503 	ubfx	r5, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80009b8:	f81e 5005 	ldrb.w	r5, [lr, r5]
 80009bc:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80009c0:	b2ed      	uxtb	r5, r5
 80009c2:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80009c6:	f3c4 1503 	ubfx	r5, r4, #4, #4
 80009ca:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80009cc:	f811 9005 	ldrb.w	r9, [r1, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80009d0:	f004 050f 	and.w	r5, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80009d4:	5d4d      	ldrb	r5, [r1, r5]
 80009d6:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80009da:	b2ed      	uxtb	r5, r5
 80009dc:	ea48 0505 	orr.w	r5, r8, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80009e0:	eb03 7814 	add.w	r8, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80009e4:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80009e8:	f898 8010 	ldrb.w	r8, [r8, #16]
 80009ec:	5d1c      	ldrb	r4, [r3, r4]
 80009ee:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80009f2:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
    S.full = n2 ^ rotated;
 80009f6:	ea87 5575 	eor.w	r5, r7, r5, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80009fa:	e9c0 6500 	strd	r6, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80009fe:	68d4      	ldr	r4, [r2, #12]
 8000a00:	442c      	add	r4, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000a02:	f3c4 3703 	ubfx	r7, r4, #12, #4
 8000a06:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a08:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000a0c:	f3c4 5703 	ubfx	r7, r4, #20, #4
 8000a10:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a12:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000a16:	f3c4 2703 	ubfx	r7, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a1a:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000a1e:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000a22:	b2ff      	uxtb	r7, r7
 8000a24:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000a28:	f3c4 4703 	ubfx	r7, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a2c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000a30:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000a34:	b2ff      	uxtb	r7, r7
 8000a36:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000a3a:	f3c4 1703 	ubfx	r7, r4, #4, #4
 8000a3e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a40:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000a44:	f004 070f 	and.w	r7, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a48:	5dcf      	ldrb	r7, [r1, r7]
 8000a4a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000a4e:	b2ff      	uxtb	r7, r7
 8000a50:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000a54:	eb03 7814 	add.w	r8, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000a58:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a5c:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000a60:	5d1c      	ldrb	r4, [r3, r4]
 8000a62:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000a66:	ea47 6704 	orr.w	r7, r7, r4, lsl #24
    S.full = n2 ^ rotated;
 8000a6a:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000a6e:	e9c0 5600 	strd	r5, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000a72:	6914      	ldr	r4, [r2, #16]
 8000a74:	4434      	add	r4, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000a76:	f3c4 5703 	ubfx	r7, r4, #20, #4
 8000a7a:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a7c:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000a80:	f3c4 4703 	ubfx	r7, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a84:	f81e 7007 	ldrb.w	r7, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000a88:	f3c4 3803 	ubfx	r8, r4, #12, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a8c:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000a90:	f108 0810 	add.w	r8, r8, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000a94:	f81c 9008 	ldrb.w	r9, [ip, r8]
        result |= ((uint32_t)subst_result << (8 * m));
 8000a98:	fa5f f887 	uxtb.w	r8, r7
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000a9c:	f3c4 2703 	ubfx	r7, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000aa0:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000aa4:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000aa8:	b2ff      	uxtb	r7, r7
 8000aaa:	023f      	lsls	r7, r7, #8
 8000aac:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000ab0:	f3c4 1803 	ubfx	r8, r4, #4, #4
 8000ab4:	f108 0810 	add.w	r8, r8, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ab8:	f811 9008 	ldrb.w	r9, [r1, r8]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000abc:	f004 080f 	and.w	r8, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ac0:	f811 8008 	ldrb.w	r8, [r1, r8]
 8000ac4:	ea48 1809 	orr.w	r8, r8, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000ac8:	fa5f f888 	uxtb.w	r8, r8
 8000acc:	ea47 0808 	orr.w	r8, r7, r8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000ad0:	eb03 7714 	add.w	r7, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000ad4:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ad8:	7c3f      	ldrb	r7, [r7, #16]
 8000ada:	5d1c      	ldrb	r4, [r3, r4]
 8000adc:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000ae0:	ea48 6404 	orr.w	r4, r8, r4, lsl #24
    S.full = n2 ^ rotated;
 8000ae4:	ea85 5874 	eor.w	r8, r5, r4, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000ae8:	e9c0 6800 	strd	r6, r8, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000aec:	6955      	ldr	r5, [r2, #20]
 8000aee:	eb08 0405 	add.w	r4, r8, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000af2:	f3c4 3503 	ubfx	r5, r4, #12, #4
 8000af6:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000af8:	f81c 7005 	ldrb.w	r7, [ip, r5]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000afc:	f3c4 5503 	ubfx	r5, r4, #20, #4
 8000b00:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b02:	f81e 9005 	ldrb.w	r9, [lr, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000b06:	f3c4 2503 	ubfx	r5, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b0a:	f81c 5005 	ldrb.w	r5, [ip, r5]
 8000b0e:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000b12:	b2ed      	uxtb	r5, r5
 8000b14:	022f      	lsls	r7, r5, #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000b16:	f3c4 4503 	ubfx	r5, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b1a:	f81e 5005 	ldrb.w	r5, [lr, r5]
 8000b1e:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000b22:	b2ed      	uxtb	r5, r5
 8000b24:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000b28:	f3c4 1503 	ubfx	r5, r4, #4, #4
 8000b2c:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b2e:	f811 9005 	ldrb.w	r9, [r1, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000b32:	f004 050f 	and.w	r5, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b36:	5d4d      	ldrb	r5, [r1, r5]
 8000b38:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000b3c:	b2ed      	uxtb	r5, r5
 8000b3e:	433d      	orrs	r5, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000b40:	eb03 7714 	add.w	r7, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000b44:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b48:	7c3f      	ldrb	r7, [r7, #16]
 8000b4a:	5d1c      	ldrb	r4, [r3, r4]
 8000b4c:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000b50:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
    S.full = n2 ^ rotated;
 8000b54:	ea86 5775 	eor.w	r7, r6, r5, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000b58:	e9c0 8700 	strd	r8, r7, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000b5c:	6995      	ldr	r5, [r2, #24]
 8000b5e:	197c      	adds	r4, r7, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000b60:	f3c4 3503 	ubfx	r5, r4, #12, #4
 8000b64:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b66:	f81c 6005 	ldrb.w	r6, [ip, r5]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000b6a:	f3c4 5503 	ubfx	r5, r4, #20, #4
 8000b6e:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b70:	f81e 9005 	ldrb.w	r9, [lr, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000b74:	f3c4 2503 	ubfx	r5, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b78:	f81c 5005 	ldrb.w	r5, [ip, r5]
 8000b7c:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000b80:	b2ed      	uxtb	r5, r5
 8000b82:	022e      	lsls	r6, r5, #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000b84:	f3c4 4503 	ubfx	r5, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b88:	f81e 5005 	ldrb.w	r5, [lr, r5]
 8000b8c:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000b90:	b2ed      	uxtb	r5, r5
 8000b92:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000b96:	f3c4 1503 	ubfx	r5, r4, #4, #4
 8000b9a:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000b9c:	f811 9005 	ldrb.w	r9, [r1, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000ba0:	f004 050f 	and.w	r5, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ba4:	5d4d      	ldrb	r5, [r1, r5]
 8000ba6:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000baa:	b2ed      	uxtb	r5, r5
 8000bac:	4335      	orrs	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000bae:	eb03 7614 	add.w	r6, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000bb2:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000bb6:	7c36      	ldrb	r6, [r6, #16]
 8000bb8:	5d1c      	ldrb	r4, [r3, r4]
 8000bba:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000bbe:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
    S.full = n2 ^ rotated;
 8000bc2:	ea88 5475 	eor.w	r4, r8, r5, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000bc6:	e9c0 7400 	strd	r7, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000bca:	69d6      	ldr	r6, [r2, #28]
 8000bcc:	19a5      	adds	r5, r4, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000bce:	f3c5 5603 	ubfx	r6, r5, #20, #4
 8000bd2:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000bd4:	f81e 9006 	ldrb.w	r9, [lr, r6]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000bd8:	f3c5 3603 	ubfx	r6, r5, #12, #4
 8000bdc:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000bde:	f81c 8006 	ldrb.w	r8, [ip, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000be2:	f3c5 2603 	ubfx	r6, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000be6:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8000bea:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000bee:	b2f6      	uxtb	r6, r6
 8000bf0:	ea4f 2806 	mov.w	r8, r6, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000bf4:	f3c5 4603 	ubfx	r6, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000bf8:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8000bfc:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000c00:	b2f6      	uxtb	r6, r6
 8000c02:	ea48 4806 	orr.w	r8, r8, r6, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000c06:	f3c5 1603 	ubfx	r6, r5, #4, #4
 8000c0a:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c0c:	f811 9006 	ldrb.w	r9, [r1, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000c10:	f005 060f 	and.w	r6, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c14:	5d8e      	ldrb	r6, [r1, r6]
 8000c16:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000c1a:	b2f6      	uxtb	r6, r6
 8000c1c:	ea48 0606 	orr.w	r6, r8, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000c20:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000c24:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c28:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000c2c:	5d5d      	ldrb	r5, [r3, r5]
 8000c2e:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000c32:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    S.full = n2 ^ rotated;
 8000c36:	ea87 5576 	eor.w	r5, r7, r6, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000c3a:	e9c0 4500 	strd	r4, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000c3e:	69d6      	ldr	r6, [r2, #28]
 8000c40:	442e      	add	r6, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000c42:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8000c46:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c48:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000c4c:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8000c50:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c52:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000c56:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c5a:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000c5e:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000c62:	b2ff      	uxtb	r7, r7
 8000c64:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000c68:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c6c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000c70:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000c74:	b2ff      	uxtb	r7, r7
 8000c76:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000c7a:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8000c7e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c80:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000c84:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c88:	5dcf      	ldrb	r7, [r1, r7]
 8000c8a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000c8e:	b2ff      	uxtb	r7, r7
 8000c90:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000c94:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000c98:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000c9c:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000ca0:	5d9e      	ldrb	r6, [r3, r6]
 8000ca2:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000ca6:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8000caa:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000cae:	e9c0 5400 	strd	r5, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000cb2:	6996      	ldr	r6, [r2, #24]
 8000cb4:	4426      	add	r6, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000cb6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8000cba:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000cbc:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000cc0:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8000cc4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000cc6:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000cca:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000cce:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000cd2:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000cd6:	b2ff      	uxtb	r7, r7
 8000cd8:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000cdc:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ce0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000ce4:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000ce8:	b2ff      	uxtb	r7, r7
 8000cea:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000cee:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8000cf2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000cf4:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000cf8:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000cfc:	5dcf      	ldrb	r7, [r1, r7]
 8000cfe:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000d02:	b2ff      	uxtb	r7, r7
 8000d04:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000d08:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000d0c:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000d10:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000d14:	5d9e      	ldrb	r6, [r3, r6]
 8000d16:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000d1a:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8000d1e:	ea85 5577 	eor.w	r5, r5, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000d22:	e9c0 4500 	strd	r4, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000d26:	6956      	ldr	r6, [r2, #20]
 8000d28:	442e      	add	r6, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000d2a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8000d2e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000d30:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000d34:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8000d38:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000d3a:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000d3e:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000d42:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000d46:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000d4a:	b2ff      	uxtb	r7, r7
 8000d4c:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000d50:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000d54:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000d58:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000d5c:	b2ff      	uxtb	r7, r7
 8000d5e:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000d62:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8000d66:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000d68:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000d6c:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000d70:	5dcf      	ldrb	r7, [r1, r7]
 8000d72:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000d76:	b2ff      	uxtb	r7, r7
 8000d78:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000d7c:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000d80:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000d84:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000d88:	5d9e      	ldrb	r6, [r3, r6]
 8000d8a:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000d8e:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8000d92:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000d96:	e9c0 5400 	strd	r5, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000d9a:	6916      	ldr	r6, [r2, #16]
 8000d9c:	4426      	add	r6, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000d9e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8000da2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000da4:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000da8:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8000dac:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000dae:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000db2:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000db6:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000dba:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000dbe:	b2ff      	uxtb	r7, r7
 8000dc0:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000dc4:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000dc8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000dcc:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000dd0:	b2ff      	uxtb	r7, r7
 8000dd2:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000dd6:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8000dda:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ddc:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000de0:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000de4:	5dcf      	ldrb	r7, [r1, r7]
 8000de6:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000dea:	b2ff      	uxtb	r7, r7
 8000dec:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000df0:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000df4:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000df8:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000dfc:	5d9e      	ldrb	r6, [r3, r6]
 8000dfe:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000e02:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8000e06:	ea85 5577 	eor.w	r5, r5, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000e0a:	e9c0 4500 	strd	r4, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000e0e:	68d6      	ldr	r6, [r2, #12]
 8000e10:	442e      	add	r6, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000e12:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8000e16:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e18:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000e1c:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8000e20:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e22:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000e26:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e2a:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000e2e:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000e32:	b2ff      	uxtb	r7, r7
 8000e34:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000e38:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e3c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000e40:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000e44:	b2ff      	uxtb	r7, r7
 8000e46:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000e4a:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8000e4e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e50:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000e54:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e58:	5dcf      	ldrb	r7, [r1, r7]
 8000e5a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000e5e:	b2ff      	uxtb	r7, r7
 8000e60:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000e64:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000e68:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e6c:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000e70:	5d9e      	ldrb	r6, [r3, r6]
 8000e72:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000e76:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8000e7a:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000e7e:	e9c0 5400 	strd	r5, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000e82:	6896      	ldr	r6, [r2, #8]
 8000e84:	4426      	add	r6, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000e86:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8000e8a:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e8c:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000e90:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8000e94:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e96:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000e9a:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000e9e:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000ea2:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000ea6:	b2ff      	uxtb	r7, r7
 8000ea8:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000eac:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000eb0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000eb4:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000eb8:	b2ff      	uxtb	r7, r7
 8000eba:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000ebe:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8000ec2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ec4:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000ec8:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ecc:	5dcf      	ldrb	r7, [r1, r7]
 8000ece:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000ed2:	b2ff      	uxtb	r7, r7
 8000ed4:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000ed8:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000edc:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ee0:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000ee4:	5d9e      	ldrb	r6, [r3, r6]
 8000ee6:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000eea:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8000eee:	ea85 5577 	eor.w	r5, r5, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000ef2:	e9c0 4500 	strd	r4, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000ef6:	6856      	ldr	r6, [r2, #4]
 8000ef8:	442e      	add	r6, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000efa:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8000efe:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f00:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000f04:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8000f08:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f0a:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000f0e:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f12:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8000f16:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000f1a:	b2ff      	uxtb	r7, r7
 8000f1c:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000f20:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f24:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8000f28:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000f2c:	b2ff      	uxtb	r7, r7
 8000f2e:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000f32:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8000f36:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f38:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000f3c:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f40:	5dcf      	ldrb	r7, [r1, r7]
 8000f42:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000f46:	b2ff      	uxtb	r7, r7
 8000f48:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000f4c:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000f50:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f54:	5d9e      	ldrb	r6, [r3, r6]
 8000f56:	f898 8010 	ldrb.w	r8, [r8, #16]
 8000f5a:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000f5e:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8000f62:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000f66:	e9c0 5400 	strd	r5, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	4422      	add	r2, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000f6e:	f3c2 5403 	ubfx	r4, r2, #20, #4
 8000f72:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f74:	f81e 6004 	ldrb.w	r6, [lr, r4]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000f78:	f3c2 3403 	ubfx	r4, r2, #12, #4
 8000f7c:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f7e:	f81c 7004 	ldrb.w	r7, [ip, r4]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000f82:	f3c2 4403 	ubfx	r4, r2, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f86:	f81e 4004 	ldrb.w	r4, [lr, r4]
 8000f8a:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000f8e:	f3c2 2603 	ubfx	r6, r2, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f92:	f81c 6006 	ldrb.w	r6, [ip, r6]
        result |= ((uint32_t)subst_result << (8 * m));
 8000f96:	b2e4      	uxtb	r4, r4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000f98:	ea46 1607 	orr.w	r6, r6, r7, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000f9c:	b2f6      	uxtb	r6, r6
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000fa4:	f3c2 1603 	ubfx	r6, r2, #4, #4
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000fa8:	f002 070f 	and.w	r7, r2, #15
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000fac:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000fae:	5d8e      	ldrb	r6, [r1, r6]
 8000fb0:	5dc9      	ldrb	r1, [r1, r7]
 8000fb2:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000fb6:	b2c9      	uxtb	r1, r1
 8000fb8:	4321      	orrs	r1, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000fba:	eb03 7412 	add.w	r4, r3, r2, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000fbe:	f3c2 6203 	ubfx	r2, r2, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000fc2:	5c9b      	ldrb	r3, [r3, r2]
 8000fc4:	7c22      	ldrb	r2, [r4, #16]
 8000fc6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8000fca:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    S.full = n2 ^ rotated;
 8000fce:	ea85 5573 	eor.w	r5, r5, r3, ror #21
        (*DATA).half[_GOST_Data_Part_N2_Half] = S.full; // N2=S
 8000fd2:	6005      	str	r5, [r0, #0]
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[4], _GOST_Next_Step);
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[3], _GOST_Next_Step);
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[2], _GOST_Next_Step);
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[1], _GOST_Next_Step);
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[0], _GOST_Last_Step);
}
 8000fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000fd8 <GOST_Crypt_32_D_Cicle>:
(вместо старшого полубайта 0)
@param GOST_Key - 32хбитная часть ключа(СК).
*/
//Basic 32-P decryption algorithm of GOST, usefull only in SR mode
void GOST_Crypt_32_D_Cicle(GOST_Data_Part *DATA, uint8_t *GOST_Table, uint32_t *GOST_Key)
{
 8000fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000fdc:	6847      	ldr	r7, [r0, #4]
 8000fde:	6814      	ldr	r4, [r2, #0]
        GOST_Table += 2 * _GOST_TABLE_MAX_NODE_VALUE;
 8000fe0:	f101 0e40 	add.w	lr, r1, #64	@ 0x40
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000fe4:	443c      	add	r4, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000fe6:	f3c4 5303 	ubfx	r3, r4, #20, #4
 8000fea:	3310      	adds	r3, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000fec:	f81e 6003 	ldrb.w	r6, [lr, r3]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8000ff0:	f3c4 4303 	ubfx	r3, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8000ff4:	f81e 3003 	ldrb.w	r3, [lr, r3]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8000ff8:	f3c4 3503 	ubfx	r5, r4, #12, #4
        GOST_Table += 2 * _GOST_TABLE_MAX_NODE_VALUE;
 8000ffc:	f101 0c20 	add.w	ip, r1, #32
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001000:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001002:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8001006:	f81c 6005 	ldrb.w	r6, [ip, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800100a:	f3c4 2503 	ubfx	r5, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800100e:	f81c 5005 	ldrb.w	r5, [ip, r5]
        result |= ((uint32_t)subst_result << (8 * m));
 8001012:	b2db      	uxtb	r3, r3
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001014:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001018:	b2ed      	uxtb	r5, r5
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001020:	f3c4 1503 	ubfx	r5, r4, #4, #4
 8001024:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001026:	5d4e      	ldrb	r6, [r1, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001028:	f004 050f 	and.w	r5, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800102c:	5d4d      	ldrb	r5, [r1, r5]
 800102e:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001032:	b2ed      	uxtb	r5, r5
 8001034:	431d      	orrs	r5, r3
        GOST_Table += 2 * _GOST_TABLE_MAX_NODE_VALUE;
 8001036:	f101 0360 	add.w	r3, r1, #96	@ 0x60
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800103a:	eb03 7614 	add.w	r6, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800103e:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001042:	7c36      	ldrb	r6, [r6, #16]
 8001044:	5d1c      	ldrb	r4, [r3, r4]
 8001046:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    S.full = n2 ^ rotated;
 800104a:	6806      	ldr	r6, [r0, #0]
        result |= ((uint32_t)subst_result << (8 * m));
 800104c:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
    S.full = n2 ^ rotated;
 8001050:	ea86 5674 	eor.w	r6, r6, r4, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001054:	e9c0 7600 	strd	r7, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001058:	6855      	ldr	r5, [r2, #4]
 800105a:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800105c:	f3c5 5403 	ubfx	r4, r5, #20, #4
 8001060:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001062:	f81e 9004 	ldrb.w	r9, [lr, r4]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001066:	f3c5 3403 	ubfx	r4, r5, #12, #4
 800106a:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800106c:	f81c 8004 	ldrb.w	r8, [ip, r4]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001070:	f3c5 4403 	ubfx	r4, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001074:	f81e 4004 	ldrb.w	r4, [lr, r4]
 8001078:	ea44 1409 	orr.w	r4, r4, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800107c:	b2e4      	uxtb	r4, r4
 800107e:	ea4f 4904 	mov.w	r9, r4, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001082:	f3c5 2403 	ubfx	r4, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001086:	f81c 4004 	ldrb.w	r4, [ip, r4]
 800108a:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800108e:	b2e4      	uxtb	r4, r4
 8001090:	ea49 2904 	orr.w	r9, r9, r4, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001094:	f3c5 1403 	ubfx	r4, r5, #4, #4
 8001098:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800109a:	f811 8004 	ldrb.w	r8, [r1, r4]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800109e:	f005 040f 	and.w	r4, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80010a2:	5d0c      	ldrb	r4, [r1, r4]
 80010a4:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80010a8:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80010ac:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80010b0:	f898 8010 	ldrb.w	r8, [r8, #16]
 80010b4:	5d5d      	ldrb	r5, [r3, r5]
        result |= ((uint32_t)subst_result << (8 * m));
 80010b6:	b2e4      	uxtb	r4, r4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80010b8:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80010bc:	ea49 0404 	orr.w	r4, r9, r4
 80010c0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    S.full = n2 ^ rotated;
 80010c4:	ea87 5474 	eor.w	r4, r7, r4, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80010c8:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80010cc:	6895      	ldr	r5, [r2, #8]
 80010ce:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80010d0:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80010d4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80010d6:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80010da:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80010de:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80010e0:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80010e4:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80010e8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80010ec:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80010f0:	b2ff      	uxtb	r7, r7
 80010f2:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80010f6:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80010fa:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80010fe:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001102:	b2ff      	uxtb	r7, r7
 8001104:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001108:	f3c5 1703 	ubfx	r7, r5, #4, #4
 800110c:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800110e:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001112:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001116:	5dcf      	ldrb	r7, [r1, r7]
 8001118:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800111c:	b2ff      	uxtb	r7, r7
 800111e:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001122:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001126:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800112a:	f898 8010 	ldrb.w	r8, [r8, #16]
 800112e:	5d5d      	ldrb	r5, [r3, r5]
 8001130:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001134:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8001138:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800113c:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001140:	68d5      	ldr	r5, [r2, #12]
 8001142:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001144:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8001148:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800114a:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800114e:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8001152:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001154:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001158:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800115c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001160:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001164:	b2ff      	uxtb	r7, r7
 8001166:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800116a:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800116e:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001172:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001176:	b2ff      	uxtb	r7, r7
 8001178:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800117c:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8001180:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001182:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001186:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800118a:	5dcf      	ldrb	r7, [r1, r7]
 800118c:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001190:	b2ff      	uxtb	r7, r7
 8001192:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001196:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800119a:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800119e:	f898 8010 	ldrb.w	r8, [r8, #16]
 80011a2:	5d5d      	ldrb	r5, [r3, r5]
 80011a4:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80011a8:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80011ac:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80011b0:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80011b4:	6915      	ldr	r5, [r2, #16]
 80011b6:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80011b8:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80011bc:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80011be:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80011c2:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80011c6:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80011c8:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80011cc:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80011d0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80011d4:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80011d8:	b2ff      	uxtb	r7, r7
 80011da:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80011de:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80011e2:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80011e6:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80011ea:	b2ff      	uxtb	r7, r7
 80011ec:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80011f0:	f3c5 1703 	ubfx	r7, r5, #4, #4
 80011f4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80011f6:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80011fa:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80011fe:	5dcf      	ldrb	r7, [r1, r7]
 8001200:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001204:	b2ff      	uxtb	r7, r7
 8001206:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800120a:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800120e:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001212:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001216:	5d5d      	ldrb	r5, [r3, r5]
 8001218:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800121c:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8001220:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001224:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001228:	6955      	ldr	r5, [r2, #20]
 800122a:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800122c:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8001230:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001232:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001236:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800123a:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800123c:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001240:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001244:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001248:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800124c:	b2ff      	uxtb	r7, r7
 800124e:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001252:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001256:	f81c 7007 	ldrb.w	r7, [ip, r7]
 800125a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800125e:	b2ff      	uxtb	r7, r7
 8001260:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001264:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8001268:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800126a:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800126e:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001272:	5dcf      	ldrb	r7, [r1, r7]
 8001274:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001278:	b2ff      	uxtb	r7, r7
 800127a:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800127e:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001282:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001286:	f898 8010 	ldrb.w	r8, [r8, #16]
 800128a:	5d5d      	ldrb	r5, [r3, r5]
 800128c:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001290:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8001294:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001298:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800129c:	6995      	ldr	r5, [r2, #24]
 800129e:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80012a0:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80012a4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80012a6:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80012aa:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80012ae:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80012b0:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80012b4:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80012b8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80012bc:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80012c0:	b2ff      	uxtb	r7, r7
 80012c2:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80012c6:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80012ca:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80012ce:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80012d2:	b2ff      	uxtb	r7, r7
 80012d4:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80012d8:	f3c5 1703 	ubfx	r7, r5, #4, #4
 80012dc:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80012de:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80012e2:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80012e6:	5dcf      	ldrb	r7, [r1, r7]
 80012e8:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80012ec:	b2ff      	uxtb	r7, r7
 80012ee:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80012f2:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80012f6:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80012fa:	f898 8010 	ldrb.w	r8, [r8, #16]
 80012fe:	5d5d      	ldrb	r5, [r3, r5]
 8001300:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001304:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8001308:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800130c:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001310:	69d5      	ldr	r5, [r2, #28]
 8001312:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001314:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8001318:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800131a:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800131e:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8001322:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001324:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001328:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800132c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001330:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001334:	b2ff      	uxtb	r7, r7
 8001336:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800133a:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800133e:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001342:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001346:	b2ff      	uxtb	r7, r7
 8001348:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800134c:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8001350:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001352:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001356:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800135a:	5dcf      	ldrb	r7, [r1, r7]
 800135c:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001360:	b2ff      	uxtb	r7, r7
 8001362:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001366:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800136a:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800136e:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001372:	5d5d      	ldrb	r5, [r3, r5]
 8001374:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001378:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 800137c:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001380:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001384:	69d5      	ldr	r5, [r2, #28]
 8001386:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001388:	f3c5 5703 	ubfx	r7, r5, #20, #4
 800138c:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800138e:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001392:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8001396:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001398:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800139c:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80013a0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80013a4:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80013a8:	b2ff      	uxtb	r7, r7
 80013aa:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80013ae:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80013b2:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80013b6:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80013ba:	b2ff      	uxtb	r7, r7
 80013bc:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80013c0:	f3c5 1703 	ubfx	r7, r5, #4, #4
 80013c4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80013c6:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80013ca:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80013ce:	5dcf      	ldrb	r7, [r1, r7]
 80013d0:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80013d4:	b2ff      	uxtb	r7, r7
 80013d6:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80013da:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80013de:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80013e2:	f898 8010 	ldrb.w	r8, [r8, #16]
 80013e6:	5d5d      	ldrb	r5, [r3, r5]
 80013e8:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80013ec:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80013f0:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80013f4:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80013f8:	6995      	ldr	r5, [r2, #24]
 80013fa:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80013fc:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8001400:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001402:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001406:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800140a:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800140c:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001410:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001414:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001418:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800141c:	b2ff      	uxtb	r7, r7
 800141e:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001422:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001426:	f81c 7007 	ldrb.w	r7, [ip, r7]
 800142a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800142e:	b2ff      	uxtb	r7, r7
 8001430:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001434:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8001438:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800143a:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800143e:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001442:	5dcf      	ldrb	r7, [r1, r7]
 8001444:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001448:	b2ff      	uxtb	r7, r7
 800144a:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800144e:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001452:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001456:	f898 8010 	ldrb.w	r8, [r8, #16]
 800145a:	5d5d      	ldrb	r5, [r3, r5]
 800145c:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001460:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8001464:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001468:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800146c:	6955      	ldr	r5, [r2, #20]
 800146e:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001470:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8001474:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001476:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800147a:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800147e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001480:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001484:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001488:	f81e 7007 	ldrb.w	r7, [lr, r7]
 800148c:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001490:	b2ff      	uxtb	r7, r7
 8001492:	ea4f 4807 	mov.w	r8, r7, lsl #16
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001496:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800149a:	f81c 7007 	ldrb.w	r7, [ip, r7]
 800149e:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80014a2:	b2ff      	uxtb	r7, r7
 80014a4:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80014a8:	f3c5 1703 	ubfx	r7, r5, #4, #4
 80014ac:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80014ae:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80014b2:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80014b6:	5dcf      	ldrb	r7, [r1, r7]
 80014b8:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80014bc:	b2ff      	uxtb	r7, r7
 80014be:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80014c2:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80014c6:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80014ca:	f898 8010 	ldrb.w	r8, [r8, #16]
 80014ce:	5d5d      	ldrb	r5, [r3, r5]
 80014d0:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80014d4:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80014d8:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80014dc:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80014e0:	6915      	ldr	r5, [r2, #16]
 80014e2:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80014e4:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80014e8:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80014ea:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80014ee:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80014f2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80014f4:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80014f8:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80014fc:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001500:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001504:	b2ff      	uxtb	r7, r7
 8001506:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800150a:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800150e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001512:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001516:	b2ff      	uxtb	r7, r7
 8001518:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800151c:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8001520:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001522:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001526:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800152a:	5dcf      	ldrb	r7, [r1, r7]
 800152c:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001530:	b2ff      	uxtb	r7, r7
 8001532:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001536:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800153a:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800153e:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001542:	5d5d      	ldrb	r5, [r3, r5]
 8001544:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001548:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 800154c:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001550:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001554:	68d5      	ldr	r5, [r2, #12]
 8001556:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001558:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800155c:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800155e:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001562:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8001566:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001568:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800156c:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001570:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001574:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001578:	b2ff      	uxtb	r7, r7
 800157a:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800157e:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001582:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001586:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800158a:	b2ff      	uxtb	r7, r7
 800158c:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001590:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8001594:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001596:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800159a:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800159e:	5dcf      	ldrb	r7, [r1, r7]
 80015a0:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80015a4:	b2ff      	uxtb	r7, r7
 80015a6:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80015aa:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80015ae:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80015b2:	f898 8010 	ldrb.w	r8, [r8, #16]
 80015b6:	5d5d      	ldrb	r5, [r3, r5]
 80015b8:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80015bc:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80015c0:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80015c4:	e9c0 4600 	strd	r4, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80015c8:	6895      	ldr	r5, [r2, #8]
 80015ca:	4435      	add	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80015cc:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80015d0:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80015d2:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80015d6:	f3c5 5703 	ubfx	r7, r5, #20, #4
 80015da:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80015dc:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80015e0:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80015e4:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80015e8:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80015ec:	b2ff      	uxtb	r7, r7
 80015ee:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80015f2:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80015f6:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80015fa:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80015fe:	b2ff      	uxtb	r7, r7
 8001600:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001604:	f3c5 1703 	ubfx	r7, r5, #4, #4
 8001608:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800160a:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800160e:	f005 070f 	and.w	r7, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001612:	5dcf      	ldrb	r7, [r1, r7]
 8001614:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001618:	b2ff      	uxtb	r7, r7
 800161a:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800161e:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001622:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001626:	f898 8010 	ldrb.w	r8, [r8, #16]
 800162a:	5d5d      	ldrb	r5, [r3, r5]
 800162c:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001630:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 8001634:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001638:	e9c0 6400 	strd	r6, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800163c:	6855      	ldr	r5, [r2, #4]
 800163e:	4425      	add	r5, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001640:	f3c5 5703 	ubfx	r7, r5, #20, #4
 8001644:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001646:	f81e 8007 	ldrb.w	r8, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800164a:	f3c5 3703 	ubfx	r7, r5, #12, #4
 800164e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001650:	f81c 9007 	ldrb.w	r9, [ip, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001654:	f3c5 4703 	ubfx	r7, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001658:	f81e 7007 	ldrb.w	r7, [lr, r7]
 800165c:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001660:	fa5f f887 	uxtb.w	r8, r7
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001664:	f3c5 2703 	ubfx	r7, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001668:	f81c 7007 	ldrb.w	r7, [ip, r7]
 800166c:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001670:	b2ff      	uxtb	r7, r7
 8001672:	023f      	lsls	r7, r7, #8
 8001674:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001678:	f3c5 1803 	ubfx	r8, r5, #4, #4
 800167c:	f108 0810 	add.w	r8, r8, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001680:	f811 9008 	ldrb.w	r9, [r1, r8]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001684:	f005 080f 	and.w	r8, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001688:	f811 8008 	ldrb.w	r8, [r1, r8]
 800168c:	ea48 1809 	orr.w	r8, r8, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001690:	fa5f f888 	uxtb.w	r8, r8
 8001694:	ea47 0708 	orr.w	r7, r7, r8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001698:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800169c:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80016a0:	f898 8010 	ldrb.w	r8, [r8, #16]
 80016a4:	5d5d      	ldrb	r5, [r3, r5]
 80016a6:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80016aa:	ea47 6705 	orr.w	r7, r7, r5, lsl #24
    S.full = n2 ^ rotated;
 80016ae:	ea86 5777 	eor.w	r7, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80016b2:	e9c0 4700 	strd	r4, r7, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80016b6:	6816      	ldr	r6, [r2, #0]
 80016b8:	19bd      	adds	r5, r7, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80016ba:	f3c5 3603 	ubfx	r6, r5, #12, #4
 80016be:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80016c0:	f81c 8006 	ldrb.w	r8, [ip, r6]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80016c4:	f3c5 5603 	ubfx	r6, r5, #20, #4
 80016c8:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80016ca:	f81e 9006 	ldrb.w	r9, [lr, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80016ce:	f3c5 2603 	ubfx	r6, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80016d2:	f81c 6006 	ldrb.w	r6, [ip, r6]
 80016d6:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80016da:	b2f6      	uxtb	r6, r6
 80016dc:	ea4f 2806 	mov.w	r8, r6, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80016e0:	f3c5 4603 	ubfx	r6, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80016e4:	f81e 6006 	ldrb.w	r6, [lr, r6]
 80016e8:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80016ec:	b2f6      	uxtb	r6, r6
 80016ee:	ea48 4806 	orr.w	r8, r8, r6, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80016f2:	f3c5 1603 	ubfx	r6, r5, #4, #4
 80016f6:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80016f8:	f811 9006 	ldrb.w	r9, [r1, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80016fc:	f005 060f 	and.w	r6, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001700:	5d8e      	ldrb	r6, [r1, r6]
 8001702:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001706:	b2f6      	uxtb	r6, r6
 8001708:	ea48 0606 	orr.w	r6, r8, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800170c:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001710:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001714:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001718:	5d5d      	ldrb	r5, [r3, r5]
 800171a:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800171e:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    S.full = n2 ^ rotated;
 8001722:	ea84 5476 	eor.w	r4, r4, r6, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001726:	e9c0 7400 	strd	r7, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800172a:	69d6      	ldr	r6, [r2, #28]
 800172c:	19a5      	adds	r5, r4, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800172e:	f3c5 3603 	ubfx	r6, r5, #12, #4
 8001732:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001734:	f81c 8006 	ldrb.w	r8, [ip, r6]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001738:	f3c5 5603 	ubfx	r6, r5, #20, #4
 800173c:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800173e:	f81e 9006 	ldrb.w	r9, [lr, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001742:	f3c5 2603 	ubfx	r6, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001746:	f81c 6006 	ldrb.w	r6, [ip, r6]
 800174a:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800174e:	b2f6      	uxtb	r6, r6
 8001750:	ea4f 2806 	mov.w	r8, r6, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001754:	f3c5 4603 	ubfx	r6, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001758:	f81e 6006 	ldrb.w	r6, [lr, r6]
 800175c:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001760:	b2f6      	uxtb	r6, r6
 8001762:	ea48 4806 	orr.w	r8, r8, r6, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001766:	f3c5 1603 	ubfx	r6, r5, #4, #4
 800176a:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800176c:	f811 9006 	ldrb.w	r9, [r1, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001770:	f005 060f 	and.w	r6, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001774:	5d8e      	ldrb	r6, [r1, r6]
 8001776:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800177a:	b2f6      	uxtb	r6, r6
 800177c:	ea48 0606 	orr.w	r6, r8, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001780:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001784:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001788:	f898 8010 	ldrb.w	r8, [r8, #16]
 800178c:	5d5d      	ldrb	r5, [r3, r5]
 800178e:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001792:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    S.full = n2 ^ rotated;
 8001796:	ea87 5776 	eor.w	r7, r7, r6, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800179a:	e9c0 4700 	strd	r4, r7, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800179e:	6996      	ldr	r6, [r2, #24]
 80017a0:	19bd      	adds	r5, r7, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80017a2:	f3c5 5603 	ubfx	r6, r5, #20, #4
 80017a6:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80017a8:	f81e 9006 	ldrb.w	r9, [lr, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80017ac:	f3c5 4603 	ubfx	r6, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80017b0:	f81e 6006 	ldrb.w	r6, [lr, r6]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80017b4:	f3c5 3803 	ubfx	r8, r5, #12, #4
 80017b8:	f108 0810 	add.w	r8, r8, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80017bc:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
 80017c0:	f81c 9008 	ldrb.w	r9, [ip, r8]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80017c4:	f3c5 2803 	ubfx	r8, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80017c8:	f81c 8008 	ldrb.w	r8, [ip, r8]
        result |= ((uint32_t)subst_result << (8 * m));
 80017cc:	b2f6      	uxtb	r6, r6
        uint8_t subst_result = low_subst | (high_subst << 4);
 80017ce:	ea48 1809 	orr.w	r8, r8, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80017d2:	fa5f f888 	uxtb.w	r8, r8
 80017d6:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80017da:	ea48 4806 	orr.w	r8, r8, r6, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80017de:	f3c5 1603 	ubfx	r6, r5, #4, #4
 80017e2:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80017e4:	f811 9006 	ldrb.w	r9, [r1, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80017e8:	f005 060f 	and.w	r6, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80017ec:	5d8e      	ldrb	r6, [r1, r6]
 80017ee:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80017f2:	b2f6      	uxtb	r6, r6
 80017f4:	ea48 0606 	orr.w	r6, r8, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80017f8:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80017fc:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001800:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001804:	5d5d      	ldrb	r5, [r3, r5]
 8001806:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800180a:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    S.full = n2 ^ rotated;
 800180e:	ea84 5676 	eor.w	r6, r4, r6, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001812:	e9c0 7600 	strd	r7, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001816:	6954      	ldr	r4, [r2, #20]
 8001818:	4434      	add	r4, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800181a:	f3c4 3503 	ubfx	r5, r4, #12, #4
 800181e:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001820:	f81c 8005 	ldrb.w	r8, [ip, r5]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001824:	f3c4 5503 	ubfx	r5, r4, #20, #4
 8001828:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800182a:	f81e 9005 	ldrb.w	r9, [lr, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800182e:	f3c4 2503 	ubfx	r5, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001832:	f81c 5005 	ldrb.w	r5, [ip, r5]
 8001836:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800183a:	b2ed      	uxtb	r5, r5
 800183c:	ea4f 2805 	mov.w	r8, r5, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001840:	f3c4 4503 	ubfx	r5, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001844:	f81e 5005 	ldrb.w	r5, [lr, r5]
 8001848:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800184c:	b2ed      	uxtb	r5, r5
 800184e:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001852:	f3c4 1503 	ubfx	r5, r4, #4, #4
 8001856:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001858:	f811 9005 	ldrb.w	r9, [r1, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800185c:	f004 050f 	and.w	r5, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001860:	5d4d      	ldrb	r5, [r1, r5]
 8001862:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001866:	b2ed      	uxtb	r5, r5
 8001868:	ea48 0505 	orr.w	r5, r8, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800186c:	eb03 7814 	add.w	r8, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001870:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001874:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001878:	5d1c      	ldrb	r4, [r3, r4]
 800187a:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800187e:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
    S.full = n2 ^ rotated;
 8001882:	ea87 5575 	eor.w	r5, r7, r5, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001886:	e9c0 6500 	strd	r6, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800188a:	6914      	ldr	r4, [r2, #16]
 800188c:	442c      	add	r4, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800188e:	f3c4 3703 	ubfx	r7, r4, #12, #4
 8001892:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001894:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001898:	f3c4 5703 	ubfx	r7, r4, #20, #4
 800189c:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800189e:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80018a2:	f3c4 2703 	ubfx	r7, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80018a6:	f81c 7007 	ldrb.w	r7, [ip, r7]
 80018aa:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80018ae:	b2ff      	uxtb	r7, r7
 80018b0:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80018b4:	f3c4 4703 	ubfx	r7, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80018b8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80018bc:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80018c0:	b2ff      	uxtb	r7, r7
 80018c2:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80018c6:	f3c4 1703 	ubfx	r7, r4, #4, #4
 80018ca:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80018cc:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80018d0:	f004 070f 	and.w	r7, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80018d4:	5dcf      	ldrb	r7, [r1, r7]
 80018d6:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80018da:	b2ff      	uxtb	r7, r7
 80018dc:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80018e0:	eb03 7814 	add.w	r8, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80018e4:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80018e8:	f898 8010 	ldrb.w	r8, [r8, #16]
 80018ec:	5d1c      	ldrb	r4, [r3, r4]
 80018ee:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80018f2:	ea47 6704 	orr.w	r7, r7, r4, lsl #24
    S.full = n2 ^ rotated;
 80018f6:	ea86 5677 	eor.w	r6, r6, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80018fa:	e9c0 5600 	strd	r5, r6, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80018fe:	68d4      	ldr	r4, [r2, #12]
 8001900:	4434      	add	r4, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001902:	f3c4 5703 	ubfx	r7, r4, #20, #4
 8001906:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001908:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 800190c:	f3c4 4703 	ubfx	r7, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001910:	f81e 7007 	ldrb.w	r7, [lr, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001914:	f3c4 3803 	ubfx	r8, r4, #12, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001918:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800191c:	f108 0810 	add.w	r8, r8, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001920:	f81c 9008 	ldrb.w	r9, [ip, r8]
        result |= ((uint32_t)subst_result << (8 * m));
 8001924:	fa5f f887 	uxtb.w	r8, r7
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001928:	f3c4 2703 	ubfx	r7, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 800192c:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001930:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001934:	b2ff      	uxtb	r7, r7
 8001936:	023f      	lsls	r7, r7, #8
 8001938:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800193c:	f3c4 1803 	ubfx	r8, r4, #4, #4
 8001940:	f108 0810 	add.w	r8, r8, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001944:	f811 9008 	ldrb.w	r9, [r1, r8]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001948:	f004 080f 	and.w	r8, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 800194c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8001950:	ea48 1809 	orr.w	r8, r8, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001954:	fa5f f888 	uxtb.w	r8, r8
 8001958:	ea47 0808 	orr.w	r8, r7, r8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800195c:	eb03 7714 	add.w	r7, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001960:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001964:	7c3f      	ldrb	r7, [r7, #16]
 8001966:	5d1c      	ldrb	r4, [r3, r4]
 8001968:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800196c:	ea48 6404 	orr.w	r4, r8, r4, lsl #24
    S.full = n2 ^ rotated;
 8001970:	ea85 5874 	eor.w	r8, r5, r4, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001974:	e9c0 6800 	strd	r6, r8, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001978:	6895      	ldr	r5, [r2, #8]
 800197a:	eb08 0405 	add.w	r4, r8, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 800197e:	f3c4 3503 	ubfx	r5, r4, #12, #4
 8001982:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001984:	f81c 7005 	ldrb.w	r7, [ip, r5]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001988:	f3c4 5503 	ubfx	r5, r4, #20, #4
 800198c:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 800198e:	f81e 9005 	ldrb.w	r9, [lr, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001992:	f3c4 2503 	ubfx	r5, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001996:	f81c 5005 	ldrb.w	r5, [ip, r5]
 800199a:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 800199e:	b2ed      	uxtb	r5, r5
 80019a0:	022f      	lsls	r7, r5, #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80019a2:	f3c4 4503 	ubfx	r5, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80019a6:	f81e 5005 	ldrb.w	r5, [lr, r5]
 80019aa:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80019ae:	b2ed      	uxtb	r5, r5
 80019b0:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80019b4:	f3c4 1503 	ubfx	r5, r4, #4, #4
 80019b8:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80019ba:	f811 9005 	ldrb.w	r9, [r1, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80019be:	f004 050f 	and.w	r5, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 80019c2:	5d4d      	ldrb	r5, [r1, r5]
 80019c4:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80019c8:	b2ed      	uxtb	r5, r5
 80019ca:	433d      	orrs	r5, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80019cc:	eb03 7714 	add.w	r7, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 80019d0:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 80019d4:	7c3f      	ldrb	r7, [r7, #16]
 80019d6:	5d1c      	ldrb	r4, [r3, r4]
 80019d8:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 80019dc:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
    S.full = n2 ^ rotated;
 80019e0:	ea86 5775 	eor.w	r7, r6, r5, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80019e4:	e9c0 8700 	strd	r8, r7, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80019e8:	6855      	ldr	r5, [r2, #4]
 80019ea:	197c      	adds	r4, r7, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80019ec:	f3c4 3503 	ubfx	r5, r4, #12, #4
 80019f0:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80019f2:	f81c 6005 	ldrb.w	r6, [ip, r5]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 80019f6:	f3c4 5503 	ubfx	r5, r4, #20, #4
 80019fa:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 80019fc:	f81e 9005 	ldrb.w	r9, [lr, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001a00:	f3c4 2503 	ubfx	r5, r4, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a04:	f81c 5005 	ldrb.w	r5, [ip, r5]
 8001a08:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001a0c:	b2ed      	uxtb	r5, r5
 8001a0e:	022e      	lsls	r6, r5, #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001a10:	f3c4 4503 	ubfx	r5, r4, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a14:	f81e 5005 	ldrb.w	r5, [lr, r5]
 8001a18:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001a1c:	b2ed      	uxtb	r5, r5
 8001a1e:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001a22:	f3c4 1503 	ubfx	r5, r4, #4, #4
 8001a26:	3510      	adds	r5, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a28:	f811 9005 	ldrb.w	r9, [r1, r5]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001a2c:	f004 050f 	and.w	r5, r4, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a30:	5d4d      	ldrb	r5, [r1, r5]
 8001a32:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001a36:	b2ed      	uxtb	r5, r5
 8001a38:	4335      	orrs	r5, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001a3a:	eb03 7614 	add.w	r6, r3, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001a3e:	f3c4 6403 	ubfx	r4, r4, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a42:	7c36      	ldrb	r6, [r6, #16]
 8001a44:	5d1c      	ldrb	r4, [r3, r4]
 8001a46:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001a4a:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
    S.full = n2 ^ rotated;
 8001a4e:	ea88 5475 	eor.w	r4, r8, r5, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001a52:	e9c0 7400 	strd	r7, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001a56:	6816      	ldr	r6, [r2, #0]
 8001a58:	19a5      	adds	r5, r4, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001a5a:	f3c5 5603 	ubfx	r6, r5, #20, #4
 8001a5e:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a60:	f81e 9006 	ldrb.w	r9, [lr, r6]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001a64:	f3c5 3603 	ubfx	r6, r5, #12, #4
 8001a68:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a6a:	f81c 8006 	ldrb.w	r8, [ip, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001a6e:	f3c5 2603 	ubfx	r6, r5, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a72:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8001a76:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001a7a:	b2f6      	uxtb	r6, r6
 8001a7c:	ea4f 2806 	mov.w	r8, r6, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001a80:	f3c5 4603 	ubfx	r6, r5, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a84:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8001a88:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001a8c:	b2f6      	uxtb	r6, r6
 8001a8e:	ea48 4806 	orr.w	r8, r8, r6, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001a92:	f3c5 1603 	ubfx	r6, r5, #4, #4
 8001a96:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001a98:	f811 9006 	ldrb.w	r9, [r1, r6]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001a9c:	f005 060f 	and.w	r6, r5, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001aa0:	5d8e      	ldrb	r6, [r1, r6]
 8001aa2:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001aa6:	b2f6      	uxtb	r6, r6
 8001aa8:	ea48 0606 	orr.w	r6, r8, r6
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001aac:	eb03 7815 	add.w	r8, r3, r5, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001ab0:	f3c5 6503 	ubfx	r5, r5, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001ab4:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001ab8:	5d5d      	ldrb	r5, [r3, r5]
 8001aba:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001abe:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    S.full = n2 ^ rotated;
 8001ac2:	ea87 5576 	eor.w	r5, r7, r6, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001ac6:	e9c0 4500 	strd	r4, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001aca:	69d6      	ldr	r6, [r2, #28]
 8001acc:	442e      	add	r6, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001ace:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8001ad2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001ad4:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001ad8:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8001adc:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001ade:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001ae2:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001ae6:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001aea:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001aee:	b2ff      	uxtb	r7, r7
 8001af0:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001af4:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001af8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001afc:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001b00:	b2ff      	uxtb	r7, r7
 8001b02:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001b06:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8001b0a:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b0c:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001b10:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b14:	5dcf      	ldrb	r7, [r1, r7]
 8001b16:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001b1a:	b2ff      	uxtb	r7, r7
 8001b1c:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001b20:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001b24:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b28:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001b2c:	5d9e      	ldrb	r6, [r3, r6]
 8001b2e:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001b32:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8001b36:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001b3a:	e9c0 5400 	strd	r5, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001b3e:	6996      	ldr	r6, [r2, #24]
 8001b40:	4426      	add	r6, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001b42:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8001b46:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b48:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001b4c:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8001b50:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b52:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001b56:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b5a:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001b5e:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001b62:	b2ff      	uxtb	r7, r7
 8001b64:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001b68:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b6c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001b70:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001b74:	b2ff      	uxtb	r7, r7
 8001b76:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001b7a:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8001b7e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b80:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001b84:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b88:	5dcf      	ldrb	r7, [r1, r7]
 8001b8a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001b8e:	b2ff      	uxtb	r7, r7
 8001b90:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001b94:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001b98:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001b9c:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001ba0:	5d9e      	ldrb	r6, [r3, r6]
 8001ba2:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001ba6:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8001baa:	ea85 5577 	eor.w	r5, r5, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001bae:	e9c0 4500 	strd	r4, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001bb2:	6956      	ldr	r6, [r2, #20]
 8001bb4:	442e      	add	r6, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001bb6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8001bba:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001bbc:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001bc0:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8001bc4:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001bc6:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001bca:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001bce:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001bd2:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001bd6:	b2ff      	uxtb	r7, r7
 8001bd8:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001bdc:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001be0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001be4:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001be8:	b2ff      	uxtb	r7, r7
 8001bea:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001bee:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8001bf2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001bf4:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001bf8:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001bfc:	5dcf      	ldrb	r7, [r1, r7]
 8001bfe:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001c02:	b2ff      	uxtb	r7, r7
 8001c04:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001c08:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001c0c:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001c10:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001c14:	5d9e      	ldrb	r6, [r3, r6]
 8001c16:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001c1a:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8001c1e:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001c22:	e9c0 5400 	strd	r5, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001c26:	6916      	ldr	r6, [r2, #16]
 8001c28:	4426      	add	r6, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001c2a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8001c2e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001c30:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001c34:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8001c38:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001c3a:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001c3e:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001c42:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001c46:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001c4a:	b2ff      	uxtb	r7, r7
 8001c4c:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001c50:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001c54:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001c58:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001c5c:	b2ff      	uxtb	r7, r7
 8001c5e:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001c62:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8001c66:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001c68:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001c6c:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001c70:	5dcf      	ldrb	r7, [r1, r7]
 8001c72:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001c76:	b2ff      	uxtb	r7, r7
 8001c78:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001c7c:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001c80:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001c84:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001c88:	5d9e      	ldrb	r6, [r3, r6]
 8001c8a:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001c8e:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8001c92:	ea85 5577 	eor.w	r5, r5, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001c96:	e9c0 4500 	strd	r4, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001c9a:	68d6      	ldr	r6, [r2, #12]
 8001c9c:	442e      	add	r6, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001c9e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8001ca2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001ca4:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001ca8:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8001cac:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001cae:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001cb2:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001cb6:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001cba:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001cbe:	b2ff      	uxtb	r7, r7
 8001cc0:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001cc4:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001cc8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001ccc:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001cd0:	b2ff      	uxtb	r7, r7
 8001cd2:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001cd6:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8001cda:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001cdc:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001ce0:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001ce4:	5dcf      	ldrb	r7, [r1, r7]
 8001ce6:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001cea:	b2ff      	uxtb	r7, r7
 8001cec:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001cf0:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001cf4:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001cf8:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001cfc:	5d9e      	ldrb	r6, [r3, r6]
 8001cfe:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001d02:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8001d06:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001d0a:	e9c0 5400 	strd	r5, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001d0e:	6896      	ldr	r6, [r2, #8]
 8001d10:	4426      	add	r6, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001d12:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8001d16:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d18:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001d1c:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8001d20:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d22:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001d26:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d2a:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001d2e:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001d32:	b2ff      	uxtb	r7, r7
 8001d34:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001d38:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d3c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001d40:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001d44:	b2ff      	uxtb	r7, r7
 8001d46:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001d4a:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8001d4e:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d50:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001d54:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d58:	5dcf      	ldrb	r7, [r1, r7]
 8001d5a:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001d5e:	b2ff      	uxtb	r7, r7
 8001d60:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001d64:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001d68:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d6c:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001d70:	5d9e      	ldrb	r6, [r3, r6]
 8001d72:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001d76:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8001d7a:	ea85 5577 	eor.w	r5, r5, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001d7e:	e9c0 4500 	strd	r4, r5, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001d82:	6856      	ldr	r6, [r2, #4]
 8001d84:	442e      	add	r6, r5
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001d86:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8001d8a:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d8c:	f81c 8007 	ldrb.w	r8, [ip, r7]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001d90:	f3c6 5703 	ubfx	r7, r6, #20, #4
 8001d94:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d96:	f81e 9007 	ldrb.w	r9, [lr, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001d9a:	f3c6 2703 	ubfx	r7, r6, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001d9e:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8001da2:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001da6:	b2ff      	uxtb	r7, r7
 8001da8:	ea4f 2807 	mov.w	r8, r7, lsl #8
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001dac:	f3c6 4703 	ubfx	r7, r6, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001db0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8001db4:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001db8:	b2ff      	uxtb	r7, r7
 8001dba:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001dbe:	f3c6 1703 	ubfx	r7, r6, #4, #4
 8001dc2:	3710      	adds	r7, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001dc4:	f811 9007 	ldrb.w	r9, [r1, r7]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001dc8:	f006 070f 	and.w	r7, r6, #15
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001dcc:	5dcf      	ldrb	r7, [r1, r7]
 8001dce:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001dd2:	b2ff      	uxtb	r7, r7
 8001dd4:	ea48 0707 	orr.w	r7, r8, r7
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001dd8:	eb03 7816 	add.w	r8, r3, r6, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001ddc:	f3c6 6603 	ubfx	r6, r6, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001de0:	5d9e      	ldrb	r6, [r3, r6]
 8001de2:	f898 8010 	ldrb.w	r8, [r8, #16]
 8001de6:	ea46 1608 	orr.w	r6, r6, r8, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001dea:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    S.full = n2 ^ rotated;
 8001dee:	ea84 5477 	eor.w	r4, r4, r7, ror #21
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8001df2:	e9c0 5400 	strd	r5, r4, [r0]
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4422      	add	r2, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001dfa:	f3c2 5403 	ubfx	r4, r2, #20, #4
 8001dfe:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001e00:	f81e 6004 	ldrb.w	r6, [lr, r4]
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001e04:	f3c2 3403 	ubfx	r4, r2, #12, #4
 8001e08:	3410      	adds	r4, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001e0a:	f81c 7004 	ldrb.w	r7, [ip, r4]
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001e0e:	f3c2 4403 	ubfx	r4, r2, #16, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001e12:	f81e 4004 	ldrb.w	r4, [lr, r4]
 8001e16:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001e1a:	f3c2 2603 	ubfx	r6, r2, #8, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001e1e:	f81c 6006 	ldrb.w	r6, [ip, r6]
        result |= ((uint32_t)subst_result << (8 * m));
 8001e22:	b2e4      	uxtb	r4, r4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001e24:	ea46 1607 	orr.w	r6, r6, r7, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001e28:	b2f6      	uxtb	r6, r6
 8001e2a:	0424      	lsls	r4, r4, #16
 8001e2c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001e30:	f3c2 1603 	ubfx	r6, r2, #4, #4
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001e34:	f002 070f 	and.w	r7, r2, #15
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001e38:	3610      	adds	r6, #16
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001e3a:	5d8e      	ldrb	r6, [r1, r6]
 8001e3c:	5dc9      	ldrb	r1, [r1, r7]
 8001e3e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001e42:	b2c9      	uxtb	r1, r1
 8001e44:	4321      	orrs	r1, r4
        uint8_t high_subst = *(GOST_Table + _GOST_TABLE_MAX_NODE_VALUE + ((val >> 4) & 0x0F));
 8001e46:	eb03 7412 	add.w	r4, r3, r2, lsr #28
        uint8_t low_subst = *(GOST_Table + (val & 0x0F));
 8001e4a:	f3c2 6203 	ubfx	r2, r2, #24, #4
        uint8_t subst_result = low_subst | (high_subst << 4);
 8001e4e:	5c9b      	ldrb	r3, [r3, r2]
 8001e50:	7c22      	ldrb	r2, [r4, #16]
 8001e52:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
        result |= ((uint32_t)subst_result << (8 * m));
 8001e56:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    S.full = n2 ^ rotated;
 8001e5a:	ea85 5573 	eor.w	r5, r5, r3, ror #21
        (*DATA).half[_GOST_Data_Part_N2_Half] = S.full; // N2=S
 8001e5e:	6005      	str	r5, [r0, #0]
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[4], _GOST_Next_Step);
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[3], _GOST_Next_Step);
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[2], _GOST_Next_Step);
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[1], _GOST_Next_Step);
    GOST_Crypt_Step(DATA, GOST_Table, GOST_Key[0], _GOST_Last_Step);
}
 8001e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001e64 <GOST_Encrypt_SR>:
@param Mode - Если _GOST_Mode_Encrypt шифрования, _GOST_Mode_Decrypt - расшифрование
@param *GOST_Table - Указатель на таблицу замены ГОСТ(ДК) в 128 байтном формате
(вместо старшого полубайта 0)
@param *GOST_Key - Указатель на 256 битный массив ключа(СК).
*/
void GOST_Encrypt_SR(uint8_t *Data, uint32_t Size, bool Mode, uint8_t *GOST_Table, uint8_t *GOST_Key ) {
 8001e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GOST_Data_Part Data_prep;
    uint32_t *GOST_Key_pt = (uint32_t *) GOST_Key;

    while (Size >= _GOST_Part_Size) {
 8001e68:	2907      	cmp	r1, #7
void GOST_Encrypt_SR(uint8_t *Data, uint32_t Size, bool Mode, uint8_t *GOST_Table, uint8_t *GOST_Key ) {
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	4688      	mov	r8, r1
 8001e6e:	4681      	mov	r9, r0
 8001e70:	461e      	mov	r6, r3
 8001e72:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8001e74:	9200      	str	r2, [sp, #0]
    while (Size >= _GOST_Part_Size) {
 8001e76:	d931      	bls.n	8001edc <GOST_Encrypt_SR+0x78>
 8001e78:	f1a1 0508 	sub.w	r5, r1, #8
 8001e7c:	bba2      	cbnz	r2, 8001ee8 <GOST_Encrypt_SR+0x84>
 8001e7e:	f025 0b07 	bic.w	fp, r5, #7
 8001e82:	f100 0a08 	add.w	sl, r0, #8
 8001e86:	08ed      	lsrs	r5, r5, #3
 8001e88:	9501      	str	r5, [sp, #4]
 8001e8a:	4655      	mov	r5, sl
 8001e8c:	f100 0310 	add.w	r3, r0, #16
 8001e90:	449b      	add	fp, r3
 8001e92:	ac02      	add	r4, sp, #8
        // Process full blocks directly without memcpy/memset
        Data_prep = *((GOST_Data_Part *)Data);
 8001e94:	f1a5 0a08 	sub.w	sl, r5, #8
 8001e98:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8001e9c:	e884 0003 	stmia.w	r4, {r0, r1}
        
#if _GOST_ROT==1
        // Use the optimized byte-swap macro
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001ea0:	9802      	ldr	r0, [sp, #8]
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
#endif
        if (Mode == _GOST_Mode_Encrypt) {
            GOST_Crypt_32_E_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
        } else {
            GOST_Crypt_32_D_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001ea2:	463a      	mov	r2, r7
 8001ea4:	ba00      	rev	r0, r0
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001ea6:	9002      	str	r0, [sp, #8]
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001ea8:	9803      	ldr	r0, [sp, #12]
            GOST_Crypt_32_D_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001eaa:	4631      	mov	r1, r6
 8001eac:	ba00      	rev	r0, r0
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001eae:	9003      	str	r0, [sp, #12]
            GOST_Crypt_32_D_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7ff f891 	bl	8000fd8 <GOST_Crypt_32_D_Cicle>
        }
#if _GOST_ROT==1
        // Use the optimized byte-swap macro
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001eb6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8001eba:	ba09      	rev	r1, r1
 8001ebc:	ba12      	rev	r2, r2
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001ebe:	e9cd 1202 	strd	r1, r2, [sp, #8]
    while (Size >= _GOST_Part_Size) {
 8001ec2:	3508      	adds	r5, #8
 8001ec4:	455d      	cmp	r5, fp
#endif
        // Copy result directly back to Data
        *((GOST_Data_Part *)Data) = Data_prep;
 8001ec6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eca:	e88a 0003 	stmia.w	sl, {r0, r1}
    while (Size >= _GOST_Part_Size) {
 8001ece:	d1e1      	bne.n	8001e94 <GOST_Encrypt_SR+0x30>
 8001ed0:	9d01      	ldr	r5, [sp, #4]
 8001ed2:	f008 0807 	and.w	r8, r8, #7
 8001ed6:	3501      	adds	r5, #1
 8001ed8:	eb09 09c5 	add.w	r9, r9, r5, lsl #3
        Data += _GOST_Part_Size;
        Size -= _GOST_Part_Size;
    }
    
    // Handle remaining partial block if any
    if (Size > 0) {
 8001edc:	f1b8 0f00 	cmp.w	r8, #0
 8001ee0:	d132      	bne.n	8001f48 <GOST_Encrypt_SR+0xe4>
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
#endif
        memcpy(Data, &Data_prep, Size);
    }
}
 8001ee2:	b005      	add	sp, #20
 8001ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ee8:	f025 0307 	bic.w	r3, r5, #7
 8001eec:	f100 0a08 	add.w	sl, r0, #8
 8001ef0:	08ed      	lsrs	r5, r5, #3
 8001ef2:	9501      	str	r5, [sp, #4]
 8001ef4:	4655      	mov	r5, sl
 8001ef6:	f100 0b10 	add.w	fp, r0, #16
 8001efa:	449b      	add	fp, r3
 8001efc:	ac02      	add	r4, sp, #8
        Data_prep = *((GOST_Data_Part *)Data);
 8001efe:	f1a5 0a08 	sub.w	sl, r5, #8
 8001f02:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8001f06:	e884 0003 	stmia.w	r4, {r0, r1}
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001f0a:	9802      	ldr	r0, [sp, #8]
            GOST_Crypt_32_E_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001f0c:	463a      	mov	r2, r7
 8001f0e:	ba00      	rev	r0, r0
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001f10:	9002      	str	r0, [sp, #8]
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001f12:	9803      	ldr	r0, [sp, #12]
            GOST_Crypt_32_E_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001f14:	4631      	mov	r1, r6
 8001f16:	ba00      	rev	r0, r0
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001f18:	9003      	str	r0, [sp, #12]
            GOST_Crypt_32_E_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe f916 	bl	800014c <GOST_Crypt_32_E_Cicle>
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001f20:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8001f24:	ba09      	rev	r1, r1
 8001f26:	ba12      	rev	r2, r2
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001f28:	e9cd 1202 	strd	r1, r2, [sp, #8]
    while (Size >= _GOST_Part_Size) {
 8001f2c:	3508      	adds	r5, #8
 8001f2e:	455d      	cmp	r5, fp
        *((GOST_Data_Part *)Data) = Data_prep;
 8001f30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f34:	e88a 0003 	stmia.w	sl, {r0, r1}
    while (Size >= _GOST_Part_Size) {
 8001f38:	d1e1      	bne.n	8001efe <GOST_Encrypt_SR+0x9a>
 8001f3a:	9d01      	ldr	r5, [sp, #4]
 8001f3c:	f008 0807 	and.w	r8, r8, #7
 8001f40:	3501      	adds	r5, #1
 8001f42:	eb09 09c5 	add.w	r9, r9, r5, lsl #3
 8001f46:	e7c9      	b.n	8001edc <GOST_Encrypt_SR+0x78>
        memset(&Data_prep, _GOST_Def_Byte, sizeof(Data_prep));
 8001f48:	2300      	movs	r3, #0
 8001f4a:	ac02      	add	r4, sp, #8
        memcpy(&Data_prep, Data, Size);
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	4649      	mov	r1, r9
 8001f50:	4620      	mov	r0, r4
        memset(&Data_prep, _GOST_Def_Byte, sizeof(Data_prep));
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	6063      	str	r3, [r4, #4]
        memcpy(&Data_prep, Data, Size);
 8001f56:	f001 f8cd 	bl	80030f4 <memcpy>
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001f5a:	9b02      	ldr	r3, [sp, #8]
            GOST_Crypt_32_E_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001f5c:	463a      	mov	r2, r7
 8001f5e:	ba1b      	rev	r3, r3
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001f60:	9302      	str	r3, [sp, #8]
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001f62:	9b03      	ldr	r3, [sp, #12]
            GOST_Crypt_32_E_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001f64:	4631      	mov	r1, r6
 8001f66:	ba1b      	rev	r3, r3
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001f68:	9303      	str	r3, [sp, #12]
        if (Mode == _GOST_Mode_Encrypt) {
 8001f6a:	9b00      	ldr	r3, [sp, #0]
            GOST_Crypt_32_E_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001f6c:	4620      	mov	r0, r4
        if (Mode == _GOST_Mode_Encrypt) {
 8001f6e:	b97b      	cbnz	r3, 8001f90 <GOST_Encrypt_SR+0x12c>
            GOST_Crypt_32_D_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001f70:	f7ff f832 	bl	8000fd8 <GOST_Crypt_32_D_Cicle>
        Data_prep.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8001f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        memcpy(Data, &Data_prep, Size);
 8001f78:	4621      	mov	r1, r4
 8001f7a:	ba15      	rev	r5, r2
 8001f7c:	ba1b      	rev	r3, r3
 8001f7e:	4642      	mov	r2, r8
 8001f80:	4648      	mov	r0, r9
        Data_prep.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8001f82:	e9cd 5302 	strd	r5, r3, [sp, #8]
        memcpy(Data, &Data_prep, Size);
 8001f86:	f001 f8b5 	bl	80030f4 <memcpy>
}
 8001f8a:	b005      	add	sp, #20
 8001f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            GOST_Crypt_32_E_Cicle(&Data_prep, GOST_Table, GOST_Key_pt);
 8001f90:	f7fe f8dc 	bl	800014c <GOST_Crypt_32_E_Cicle>
 8001f94:	e7ee      	b.n	8001f74 <GOST_Encrypt_SR+0x110>
 8001f96:	bf00      	nop

08001f98 <gost_main>:
// }



/* GOST test function */
int gost_main() {
 8001f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9c:	f2ad 4dcc 	subw	sp, sp, #1228	@ 0x4cc
    // Define the 256-bit key (32 bytes)
    uint8_t key[32] = {
 8001fa0:	ae0a      	add	r6, sp, #40	@ 0x28
 8001fa2:	4635      	mov	r5, r6
 8001fa4:	4c4e      	ldr	r4, [pc, #312]	@ (80020e0 <gost_main+0x148>)
 8001fa6:	f10d 0a67 	add.w	sl, sp, #103	@ 0x67
 8001faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    };

    // Define a sample S-box (128 bytes, 8 rows of 16 nibbles)
    // Note: Replace with the actual GOST S-box for correct operation
    uint8_t sbox[128] = {
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	f104 0110 	add.w	r1, r4, #16
 8001fbc:	a812      	add	r0, sp, #72	@ 0x48
 8001fbe:	f001 f899 	bl	80030f4 <memcpy>
    0x09, 0x0B, 0x0C, 0x00, 0x03, 0x06, 0x07, 0x05, 0x04, 0x08, 0x0E, 0x0F, 0x01, 0x0A, 0x02, 0x0D,
    0x0C, 0x06, 0x05, 0x02, 0x0B, 0x00, 0x09, 0x0D, 0x03, 0x0E, 0x07, 0x0A, 0x0F, 0x04, 0x01, 0x08
    };

    uint8_t sbox2[4*256];
    for(int i = 0; i < 4; i++){
 8001fc2:	aa32      	add	r2, sp, #200	@ 0xc8
    uint8_t sbox[128] = {
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4618      	mov	r0, r3
      for(int j = 0; j < 16; j++)
      for(int k = 0; k < 16; k++){
        sbox2[i*256+j*16+k] = sbox[i*32+j+16]*16 + sbox[i*32+k];
 8001fcc:	4601      	mov	r1, r0
 8001fce:	f85a bc1f 	ldr.w	fp, [sl, #-31]
 8001fd2:	f85a 9c1b 	ldr.w	r9, [sl, #-27]
 8001fd6:	f00b 337f 	and.w	r3, fp, #2139062143	@ 0x7f7f7f7f
 8001fda:	f85a 8c17 	ldr.w	r8, [sl, #-23]
 8001fde:	f85a ec13 	ldr.w	lr, [sl, #-19]
 8001fe2:	9305      	str	r3, [sp, #20]
 8001fe4:	f009 337f 	and.w	r3, r9, #2139062143	@ 0x7f7f7f7f
 8001fe8:	9304      	str	r3, [sp, #16]
 8001fea:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8001fee:	f008 337f 	and.w	r3, r8, #2139062143	@ 0x7f7f7f7f
 8001ff2:	9303      	str	r3, [sp, #12]
 8001ff4:	f00e 337f 	and.w	r3, lr, #2139062143	@ 0x7f7f7f7f
 8001ff8:	f1aa 0c10 	sub.w	ip, sl, #16
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	2300      	movs	r3, #0
 8002000:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8002004:	9d05      	ldr	r5, [sp, #20]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f362 0307 	bfi	r3, r2, #0, #8
 800200e:	f362 230f 	bfi	r3, r2, #8, #8
 8002012:	f362 4317 	bfi	r3, r2, #16, #8
 8002016:	f362 631f 	bfi	r3, r2, #24, #8
 800201a:	f003 327f 	and.w	r2, r3, #2139062143	@ 0x7f7f7f7f
 800201e:	ea8b 0703 	eor.w	r7, fp, r3
 8002022:	4415      	add	r5, r2
 8002024:	f007 3780 	and.w	r7, r7, #2155905152	@ 0x80808080
      for(int j = 0; j < 16; j++)
 8002028:	3110      	adds	r1, #16
        sbox2[i*256+j*16+k] = sbox[i*32+j+16]*16 + sbox[i*32+k];
 800202a:	407d      	eors	r5, r7
 800202c:	f841 5c10 	str.w	r5, [r1, #-16]
 8002030:	9d04      	ldr	r5, [sp, #16]
 8002032:	ea89 0403 	eor.w	r4, r9, r3
 8002036:	4415      	add	r5, r2
 8002038:	f004 3480 	and.w	r4, r4, #2155905152	@ 0x80808080
 800203c:	406c      	eors	r4, r5
 800203e:	f841 4c0c 	str.w	r4, [r1, #-12]
 8002042:	9c03      	ldr	r4, [sp, #12]
 8002044:	ea88 0003 	eor.w	r0, r8, r3
 8002048:	4414      	add	r4, r2
 800204a:	f000 3080 	and.w	r0, r0, #2155905152	@ 0x80808080
 800204e:	4060      	eors	r0, r4
 8002050:	f841 0c08 	str.w	r0, [r1, #-8]
 8002054:	9802      	ldr	r0, [sp, #8]
 8002056:	ea8e 0303 	eor.w	r3, lr, r3
 800205a:	f003 3380 	and.w	r3, r3, #2155905152	@ 0x80808080
 800205e:	4402      	add	r2, r0
 8002060:	4053      	eors	r3, r2
      for(int j = 0; j < 16; j++)
 8002062:	45e2      	cmp	sl, ip
        sbox2[i*256+j*16+k] = sbox[i*32+j+16]*16 + sbox[i*32+k];
 8002064:	f841 3c04 	str.w	r3, [r1, #-4]
      for(int j = 0; j < 16; j++)
 8002068:	d1c9      	bne.n	8001ffe <gost_main+0x66>
    for(int i = 0; i < 4; i++){
 800206a:	e9dd 2006 	ldrd	r2, r0, [sp, #24]
 800206e:	3210      	adds	r2, #16
 8002070:	2a40      	cmp	r2, #64	@ 0x40
 8002072:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8002076:	f10a 0a20 	add.w	sl, sl, #32
 800207a:	d1a7      	bne.n	8001fcc <gost_main+0x34>
      }
    }

    // Define plaintext (64-bit block, 8 bytes)
    uint8_t plaintext[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800207c:	2200      	movs	r2, #0
    int result = 0;

    // Measure performance: Encrypt multiple times
    uint32_t iterations = 20000;
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 800207e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002082:	4818      	ldr	r0, [pc, #96]	@ (80020e4 <gost_main+0x14c>)
    uint8_t plaintext[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002084:	e9cd 2208 	strd	r2, r2, [sp, #32]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8002088:	f000 fc0a 	bl	80028a0 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                          // Wait 3 seconds
 800208c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002090:	f000 f988 	bl	80023a4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 8002094:	2201      	movs	r2, #1
 8002096:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800209a:	4812      	ldr	r0, [pc, #72]	@ (80020e4 <gost_main+0x14c>)
 800209c:	f000 fc00 	bl	80028a0 <HAL_GPIO_WritePin>
 80020a0:	f644 6420 	movw	r4, #20000	@ 0x4e20

    // uint32_t start_time = HAL_GetTick();
    for (uint32_t i = 0; i < iterations; i++) {
        GOST_Encrypt_SR(plaintext, 8, _GOST_Mode_Encrypt, sbox2, key);
 80020a4:	2201      	movs	r2, #1
 80020a6:	2108      	movs	r1, #8
 80020a8:	ab32      	add	r3, sp, #200	@ 0xc8
 80020aa:	a808      	add	r0, sp, #32
 80020ac:	9600      	str	r6, [sp, #0]
 80020ae:	f7ff fed9 	bl	8001e64 <GOST_Encrypt_SR>
    for (uint32_t i = 0; i < iterations; i++) {
 80020b2:	3c01      	subs	r4, #1
 80020b4:	d1f6      	bne.n	80020a4 <gost_main+0x10c>
    }
    // uint32_t end_time = HAL_GetTick();
    // uint32_t elapsed = end_time - start_time;
    
    // Indicate test result via LED
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 80020b6:	4622      	mov	r2, r4
 80020b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020bc:	4809      	ldr	r0, [pc, #36]	@ (80020e4 <gost_main+0x14c>)
 80020be:	f000 fbef 	bl	80028a0 <HAL_GPIO_WritePin>
    HAL_Delay(3000);
 80020c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80020c6:	f000 f96d 	bl	80023a4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <gost_main+0x14c>)
 80020d2:	f000 fbe5 	bl	80028a0 <HAL_GPIO_WritePin>

    return result;
}
 80020d6:	4620      	mov	r0, r4
 80020d8:	f20d 4dcc 	addw	sp, sp, #1228	@ 0x4cc
 80020dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e0:	08003128 	.word	0x08003128
 80020e4:	40011000 	.word	0x40011000

080020e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e8:	b530      	push	{r4, r5, lr}
 80020ea:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ec:	2224      	movs	r2, #36	@ 0x24
 80020ee:	2100      	movs	r1, #0
 80020f0:	a807      	add	r0, sp, #28
 80020f2:	f000 ffd3 	bl	800309c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f6:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f8:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020fa:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020fc:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020fe:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002100:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002104:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002108:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800210c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002110:	f000 fbca 	bl	80028a8 <HAL_RCC_OscConfig>
 8002114:	b108      	cbz	r0, 800211a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002116:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002118:	e7fe      	b.n	8002118 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800211a:	4601      	mov	r1, r0
 800211c:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800211e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002120:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002124:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002128:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800212a:	f000 fdab 	bl	8002c84 <HAL_RCC_ClockConfig>
 800212e:	b108      	cbz	r0, 8002134 <SystemClock_Config+0x4c>
 8002130:	b672      	cpsid	i
  while (1)
 8002132:	e7fe      	b.n	8002132 <SystemClock_Config+0x4a>
}
 8002134:	b011      	add	sp, #68	@ 0x44
 8002136:	bd30      	pop	{r4, r5, pc}

08002138 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	2400      	movs	r4, #0
{
 800213a:	b500      	push	{lr}
 800213c:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 800213e:	f000 f90d 	bl	800235c <HAL_Init>
  SystemClock_Config();
 8002142:	f7ff ffd1 	bl	80020e8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002146:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800214a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214e:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <main+0xe8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002150:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002154:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002156:	4833      	ldr	r0, [pc, #204]	@ (8002224 <main+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002158:	f042 0210 	orr.w	r2, r2, #16
 800215c:	619a      	str	r2, [r3, #24]
 800215e:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8002160:	4d31      	ldr	r5, [pc, #196]	@ (8002228 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002162:	f002 0210 	and.w	r2, r2, #16
 8002166:	9200      	str	r2, [sp, #0]
 8002168:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	f042 0204 	orr.w	r2, r2, #4
 8002170:	619a      	str	r2, [r3, #24]
 8002172:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002174:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800217e:	f000 fb8f 	bl	80028a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002182:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	e9cd 1204 	strd	r1, r2, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218e:	4825      	ldr	r0, [pc, #148]	@ (8002224 <main+0xec>)
 8002190:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f000 f97d 	bl	8002494 <HAL_GPIO_Init>
  htim1.Init.Period = 65535;
 800219a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim1.Instance = TIM1;
 800219e:	4a23      	ldr	r2, [pc, #140]	@ (800222c <main+0xf4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021a0:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80021a6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 80021ae:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Instance = TIM1;
 80021b2:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = 65535;
 80021b4:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b6:	9402      	str	r4, [sp, #8]
  htim1.Init.RepetitionCounter = 0;
 80021b8:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ba:	9403      	str	r4, [sp, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021bc:	f000 fe24 	bl	8002e08 <HAL_TIM_Base_Init>
 80021c0:	b108      	cbz	r0, 80021c6 <main+0x8e>
 80021c2:	b672      	cpsid	i
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <main+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021ca:	4628      	mov	r0, r5
 80021cc:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ce:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021d0:	f000 fe88 	bl	8002ee4 <HAL_TIM_ConfigClockSource>
 80021d4:	b108      	cbz	r0, 80021da <main+0xa2>
 80021d6:	b672      	cpsid	i
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <main+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021da:	2200      	movs	r2, #0
 80021dc:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021de:	4628      	mov	r0, r5
 80021e0:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e6:	f000 ff27 	bl	8003038 <HAL_TIMEx_MasterConfigSynchronization>
 80021ea:	b108      	cbz	r0, 80021f0 <main+0xb8>
 80021ec:	b672      	cpsid	i
  while (1)
 80021ee:	e7fe      	b.n	80021ee <main+0xb6>
  gost_main();
 80021f0:	f7ff fed2 	bl	8001f98 <gost_main>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80021f4:	4c0b      	ldr	r4, [pc, #44]	@ (8002224 <main+0xec>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021fc:	4620      	mov	r0, r4
 80021fe:	f000 fb4f 	bl	80028a0 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 8002202:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002206:	f000 f8cd 	bl	80023a4 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800220a:	4620      	mov	r0, r4
 800220c:	2200      	movs	r2, #0
 800220e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002212:	f000 fb45 	bl	80028a0 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 8002216:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800221a:	f000 f8c3 	bl	80023a4 <HAL_Delay>
  while (1)
 800221e:	e7ea      	b.n	80021f6 <main+0xbe>
 8002220:	40021000 	.word	0x40021000
 8002224:	40011000 	.word	0x40011000
 8002228:	20000030 	.word	0x20000030
 800222c:	40012c00 	.word	0x40012c00

08002230 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002230:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <HAL_MspInit+0x3c>)
{
 8002232:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002234:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002236:	490e      	ldr	r1, [pc, #56]	@ (8002270 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	619a      	str	r2, [r3, #24]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	f002 0201 	and.w	r2, r2, #1
 8002244:	9200      	str	r2, [sp, #0]
 8002246:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800224e:	61da      	str	r2, [r3, #28]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800225a:	684b      	ldr	r3, [r1, #4]
 800225c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002260:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002264:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002266:	b002      	add	sp, #8
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	40010000 	.word	0x40010000

08002274 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_TIM_Base_MspInit+0x28>)
 8002276:	6802      	ldr	r2, [r0, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d000      	beq.n	800227e <HAL_TIM_Base_MspInit+0xa>
 800227c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227e:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8002282:	699a      	ldr	r2, [r3, #24]
{
 8002284:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002296:	b002      	add	sp, #8
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00

080022a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a0:	e7fe      	b.n	80022a0 <NMI_Handler>
 80022a2:	bf00      	nop

080022a4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <HardFault_Handler>
 80022a6:	bf00      	nop

080022a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <MemManage_Handler>
 80022aa:	bf00      	nop

080022ac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <BusFault_Handler>
 80022ae:	bf00      	nop

080022b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <UsageFault_Handler>
 80022b2:	bf00      	nop

080022b4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop

080022bc <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop

080022c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c0:	f000 b85e 	b.w	8002380 <HAL_IncTick>

080022c4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c8:	f7ff fffc 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022cc:	480b      	ldr	r0, [pc, #44]	@ (80022fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022ce:	490c      	ldr	r1, [pc, #48]	@ (8002300 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002304 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d4:	e002      	b.n	80022dc <LoopCopyDataInit>

080022d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022da:	3304      	adds	r3, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e0:	d3f9      	bcc.n	80022d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e2:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022e4:	4c09      	ldr	r4, [pc, #36]	@ (800230c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e8:	e001      	b.n	80022ee <LoopFillZerobss>

080022ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ec:	3204      	adds	r2, #4

080022ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f0:	d3fb      	bcc.n	80022ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f2:	f000 fedb 	bl	80030ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022f6:	f7ff ff1f 	bl	8002138 <main>
  bx lr
 80022fa:	4770      	bx	lr
  ldr r0, =_sdata
 80022fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002300:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002304:	080031f4 	.word	0x080031f4
  ldr r2, =_sbss
 8002308:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800230c:	2000007c 	.word	0x2000007c

08002310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002310:	e7fe      	b.n	8002310 <ADC1_2_IRQHandler>
	...

08002314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231a:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <HAL_InitTick+0x3c>)
{
 800231c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800231e:	7811      	ldrb	r1, [r2, #0]
 8002320:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <HAL_InitTick+0x40>)
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	fbb2 f0f3 	udiv	r0, r2, r3
 800232c:	f000 f89a 	bl	8002464 <HAL_SYSTICK_Config>
 8002330:	b908      	cbnz	r0, 8002336 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002332:	2d0f      	cmp	r5, #15
 8002334:	d901      	bls.n	800233a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002338:	bd38      	pop	{r3, r4, r5, pc}
 800233a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	4602      	mov	r2, r0
 800233e:	4629      	mov	r1, r5
 8002340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002344:	f000 f852 	bl	80023ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_InitTick+0x44>)
 800234a:	4620      	mov	r0, r4
 800234c:	601d      	str	r5, [r3, #0]
}
 800234e:	bd38      	pop	{r3, r4, r5, pc}
 8002350:	20000004 	.word	0x20000004
 8002354:	20000000 	.word	0x20000000
 8002358:	20000008 	.word	0x20000008

0800235c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235c:	4a07      	ldr	r2, [pc, #28]	@ (800237c <HAL_Init+0x20>)
{
 800235e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002362:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002364:	f043 0310 	orr.w	r3, r3, #16
 8002368:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236a:	f000 f82d 	bl	80023c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800236e:	200f      	movs	r0, #15
 8002370:	f7ff ffd0 	bl	8002314 <HAL_InitTick>
  HAL_MspInit();
 8002374:	f7ff ff5c 	bl	8002230 <HAL_MspInit>
}
 8002378:	2000      	movs	r0, #0
 800237a:	bd08      	pop	{r3, pc}
 800237c:	40022000 	.word	0x40022000

08002380 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002380:	4a03      	ldr	r2, [pc, #12]	@ (8002390 <HAL_IncTick+0x10>)
 8002382:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <HAL_IncTick+0x14>)
 8002384:	6811      	ldr	r1, [r2, #0]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	440b      	add	r3, r1
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000078 	.word	0x20000078
 8002394:	20000004 	.word	0x20000004

08002398 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002398:	4b01      	ldr	r3, [pc, #4]	@ (80023a0 <HAL_GetTick+0x8>)
 800239a:	6818      	ldr	r0, [r3, #0]
}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000078 	.word	0x20000078

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b538      	push	{r3, r4, r5, lr}
 80023a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fff6 	bl	8002398 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ac:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80023ae:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80023b0:	d002      	beq.n	80023b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b2:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_Delay+0x20>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	1b40      	subs	r0, r0, r5
 80023be:	42a0      	cmp	r0, r4
 80023c0:	d3fa      	bcc.n	80023b8 <HAL_Delay+0x14>
  {
  }
}
 80023c2:	bd38      	pop	{r3, r4, r5, pc}
 80023c4:	20000004 	.word	0x20000004

080023c8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c8:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4906      	ldr	r1, [pc, #24]	@ (80023e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023ce:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80023e4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b500      	push	{lr}
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f6:	f1c3 0e07 	rsb	lr, r3, #7
 80023fa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002402:	bf28      	it	cs
 8002404:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002408:	f1bc 0f06 	cmp.w	ip, #6
 800240c:	d91c      	bls.n	8002448 <HAL_NVIC_SetPriority+0x5c>
 800240e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002416:	fa03 f30c 	lsl.w	r3, r3, ip
 800241a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002422:	fa03 f30e 	lsl.w	r3, r3, lr
 8002426:	ea21 0303 	bic.w	r3, r1, r3
 800242a:	fa03 f30c 	lsl.w	r3, r3, ip
 800242e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002432:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002436:	db0a      	blt.n	800244e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800243c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002440:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002444:	f85d fb04 	ldr.w	pc, [sp], #4
 8002448:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	4694      	mov	ip, r2
 800244c:	e7e7      	b.n	800241e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <HAL_NVIC_SetPriority+0x74>)
 8002450:	f000 000f 	and.w	r0, r0, #15
 8002454:	4402      	add	r2, r0
 8002456:	7613      	strb	r3, [r2, #24]
 8002458:	f85d fb04 	ldr.w	pc, [sp], #4
 800245c:	e000ed00 	.word	0xe000ed00
 8002460:	e000ecfc 	.word	0xe000ecfc

08002464 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	3801      	subs	r0, #1
 8002466:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800246a:	d301      	bcc.n	8002470 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800246e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002470:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	2107      	movs	r1, #7
{
 800247c:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	4c04      	ldr	r4, [pc, #16]	@ (8002490 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002480:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002486:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	619a      	str	r2, [r3, #24]
}
 800248a:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248c:	6119      	str	r1, [r3, #16]
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002498:	680c      	ldr	r4, [r1, #0]
{
 800249a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249c:	2c00      	cmp	r4, #0
 800249e:	f000 80ad 	beq.w	80025fc <HAL_GPIO_Init+0x168>
 80024a2:	4bb3      	ldr	r3, [pc, #716]	@ (8002770 <HAL_GPIO_Init+0x2dc>)
 80024a4:	4298      	cmp	r0, r3
 80024a6:	f000 80d7 	beq.w	8002658 <HAL_GPIO_Init+0x1c4>
 80024aa:	2200      	movs	r2, #0
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024ac:	1d03      	adds	r3, r0, #4
 80024ae:	9301      	str	r3, [sp, #4]
    ioposition = (0x01uL << position);
 80024b0:	2501      	movs	r5, #1
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024b2:	270f      	movs	r7, #15
  uint32_t config = 0x00u;
 80024b4:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80024b6:	4613      	mov	r3, r2
 80024b8:	4683      	mov	fp, r0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ba:	f8df 82b8 	ldr.w	r8, [pc, #696]	@ 8002774 <HAL_GPIO_Init+0x2e0>
 80024be:	e006      	b.n	80024ce <HAL_GPIO_Init+0x3a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80024c0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	fa34 f003 	lsrs.w	r0, r4, r3
 80024c6:	f102 0204 	add.w	r2, r2, #4
 80024ca:	f000 8097 	beq.w	80025fc <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 80024ce:	fa05 f003 	lsl.w	r0, r5, r3
    if (iocurrent == ioposition)
 80024d2:	ea30 0c04 	bics.w	ip, r0, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	ea00 0604 	and.w	r6, r0, r4
    if (iocurrent == ioposition)
 80024da:	d1f1      	bne.n	80024c0 <HAL_GPIO_Init+0x2c>
      switch (GPIO_Init->Mode)
 80024dc:	684c      	ldr	r4, [r1, #4]
 80024de:	2c12      	cmp	r4, #18
 80024e0:	f200 80a0 	bhi.w	8002624 <HAL_GPIO_Init+0x190>
 80024e4:	2c12      	cmp	r4, #18
 80024e6:	d816      	bhi.n	8002516 <HAL_GPIO_Init+0x82>
 80024e8:	e8df f014 	tbh	[pc, r4, lsl #1]
 80024ec:	001300af 	.word	0x001300af
 80024f0:	01950098 	.word	0x01950098
 80024f4:	00150015 	.word	0x00150015
 80024f8:	00150015 	.word	0x00150015
 80024fc:	00150015 	.word	0x00150015
 8002500:	00150015 	.word	0x00150015
 8002504:	00150015 	.word	0x00150015
 8002508:	00150015 	.word	0x00150015
 800250c:	00940015 	.word	0x00940015
 8002510:	0090      	.short	0x0090
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002512:	f8d1 a00c 	ldr.w	sl, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002516:	2eff      	cmp	r6, #255	@ 0xff
 8002518:	bf99      	ittee	ls
 800251a:	465c      	movls	r4, fp
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800251c:	4694      	movls	ip, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800251e:	9c01      	ldrhi	r4, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002520:	f1a2 0c20 	subhi.w	ip, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002524:	6820      	ldr	r0, [r4, #0]
 8002526:	fa07 fe0c 	lsl.w	lr, r7, ip
 800252a:	ea20 000e 	bic.w	r0, r0, lr
 800252e:	fa0a fc0c 	lsl.w	ip, sl, ip
 8002532:	ea40 000c 	orr.w	r0, r0, ip
 8002536:	6020      	str	r0, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002538:	684c      	ldr	r4, [r1, #4]
 800253a:	00e0      	lsls	r0, r4, #3
 800253c:	d564      	bpl.n	8002608 <HAL_GPIO_Init+0x174>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800253e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8002542:	f023 0c03 	bic.w	ip, r3, #3
 8002546:	f040 0001 	orr.w	r0, r0, #1
 800254a:	f8c8 0018 	str.w	r0, [r8, #24]
 800254e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8002552:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8002556:	f000 0001 	and.w	r0, r0, #1
 800255a:	9003      	str	r0, [sp, #12]
 800255c:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002560:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002564:	9803      	ldr	r0, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002566:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800256a:	f8dc 0008 	ldr.w	r0, [ip, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800256e:	fa07 fe09 	lsl.w	lr, r7, r9
 8002572:	ea20 0e0e 	bic.w	lr, r0, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002576:	4880      	ldr	r0, [pc, #512]	@ (8002778 <HAL_GPIO_Init+0x2e4>)
 8002578:	4583      	cmp	fp, r0
 800257a:	f000 812c 	beq.w	80027d6 <HAL_GPIO_Init+0x342>
 800257e:	487f      	ldr	r0, [pc, #508]	@ (800277c <HAL_GPIO_Init+0x2e8>)
 8002580:	4583      	cmp	fp, r0
 8002582:	f000 8139 	beq.w	80027f8 <HAL_GPIO_Init+0x364>
 8002586:	487e      	ldr	r0, [pc, #504]	@ (8002780 <HAL_GPIO_Init+0x2ec>)
 8002588:	4583      	cmp	fp, r0
 800258a:	bf0c      	ite	eq
 800258c:	2003      	moveq	r0, #3
 800258e:	2004      	movne	r0, #4
 8002590:	fa00 f009 	lsl.w	r0, r0, r9
 8002594:	ea40 000e 	orr.w	r0, r0, lr
        AFIO->EXTICR[position >> 2u] = temp;
 8002598:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800259c:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8002784 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a0:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a4:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80025a8:	bf14      	ite	ne
 80025aa:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ac:	43b0      	biceq	r0, r6
 80025ae:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b2:	f8df c1d0 	ldr.w	ip, [pc, #464]	@ 8002784 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b6:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ba:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80025be:	bf14      	ite	ne
 80025c0:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c2:	43b0      	biceq	r0, r6
 80025c4:	f8cc 000c 	str.w	r0, [ip, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80025c8:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8002784 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025cc:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80025d0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80025d4:	bf14      	ite	ne
 80025d6:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025d8:	43b0      	biceq	r0, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025da:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80025de:	4c69      	ldr	r4, [pc, #420]	@ (8002784 <HAL_GPIO_Init+0x2f0>)
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025e0:	f8cc 0004 	str.w	r0, [ip, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80025e4:	6820      	ldr	r0, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e6:	d00c      	beq.n	8002602 <HAL_GPIO_Init+0x16e>
          SET_BIT(EXTI->IMR, iocurrent);
 80025e8:	4330      	orrs	r0, r6
 80025ea:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	680c      	ldr	r4, [r1, #0]
	position++;
 80025ee:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	fa34 f003 	lsrs.w	r0, r4, r3
 80025f4:	f102 0204 	add.w	r2, r2, #4
 80025f8:	f47f af69 	bne.w	80024ce <HAL_GPIO_Init+0x3a>
  }
}
 80025fc:	b005      	add	sp, #20
 80025fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002602:	ea20 0006 	bic.w	r0, r0, r6
 8002606:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002608:	680c      	ldr	r4, [r1, #0]
 800260a:	e759      	b.n	80024c0 <HAL_GPIO_Init+0x2c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800260c:	68c8      	ldr	r0, [r1, #12]
 800260e:	f100 0a0c 	add.w	sl, r0, #12
          break;
 8002612:	e780      	b.n	8002516 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002614:	68c8      	ldr	r0, [r1, #12]
 8002616:	f100 0a04 	add.w	sl, r0, #4
          break;
 800261a:	e77c      	b.n	8002516 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800261c:	68c8      	ldr	r0, [r1, #12]
 800261e:	f100 0a08 	add.w	sl, r0, #8
          break;
 8002622:	e778      	b.n	8002516 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8002624:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8002788 <HAL_GPIO_Init+0x2f4>
 8002628:	4564      	cmp	r4, ip
 800262a:	d00e      	beq.n	800264a <HAL_GPIO_Init+0x1b6>
 800262c:	f200 80d9 	bhi.w	80027e2 <HAL_GPIO_Init+0x34e>
 8002630:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8002634:	4564      	cmp	r4, ip
 8002636:	d008      	beq.n	800264a <HAL_GPIO_Init+0x1b6>
 8002638:	f50c 2c70 	add.w	ip, ip, #983040	@ 0xf0000
 800263c:	4564      	cmp	r4, ip
 800263e:	d004      	beq.n	800264a <HAL_GPIO_Init+0x1b6>
 8002640:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8002644:	4564      	cmp	r4, ip
 8002646:	f47f af66 	bne.w	8002516 <HAL_GPIO_Init+0x82>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800264a:	688c      	ldr	r4, [r1, #8]
 800264c:	2c00      	cmp	r4, #0
 800264e:	f040 80d9 	bne.w	8002804 <HAL_GPIO_Init+0x370>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002652:	f04f 0a04 	mov.w	sl, #4
 8002656:	e75e      	b.n	8002516 <HAL_GPIO_Init+0x82>
  uint32_t config = 0x00u;
 8002658:	f04f 0900 	mov.w	r9, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265c:	f06f 051f 	mvn.w	r5, #31
    ioposition = (0x01uL << position);
 8002660:	2701      	movs	r7, #1
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002662:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8002666:	464b      	mov	r3, r9
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002668:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8002774 <HAL_GPIO_Init+0x2e0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800266c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800278c <HAL_GPIO_Init+0x2f8>
 8002670:	e005      	b.n	800267e <HAL_GPIO_Init+0x1ea>
	position++;
 8002672:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002674:	fa34 f203 	lsrs.w	r2, r4, r3
 8002678:	f105 0504 	add.w	r5, r5, #4
 800267c:	d0be      	beq.n	80025fc <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 800267e:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent == ioposition)
 8002682:	ea32 0a04 	bics.w	sl, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002686:	ea04 0602 	and.w	r6, r4, r2
    if (iocurrent == ioposition)
 800268a:	d1f2      	bne.n	8002672 <HAL_GPIO_Init+0x1de>
      switch (GPIO_Init->Mode)
 800268c:	684c      	ldr	r4, [r1, #4]
 800268e:	2c12      	cmp	r4, #18
 8002690:	f200 80c4 	bhi.w	800281c <HAL_GPIO_Init+0x388>
 8002694:	2c12      	cmp	r4, #18
 8002696:	d816      	bhi.n	80026c6 <HAL_GPIO_Init+0x232>
 8002698:	e8df f014 	tbh	[pc, r4, lsl #1]
 800269c:	001300d2 	.word	0x001300d2
 80026a0:	00f400df 	.word	0x00f400df
 80026a4:	00150015 	.word	0x00150015
 80026a8:	00150015 	.word	0x00150015
 80026ac:	00150015 	.word	0x00150015
 80026b0:	00150015 	.word	0x00150015
 80026b4:	00150015 	.word	0x00150015
 80026b8:	00150015 	.word	0x00150015
 80026bc:	00e30015 	.word	0x00e30015
 80026c0:	00db      	.short	0x00db
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026c2:	f8d1 900c 	ldr.w	r9, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c6:	2eff      	cmp	r6, #255	@ 0xff
 80026c8:	d962      	bls.n	8002790 <HAL_GPIO_Init+0x2fc>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026ca:	46aa      	mov	sl, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026cc:	4644      	mov	r4, r8
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026ce:	6822      	ldr	r2, [r4, #0]
 80026d0:	fa0e fb0a 	lsl.w	fp, lr, sl
 80026d4:	ea22 020b 	bic.w	r2, r2, fp
 80026d8:	fa09 fa0a 	lsl.w	sl, r9, sl
 80026dc:	ea42 020a 	orr.w	r2, r2, sl
 80026e0:	6022      	str	r2, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e2:	684a      	ldr	r2, [r1, #4]
 80026e4:	00d4      	lsls	r4, r2, #3
 80026e6:	d557      	bpl.n	8002798 <HAL_GPIO_Init+0x304>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026e8:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ec:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026f0:	f044 0401 	orr.w	r4, r4, #1
 80026f4:	f8cc 4018 	str.w	r4, [ip, #24]
 80026f8:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026fc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002700:	f004 0401 	and.w	r4, r4, #1
 8002704:	9403      	str	r4, [sp, #12]
 8002706:	9c03      	ldr	r4, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 8002708:	f023 0403 	bic.w	r4, r3, #3
 800270c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8002710:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8002714:	f8d4 b008 	ldr.w	fp, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002718:	fa0e fa0a 	lsl.w	sl, lr, sl
 800271c:	ea2b 0a0a 	bic.w	sl, fp, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002720:	f8c4 a008 	str.w	sl, [r4, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002724:	02d4      	lsls	r4, r2, #11
 8002726:	d539      	bpl.n	800279c <HAL_GPIO_Init+0x308>
          SET_BIT(EXTI->RTSR, iocurrent);
 8002728:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8002784 <HAL_GPIO_Init+0x2f0>
 800272c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8002730:	4334      	orrs	r4, r6
 8002732:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002736:	0294      	lsls	r4, r2, #10
 8002738:	d53a      	bpl.n	80027b0 <HAL_GPIO_Init+0x31c>
          SET_BIT(EXTI->FTSR, iocurrent);
 800273a:	f8df a048 	ldr.w	sl, [pc, #72]	@ 8002784 <HAL_GPIO_Init+0x2f0>
 800273e:	f8da 400c 	ldr.w	r4, [sl, #12]
 8002742:	4334      	orrs	r4, r6
 8002744:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002748:	0394      	lsls	r4, r2, #14
 800274a:	d53b      	bpl.n	80027c4 <HAL_GPIO_Init+0x330>
          SET_BIT(EXTI->EMR, iocurrent);
 800274c:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8002784 <HAL_GPIO_Init+0x2f0>
 8002750:	f8da 4004 	ldr.w	r4, [sl, #4]
 8002754:	4334      	orrs	r4, r6
 8002756:	f8ca 4004 	str.w	r4, [sl, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800275a:	4c0a      	ldr	r4, [pc, #40]	@ (8002784 <HAL_GPIO_Init+0x2f0>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002760:	6822      	ldr	r2, [r4, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002762:	bf0c      	ite	eq
 8002764:	43b2      	biceq	r2, r6
          SET_BIT(EXTI->IMR, iocurrent);
 8002766:	4332      	orrne	r2, r6
 8002768:	6022      	str	r2, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	680c      	ldr	r4, [r1, #0]
 800276c:	e781      	b.n	8002672 <HAL_GPIO_Init+0x1de>
 800276e:	bf00      	nop
 8002770:	40010800 	.word	0x40010800
 8002774:	40021000 	.word	0x40021000
 8002778:	40010c00 	.word	0x40010c00
 800277c:	40011000 	.word	0x40011000
 8002780:	40011400 	.word	0x40011400
 8002784:	40010400 	.word	0x40010400
 8002788:	10220000 	.word	0x10220000
 800278c:	40010804 	.word	0x40010804
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002790:	4604      	mov	r4, r0
 8002792:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8002796:	e79a      	b.n	80026ce <HAL_GPIO_Init+0x23a>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002798:	680c      	ldr	r4, [r1, #0]
 800279a:	e76a      	b.n	8002672 <HAL_GPIO_Init+0x1de>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800279c:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8002890 <HAL_GPIO_Init+0x3fc>
 80027a0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80027a4:	ea24 0406 	bic.w	r4, r4, r6
 80027a8:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ac:	0294      	lsls	r4, r2, #10
 80027ae:	d4c4      	bmi.n	800273a <HAL_GPIO_Init+0x2a6>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027b0:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8002890 <HAL_GPIO_Init+0x3fc>
 80027b4:	f8da 400c 	ldr.w	r4, [sl, #12]
 80027b8:	ea24 0406 	bic.w	r4, r4, r6
 80027bc:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c0:	0394      	lsls	r4, r2, #14
 80027c2:	d4c3      	bmi.n	800274c <HAL_GPIO_Init+0x2b8>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002890 <HAL_GPIO_Init+0x3fc>
 80027c8:	f8da 4004 	ldr.w	r4, [sl, #4]
 80027cc:	ea24 0406 	bic.w	r4, r4, r6
 80027d0:	f8ca 4004 	str.w	r4, [sl, #4]
 80027d4:	e7c1      	b.n	800275a <HAL_GPIO_Init+0x2c6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d6:	2001      	movs	r0, #1
 80027d8:	fa00 f009 	lsl.w	r0, r0, r9
 80027dc:	ea40 000e 	orr.w	r0, r0, lr
 80027e0:	e6da      	b.n	8002598 <HAL_GPIO_Init+0x104>
      switch (GPIO_Init->Mode)
 80027e2:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8002894 <HAL_GPIO_Init+0x400>
 80027e6:	4564      	cmp	r4, ip
 80027e8:	f43f af2f 	beq.w	800264a <HAL_GPIO_Init+0x1b6>
 80027ec:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
 80027f0:	4564      	cmp	r4, ip
 80027f2:	f47f ae90 	bne.w	8002516 <HAL_GPIO_Init+0x82>
 80027f6:	e728      	b.n	800264a <HAL_GPIO_Init+0x1b6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027f8:	2002      	movs	r0, #2
 80027fa:	fa00 f009 	lsl.w	r0, r0, r9
 80027fe:	ea40 000e 	orr.w	r0, r0, lr
 8002802:	e6c9      	b.n	8002598 <HAL_GPIO_Init+0x104>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002804:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002806:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 800280a:	bf0c      	ite	eq
 800280c:	f8cb 0010 	streq.w	r0, [fp, #16]
            GPIOx->BRR = ioposition;
 8002810:	f8cb 0014 	strne.w	r0, [fp, #20]
 8002814:	e67f      	b.n	8002516 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8002816:	f04f 0a00 	mov.w	sl, #0
 800281a:	e67c      	b.n	8002516 <HAL_GPIO_Init+0x82>
 800281c:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8002898 <HAL_GPIO_Init+0x404>
 8002820:	4554      	cmp	r4, sl
 8002822:	d00d      	beq.n	8002840 <HAL_GPIO_Init+0x3ac>
 8002824:	d821      	bhi.n	800286a <HAL_GPIO_Init+0x3d6>
 8002826:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 800282a:	4554      	cmp	r4, sl
 800282c:	d008      	beq.n	8002840 <HAL_GPIO_Init+0x3ac>
 800282e:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 8002832:	4554      	cmp	r4, sl
 8002834:	d004      	beq.n	8002840 <HAL_GPIO_Init+0x3ac>
 8002836:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 800283a:	4554      	cmp	r4, sl
 800283c:	f47f af43 	bne.w	80026c6 <HAL_GPIO_Init+0x232>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002840:	688c      	ldr	r4, [r1, #8]
 8002842:	b1e4      	cbz	r4, 800287e <HAL_GPIO_Init+0x3ea>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002844:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002846:	4c15      	ldr	r4, [pc, #84]	@ (800289c <HAL_GPIO_Init+0x408>)
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002848:	d01f      	beq.n	800288a <HAL_GPIO_Init+0x3f6>
            GPIOx->BRR = ioposition;
 800284a:	6162      	str	r2, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800284c:	f04f 0908 	mov.w	r9, #8
 8002850:	e739      	b.n	80026c6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002852:	68ca      	ldr	r2, [r1, #12]
 8002854:	f102 090c 	add.w	r9, r2, #12
          break;
 8002858:	e735      	b.n	80026c6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800285a:	68ca      	ldr	r2, [r1, #12]
 800285c:	f102 0908 	add.w	r9, r2, #8
          break;
 8002860:	e731      	b.n	80026c6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002862:	68ca      	ldr	r2, [r1, #12]
 8002864:	f102 0904 	add.w	r9, r2, #4
          break;
 8002868:	e72d      	b.n	80026c6 <HAL_GPIO_Init+0x232>
      switch (GPIO_Init->Mode)
 800286a:	f8df a028 	ldr.w	sl, [pc, #40]	@ 8002894 <HAL_GPIO_Init+0x400>
 800286e:	4554      	cmp	r4, sl
 8002870:	d0e6      	beq.n	8002840 <HAL_GPIO_Init+0x3ac>
 8002872:	f50a 3a80 	add.w	sl, sl, #65536	@ 0x10000
 8002876:	4554      	cmp	r4, sl
 8002878:	f47f af25 	bne.w	80026c6 <HAL_GPIO_Init+0x232>
 800287c:	e7e0      	b.n	8002840 <HAL_GPIO_Init+0x3ac>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800287e:	f04f 0904 	mov.w	r9, #4
 8002882:	e720      	b.n	80026c6 <HAL_GPIO_Init+0x232>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002884:	f04f 0900 	mov.w	r9, #0
 8002888:	e71d      	b.n	80026c6 <HAL_GPIO_Init+0x232>
            GPIOx->BSRR = ioposition;
 800288a:	6122      	str	r2, [r4, #16]
 800288c:	e7de      	b.n	800284c <HAL_GPIO_Init+0x3b8>
 800288e:	bf00      	nop
 8002890:	40010400 	.word	0x40010400
 8002894:	10310000 	.word	0x10310000
 8002898:	10220000 	.word	0x10220000
 800289c:	40010800 	.word	0x40010800

080028a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a0:	b902      	cbnz	r2, 80028a4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a2:	0409      	lsls	r1, r1, #16
 80028a4:	6101      	str	r1, [r0, #16]
  }
}
 80028a6:	4770      	bx	lr

080028a8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a8:	2800      	cmp	r0, #0
 80028aa:	f000 81e4 	beq.w	8002c76 <HAL_RCC_OscConfig+0x3ce>
{
 80028ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	6803      	ldr	r3, [r0, #0]
 80028b4:	4604      	mov	r4, r0
 80028b6:	07dd      	lsls	r5, r3, #31
{
 80028b8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	d535      	bpl.n	8002928 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028bc:	4999      	ldr	r1, [pc, #612]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80028be:	684a      	ldr	r2, [r1, #4]
 80028c0:	f002 020c 	and.w	r2, r2, #12
 80028c4:	2a04      	cmp	r2, #4
 80028c6:	f000 80ed 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ca:	684a      	ldr	r2, [r1, #4]
 80028cc:	f002 020c 	and.w	r2, r2, #12
 80028d0:	2a08      	cmp	r2, #8
 80028d2:	f000 80e3 	beq.w	8002a9c <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_OscConfig+0x58>
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 810a 	beq.w	8002af8 <HAL_RCC_OscConfig+0x250>
 80028e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e8:	f000 8180 	beq.w	8002bec <HAL_RCC_OscConfig+0x344>
 80028ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028fc:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fe:	e004      	b.n	800290a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002900:	4a88      	ldr	r2, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff fd45 	bl	8002398 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4e85      	ldr	r6, [pc, #532]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8002910:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e005      	b.n	8002920 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff fd40 	bl	8002398 <HAL_GetTick>
 8002918:	1b40      	subs	r0, r0, r5
 800291a:	2864      	cmp	r0, #100	@ 0x64
 800291c:	f200 80e8 	bhi.w	8002af0 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002920:	6833      	ldr	r3, [r6, #0]
 8002922:	039a      	lsls	r2, r3, #14
 8002924:	d5f6      	bpl.n	8002914 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	079f      	lsls	r7, r3, #30
 800292a:	d528      	bpl.n	800297e <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292c:	4a7d      	ldr	r2, [pc, #500]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 800292e:	6851      	ldr	r1, [r2, #4]
 8002930:	f011 0f0c 	tst.w	r1, #12
 8002934:	f000 8096 	beq.w	8002a64 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002938:	6851      	ldr	r1, [r2, #4]
 800293a:	f001 010c 	and.w	r1, r1, #12
 800293e:	2908      	cmp	r1, #8
 8002940:	f000 808c 	beq.w	8002a5c <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002944:	6923      	ldr	r3, [r4, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8116 	beq.w	8002b78 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294c:	2201      	movs	r2, #1
 800294e:	4b76      	ldr	r3, [pc, #472]	@ (8002b28 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	4e74      	ldr	r6, [pc, #464]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 8002952:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002954:	f7ff fd20 	bl	8002398 <HAL_GetTick>
 8002958:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	e005      	b.n	8002968 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295c:	f7ff fd1c 	bl	8002398 <HAL_GetTick>
 8002960:	1b40      	subs	r0, r0, r5
 8002962:	2802      	cmp	r0, #2
 8002964:	f200 80c4 	bhi.w	8002af0 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	6833      	ldr	r3, [r6, #0]
 800296a:	0798      	lsls	r0, r3, #30
 800296c:	d5f6      	bpl.n	800295c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296e:	6833      	ldr	r3, [r6, #0]
 8002970:	6962      	ldr	r2, [r4, #20]
 8002972:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002976:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800297a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	071a      	lsls	r2, r3, #28
 8002980:	d429      	bmi.n	80029d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002982:	075d      	lsls	r5, r3, #29
 8002984:	d54b      	bpl.n	8002a1e <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b67      	ldr	r3, [pc, #412]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	00d0      	lsls	r0, r2, #3
 800298c:	f100 8084 	bmi.w	8002a98 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002990:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002998:	61da      	str	r2, [r3, #28]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4e61      	ldr	r6, [pc, #388]	@ (8002b2c <HAL_RCC_OscConfig+0x284>)
 80029a6:	6833      	ldr	r3, [r6, #0]
 80029a8:	05d9      	lsls	r1, r3, #23
 80029aa:	f140 8091 	bpl.w	8002ad0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ae:	68e3      	ldr	r3, [r4, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	f000 80f2 	beq.w	8002b9a <HAL_RCC_OscConfig+0x2f2>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80be 	beq.w	8002b38 <HAL_RCC_OscConfig+0x290>
 80029bc:	2b05      	cmp	r3, #5
 80029be:	4b59      	ldr	r3, [pc, #356]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	6a1a      	ldr	r2, [r3, #32]
 80029c2:	f000 8120 	beq.w	8002c06 <HAL_RCC_OscConfig+0x35e>
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	621a      	str	r2, [r3, #32]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d4:	e0e6      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d6:	69a3      	ldr	r3, [r4, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d04c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 80029dc:	2201      	movs	r2, #1
 80029de:	4b52      	ldr	r3, [pc, #328]	@ (8002b28 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e0:	4e50      	ldr	r6, [pc, #320]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 80029e2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80029e6:	f7ff fcd7 	bl	8002398 <HAL_GetTick>
 80029ea:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	e004      	b.n	80029f8 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7ff fcd3 	bl	8002398 <HAL_GetTick>
 80029f2:	1b40      	subs	r0, r0, r5
 80029f4:	2802      	cmp	r0, #2
 80029f6:	d87b      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f8:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80029fa:	079b      	lsls	r3, r3, #30
 80029fc:	d5f7      	bpl.n	80029ee <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a00:	4a4c      	ldr	r2, [pc, #304]	@ (8002b34 <HAL_RCC_OscConfig+0x28c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	0a5b      	lsrs	r3, r3, #9
 8002a0a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002a0c:	bf00      	nop
  }
  while (Delay --);
 8002a0e:	9b01      	ldr	r3, [sp, #4]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	9201      	str	r2, [sp, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	075d      	lsls	r5, r3, #29
 8002a1c:	d4b3      	bmi.n	8002986 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1e:	69e3      	ldr	r3, [r4, #28]
 8002a20:	b1c3      	cbz	r3, 8002a54 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a22:	4d40      	ldr	r5, [pc, #256]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a24:	686a      	ldr	r2, [r5, #4]
 8002a26:	f002 020c 	and.w	r2, r2, #12
 8002a2a:	2a08      	cmp	r2, #8
 8002a2c:	f000 80cd 	beq.w	8002bca <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8002a30:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a32:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b3c      	ldr	r3, [pc, #240]	@ (8002b28 <HAL_RCC_OscConfig+0x280>)
 8002a36:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	f000 80ed 	beq.w	8002c16 <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8002a3c:	f7ff fcac 	bl	8002398 <HAL_GetTick>
 8002a40:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a42:	e004      	b.n	8002a4e <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7ff fca8 	bl	8002398 <HAL_GetTick>
 8002a48:	1b00      	subs	r0, r0, r4
 8002a4a:	2802      	cmp	r0, #2
 8002a4c:	d850      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4e:	682b      	ldr	r3, [r5, #0]
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	d4f7      	bmi.n	8002a44 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 8002a54:	2000      	movs	r0, #0
}
 8002a56:	b002      	add	sp, #8
 8002a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a5c:	6852      	ldr	r2, [r2, #4]
 8002a5e:	03d6      	lsls	r6, r2, #15
 8002a60:	f53f af70 	bmi.w	8002944 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a64:	4a2f      	ldr	r2, [pc, #188]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	0795      	lsls	r5, r2, #30
 8002a6a:	d525      	bpl.n	8002ab8 <HAL_RCC_OscConfig+0x210>
 8002a6c:	6922      	ldr	r2, [r4, #16]
 8002a6e:	2a01      	cmp	r2, #1
 8002a70:	d022      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 8002a72:	2001      	movs	r0, #1
 8002a74:	e7ef      	b.n	8002a56 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 8002a76:	4a2c      	ldr	r2, [pc, #176]	@ (8002b28 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4e2a      	ldr	r6, [pc, #168]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8002a7a:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002a7e:	f7ff fc8b 	bl	8002398 <HAL_GetTick>
 8002a82:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a84:	e004      	b.n	8002a90 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a86:	f7ff fc87 	bl	8002398 <HAL_GetTick>
 8002a8a:	1b40      	subs	r0, r0, r5
 8002a8c:	2802      	cmp	r0, #2
 8002a8e:	d82f      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002a92:	079f      	lsls	r7, r3, #30
 8002a94:	d4f7      	bmi.n	8002a86 <HAL_RCC_OscConfig+0x1de>
 8002a96:	e7bf      	b.n	8002a18 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8002a98:	2500      	movs	r5, #0
 8002a9a:	e783      	b.n	80029a4 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a9c:	684a      	ldr	r2, [r1, #4]
 8002a9e:	03d0      	lsls	r0, r2, #15
 8002aa0:	f57f af19 	bpl.w	80028d6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	0391      	lsls	r1, r2, #14
 8002aaa:	f57f af3d 	bpl.w	8002928 <HAL_RCC_OscConfig+0x80>
 8002aae:	6862      	ldr	r2, [r4, #4]
 8002ab0:	2a00      	cmp	r2, #0
 8002ab2:	f47f af39 	bne.w	8002928 <HAL_RCC_OscConfig+0x80>
 8002ab6:	e7dc      	b.n	8002a72 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	491a      	ldr	r1, [pc, #104]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	6960      	ldr	r0, [r4, #20]
 8002abc:	680a      	ldr	r2, [r1, #0]
 8002abe:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002ac2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002ac6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac8:	071a      	lsls	r2, r3, #28
 8002aca:	f57f af5a 	bpl.w	8002982 <HAL_RCC_OscConfig+0xda>
 8002ace:	e782      	b.n	80029d6 <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad0:	6833      	ldr	r3, [r6, #0]
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002ad8:	f7ff fc5e 	bl	8002398 <HAL_GetTick>
 8002adc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	6833      	ldr	r3, [r6, #0]
 8002ae0:	05da      	lsls	r2, r3, #23
 8002ae2:	f53f af64 	bmi.w	80029ae <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7ff fc57 	bl	8002398 <HAL_GetTick>
 8002aea:	1bc0      	subs	r0, r0, r7
 8002aec:	2864      	cmp	r0, #100	@ 0x64
 8002aee:	d9f6      	bls.n	8002ade <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8002af0:	2003      	movs	r0, #3
}
 8002af2:	b002      	add	sp, #8
 8002af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af8:	4d0a      	ldr	r5, [pc, #40]	@ (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b00:	602b      	str	r3, [r5, #0]
 8002b02:	682b      	ldr	r3, [r5, #0]
 8002b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b0a:	f7ff fc45 	bl	8002398 <HAL_GetTick>
 8002b0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b10:	e004      	b.n	8002b1c <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b12:	f7ff fc41 	bl	8002398 <HAL_GetTick>
 8002b16:	1b80      	subs	r0, r0, r6
 8002b18:	2864      	cmp	r0, #100	@ 0x64
 8002b1a:	d8e9      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1c:	682b      	ldr	r3, [r5, #0]
 8002b1e:	039b      	lsls	r3, r3, #14
 8002b20:	d4f7      	bmi.n	8002b12 <HAL_RCC_OscConfig+0x26a>
 8002b22:	e700      	b.n	8002926 <HAL_RCC_OscConfig+0x7e>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	42420000 	.word	0x42420000
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	20000000 	.word	0x20000000
 8002b34:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	4e50      	ldr	r6, [pc, #320]	@ (8002c7c <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3e:	6a33      	ldr	r3, [r6, #32]
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6233      	str	r3, [r6, #32]
 8002b46:	6a33      	ldr	r3, [r6, #32]
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fc23 	bl	8002398 <HAL_GetTick>
 8002b52:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	e004      	b.n	8002b60 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff fc1f 	bl	8002398 <HAL_GetTick>
 8002b5a:	1bc0      	subs	r0, r0, r7
 8002b5c:	4540      	cmp	r0, r8
 8002b5e:	d8c7      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	6a33      	ldr	r3, [r6, #32]
 8002b62:	0798      	lsls	r0, r3, #30
 8002b64:	d4f7      	bmi.n	8002b56 <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	f43f af59 	beq.w	8002a1e <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4a43      	ldr	r2, [pc, #268]	@ (8002c7c <HAL_RCC_OscConfig+0x3d4>)
 8002b6e:	69d3      	ldr	r3, [r2, #28]
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	61d3      	str	r3, [r2, #28]
 8002b76:	e752      	b.n	8002a1e <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8002b78:	4a41      	ldr	r2, [pc, #260]	@ (8002c80 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4e40      	ldr	r6, [pc, #256]	@ (8002c7c <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8002b7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b7e:	f7ff fc0b 	bl	8002398 <HAL_GetTick>
 8002b82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b84:	e004      	b.n	8002b90 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b86:	f7ff fc07 	bl	8002398 <HAL_GetTick>
 8002b8a:	1b40      	subs	r0, r0, r5
 8002b8c:	2802      	cmp	r0, #2
 8002b8e:	d8af      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b90:	6833      	ldr	r3, [r6, #0]
 8002b92:	0799      	lsls	r1, r3, #30
 8002b94:	d4f7      	bmi.n	8002b86 <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	e6f1      	b.n	800297e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9a:	4a38      	ldr	r2, [pc, #224]	@ (8002c7c <HAL_RCC_OscConfig+0x3d4>)
 8002b9c:	6a13      	ldr	r3, [r2, #32]
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002ba4:	f7ff fbf8 	bl	8002398 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002bac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	4f33      	ldr	r7, [pc, #204]	@ (8002c7c <HAL_RCC_OscConfig+0x3d4>)
 8002bb0:	e004      	b.n	8002bbc <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7ff fbf1 	bl	8002398 <HAL_GetTick>
 8002bb6:	1b80      	subs	r0, r0, r6
 8002bb8:	4540      	cmp	r0, r8
 8002bba:	d899      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	079b      	lsls	r3, r3, #30
 8002bc0:	d5f7      	bpl.n	8002bb2 <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	f43f af2b 	beq.w	8002a1e <HAL_RCC_OscConfig+0x176>
 8002bc8:	e7d0      	b.n	8002b6c <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	f43f af51 	beq.w	8002a72 <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8002bd0:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	6a22      	ldr	r2, [r4, #32]
 8002bd4:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002bd8:	4291      	cmp	r1, r2
 8002bda:	f47f af4a 	bne.w	8002a72 <HAL_RCC_OscConfig+0x1ca>
 8002bde:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002be0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be4:	1a18      	subs	r0, r3, r0
 8002be6:	bf18      	it	ne
 8002be8:	2001      	movne	r0, #1
 8002bea:	e734      	b.n	8002a56 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bf0:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c02:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	e681      	b.n	800290a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c06:	f042 0204 	orr.w	r2, r2, #4
 8002c0a:	621a      	str	r2, [r3, #32]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c14:	e7c6      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 8002c16:	f7ff fbbf 	bl	8002398 <HAL_GetTick>
 8002c1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1c:	e005      	b.n	8002c2a <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7ff fbbb 	bl	8002398 <HAL_GetTick>
 8002c22:	1b80      	subs	r0, r0, r6
 8002c24:	2802      	cmp	r0, #2
 8002c26:	f63f af63 	bhi.w	8002af0 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2a:	682b      	ldr	r3, [r5, #0]
 8002c2c:	0199      	lsls	r1, r3, #6
 8002c2e:	d4f6      	bmi.n	8002c1e <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c30:	6a23      	ldr	r3, [r4, #32]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c38:	686a      	ldr	r2, [r5, #4]
 8002c3a:	68a1      	ldr	r1, [r4, #8]
 8002c3c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002c40:	430a      	orrs	r2, r1
 8002c42:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c44:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c46:	4d0d      	ldr	r5, [pc, #52]	@ (8002c7c <HAL_RCC_OscConfig+0x3d4>)
 8002c48:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002c4a:	686a      	ldr	r2, [r5, #4]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8002c52:	490b      	ldr	r1, [pc, #44]	@ (8002c80 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c54:	4313      	orrs	r3, r2
 8002c56:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c58:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002c5a:	f7ff fb9d 	bl	8002398 <HAL_GetTick>
 8002c5e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c60:	e005      	b.n	8002c6e <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7ff fb99 	bl	8002398 <HAL_GetTick>
 8002c66:	1b00      	subs	r0, r0, r4
 8002c68:	2802      	cmp	r0, #2
 8002c6a:	f63f af41 	bhi.w	8002af0 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c6e:	682b      	ldr	r3, [r5, #0]
 8002c70:	019a      	lsls	r2, r3, #6
 8002c72:	d5f6      	bpl.n	8002c62 <HAL_RCC_OscConfig+0x3ba>
 8002c74:	e6ee      	b.n	8002a54 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 8002c76:	2001      	movs	r0, #1
}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	42420000 	.word	0x42420000

08002c84 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002c84:	2800      	cmp	r0, #0
 8002c86:	f000 80a1 	beq.w	8002dcc <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8a:	4a56      	ldr	r2, [pc, #344]	@ (8002de4 <HAL_RCC_ClockConfig+0x160>)
{
 8002c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	6813      	ldr	r3, [r2, #0]
 8002c92:	4604      	mov	r4, r0
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	460d      	mov	r5, r1
 8002c9c:	d20c      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	f023 0307 	bic.w	r3, r3, #7
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	428b      	cmp	r3, r1
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
}
 8002cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	079e      	lsls	r6, r3, #30
 8002cbc:	d514      	bpl.n	8002ce8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbe:	0758      	lsls	r0, r3, #29
 8002cc0:	d504      	bpl.n	8002ccc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc2:	4949      	ldr	r1, [pc, #292]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
 8002cc4:	684a      	ldr	r2, [r1, #4]
 8002cc6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002cca:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	0719      	lsls	r1, r3, #28
 8002cce:	d504      	bpl.n	8002cda <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd0:	4945      	ldr	r1, [pc, #276]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
 8002cd2:	684a      	ldr	r2, [r1, #4]
 8002cd4:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8002cd8:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cda:	4943      	ldr	r1, [pc, #268]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
 8002cdc:	68a0      	ldr	r0, [r4, #8]
 8002cde:	684a      	ldr	r2, [r1, #4]
 8002ce0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002ce4:	4302      	orrs	r2, r0
 8002ce6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce8:	07da      	lsls	r2, r3, #31
 8002cea:	d520      	bpl.n	8002d2e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cec:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b3e      	ldr	r3, [pc, #248]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf4:	d06c      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf6:	2a02      	cmp	r2, #2
 8002cf8:	d065      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	079e      	lsls	r6, r3, #30
 8002cfc:	d5d9      	bpl.n	8002cb2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4e3a      	ldr	r6, [pc, #232]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d04:	6873      	ldr	r3, [r6, #4]
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002d0e:	f7ff fb43 	bl	8002398 <HAL_GetTick>
 8002d12:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d14:	e004      	b.n	8002d20 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d16:	f7ff fb3f 	bl	8002398 <HAL_GetTick>
 8002d1a:	1bc0      	subs	r0, r0, r7
 8002d1c:	4540      	cmp	r0, r8
 8002d1e:	d85a      	bhi.n	8002dd6 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d20:	6873      	ldr	r3, [r6, #4]
 8002d22:	6862      	ldr	r2, [r4, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d2c:	d1f3      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8002de4 <HAL_RCC_ClockConfig+0x160>)
 8002d30:	6813      	ldr	r3, [r2, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	42ab      	cmp	r3, r5
 8002d38:	d909      	bls.n	8002d4e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	f023 0307 	bic.w	r3, r3, #7
 8002d40:	432b      	orrs	r3, r5
 8002d42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d44:	6813      	ldr	r3, [r2, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	42ab      	cmp	r3, r5
 8002d4c:	d1b1      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	0758      	lsls	r0, r3, #29
 8002d52:	d506      	bpl.n	8002d62 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d54:	4924      	ldr	r1, [pc, #144]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
 8002d56:	68e0      	ldr	r0, [r4, #12]
 8002d58:	684a      	ldr	r2, [r1, #4]
 8002d5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d5e:	4302      	orrs	r2, r0
 8002d60:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d62:	0719      	lsls	r1, r3, #28
 8002d64:	d507      	bpl.n	8002d76 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d66:	4a20      	ldr	r2, [pc, #128]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
 8002d68:	6921      	ldr	r1, [r4, #16]
 8002d6a:	6853      	ldr	r3, [r2, #4]
 8002d6c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002d70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d74:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8002d76:	491c      	ldr	r1, [pc, #112]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
 8002d78:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002d7a:	f002 030c 	and.w	r3, r2, #12
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d010      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <HAL_RCC_ClockConfig+0x164>)
 8002d86:	481a      	ldr	r0, [pc, #104]	@ (8002df0 <HAL_RCC_ClockConfig+0x16c>)
 8002d88:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8002d8a:	491a      	ldr	r1, [pc, #104]	@ (8002df4 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d8c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d90:	5c80      	ldrb	r0, [r0, r2]
 8002d92:	4a19      	ldr	r2, [pc, #100]	@ (8002df8 <HAL_RCC_ClockConfig+0x174>)
 8002d94:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8002d96:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d98:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8002d9a:	f7ff fabb 	bl	8002314 <HAL_InitTick>
  return HAL_OK;
 8002d9e:	2000      	movs	r0, #0
}
 8002da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002da4:	4815      	ldr	r0, [pc, #84]	@ (8002dfc <HAL_RCC_ClockConfig+0x178>)
 8002da6:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002daa:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dac:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dae:	d514      	bpl.n	8002dda <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002db0:	480e      	ldr	r0, [pc, #56]	@ (8002dec <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002db2:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002db4:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002db8:	4911      	ldr	r1, [pc, #68]	@ (8002e00 <HAL_RCC_ClockConfig+0x17c>)
 8002dba:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002dbe:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc4:	e7de      	b.n	8002d84 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	019f      	lsls	r7, r3, #6
 8002dc8:	d499      	bmi.n	8002cfe <HAL_RCC_ClockConfig+0x7a>
 8002dca:	e772      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002dcc:	2001      	movs	r0, #1
}
 8002dce:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd0:	039b      	lsls	r3, r3, #14
 8002dd2:	d494      	bmi.n	8002cfe <HAL_RCC_ClockConfig+0x7a>
 8002dd4:	e76d      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002dd6:	2003      	movs	r0, #3
 8002dd8:	e76c      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <HAL_RCC_ClockConfig+0x180>)
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	e7d0      	b.n	8002d84 <HAL_RCC_ClockConfig+0x100>
 8002de2:	bf00      	nop
 8002de4:	40022000 	.word	0x40022000
 8002de8:	40021000 	.word	0x40021000
 8002dec:	007a1200 	.word	0x007a1200
 8002df0:	080031c8 	.word	0x080031c8
 8002df4:	20000008 	.word	0x20000008
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	080031dc 	.word	0x080031dc
 8002e00:	080031d8 	.word	0x080031d8
 8002e04:	003d0900 	.word	0x003d0900

08002e08 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d066      	beq.n	8002eda <HAL_TIM_Base_Init+0xd2>
{
 8002e0c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e12:	4604      	mov	r4, r0
 8002e14:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d059      	beq.n	8002ed0 <HAL_TIM_Base_Init+0xc8>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e20:	4e2f      	ldr	r6, [pc, #188]	@ (8002ee0 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002e22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e26:	42b2      	cmp	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e28:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2a:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	6861      	ldr	r1, [r4, #4]
  tmpcr1 = TIMx->CR1;
 8002e2e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e30:	d030      	beq.n	8002e94 <HAL_TIM_Base_Init+0x8c>
 8002e32:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002e36:	d02d      	beq.n	8002e94 <HAL_TIM_Base_Init+0x8c>
 8002e38:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8002e3c:	42b2      	cmp	r2, r6
 8002e3e:	d03e      	beq.n	8002ebe <HAL_TIM_Base_Init+0xb6>
 8002e40:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002e44:	42b2      	cmp	r2, r6
 8002e46:	d03a      	beq.n	8002ebe <HAL_TIM_Base_Init+0xb6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e4c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002e4e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e50:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e52:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e54:	2301      	movs	r3, #1
 8002e56:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e58:	6913      	ldr	r3, [r2, #16]
 8002e5a:	07db      	lsls	r3, r3, #31
 8002e5c:	d503      	bpl.n	8002e66 <HAL_TIM_Base_Init+0x5e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e5e:	6913      	ldr	r3, [r2, #16]
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002e70:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002e74:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002e78:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e84:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002e88:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002e90:	2000      	movs	r0, #0
}
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8002e94:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e9a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ea8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002eaa:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <HAL_TIM_Base_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eae:	62d0      	str	r0, [r2, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	429a      	cmp	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb2:	bf08      	it	eq
 8002eb4:	6963      	ldreq	r3, [r4, #20]
  TIMx->PSC = Structure->Prescaler;
 8002eb6:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb8:	bf08      	it	eq
 8002eba:	6313      	streq	r3, [r2, #48]	@ 0x30
 8002ebc:	e7ca      	b.n	8002e54 <HAL_TIM_Base_Init+0x4c>
    tmpcr1 |= Structure->CounterMode;
 8002ebe:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ec4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ecc:	4333      	orrs	r3, r6
 8002ece:	e7bb      	b.n	8002e48 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8002ed0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ed4:	f7ff f9ce 	bl	8002274 <HAL_TIM_Base_MspInit>
 8002ed8:	e7a0      	b.n	8002e1c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8002eda:	2001      	movs	r0, #1
}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00

08002ee4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002ee4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002ee8:	2a01      	cmp	r2, #1
 8002eea:	d06e      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0xe6>
 8002eec:	4603      	mov	r3, r0
{
 8002eee:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002ef0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef2:	2402      	movs	r4, #2
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(htim);
 8002ef6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002efa:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002efe:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f00:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8002f04:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002f08:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f0a:	680c      	ldr	r4, [r1, #0]
 8002f0c:	2c60      	cmp	r4, #96	@ 0x60
 8002f0e:	d076      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x11a>
 8002f10:	d811      	bhi.n	8002f36 <HAL_TIM_ConfigClockSource+0x52>
 8002f12:	2c40      	cmp	r4, #64	@ 0x40
 8002f14:	d05b      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xea>
 8002f16:	d82e      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x92>
 8002f18:	2c20      	cmp	r4, #32
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x42>
 8002f1c:	f200 8088 	bhi.w	8003030 <HAL_TIM_ConfigClockSource+0x14c>
 8002f20:	f034 0110 	bics.w	r1, r4, #16
 8002f24:	d11f      	bne.n	8002f66 <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f26:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f28:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f2c:	4321      	orrs	r1, r4
 8002f2e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	6091      	str	r1, [r2, #8]
}
 8002f34:	e016      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8002f36:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8002f3a:	d013      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x80>
 8002f3c:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8002f40:	d033      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0xc6>
 8002f42:	2c70      	cmp	r4, #112	@ 0x70
 8002f44:	d10f      	bne.n	8002f66 <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f46:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002f4a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4c:	4328      	orrs	r0, r5
 8002f4e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f50:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f54:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002f58:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5a:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002f5c:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5e:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002f62:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f66:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002f68:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002f72:	bc30      	pop	{r4, r5}
 8002f74:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002f76:	2c50      	cmp	r4, #80	@ 0x50
 8002f78:	d1f5      	bne.n	8002f66 <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8002f7a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002f7c:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f7e:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f80:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002f84:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	6a11      	ldr	r1, [r2, #32]
 8002f88:	f021 0101 	bic.w	r1, r1, #1
 8002f8c:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8e:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f90:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f94:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f98:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002f9a:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002f9c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa2:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002fa6:	6091      	str	r1, [r2, #8]
}
 8002fa8:	e7dc      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002faa:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002fae:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb0:	4328      	orrs	r0, r5
 8002fb2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb4:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002fbc:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8002fbe:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fc0:	6891      	ldr	r1, [r2, #8]
 8002fc2:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002fc6:	6091      	str	r1, [r2, #8]
      break;
 8002fc8:	e7cc      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 8002fca:	2002      	movs	r0, #2
}
 8002fcc:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8002fce:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002fd0:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002fd2:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002fd8:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fda:	6a11      	ldr	r1, [r2, #32]
 8002fdc:	f021 0101 	bic.w	r1, r1, #1
 8002fe0:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe2:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fe4:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fe8:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002fec:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002fee:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002ff0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ff2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff6:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8002ffa:	6091      	str	r1, [r2, #8]
}
 8002ffc:	e7b2      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 8002ffe:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003000:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8003002:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003004:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003008:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300c:	6a10      	ldr	r0, [r2, #32]
 800300e:	f020 0010 	bic.w	r0, r0, #16
 8003012:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003014:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003016:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800301a:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800301e:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8003020:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003022:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003024:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003028:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800302c:	6091      	str	r1, [r2, #8]
}
 800302e:	e799      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8003030:	2c30      	cmp	r4, #48	@ 0x30
 8003032:	f43f af78 	beq.w	8002f26 <HAL_TIM_ConfigClockSource+0x42>
 8003036:	e796      	b.n	8002f66 <HAL_TIM_ConfigClockSource+0x82>

08003038 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003038:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800303c:	2a01      	cmp	r2, #1
 800303e:	d027      	beq.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003040:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003042:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003044:	681a      	ldr	r2, [r3, #0]
{
 8003046:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800304c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800304e:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003050:	4d10      	ldr	r5, [pc, #64]	@ (8003094 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003052:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003056:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003058:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800305a:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800305c:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305e:	d009      	beq.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003060:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003064:	d006      	beq.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003066:	480c      	ldr	r0, [pc, #48]	@ (8003098 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003068:	4282      	cmp	r2, r0
 800306a:	d003      	beq.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800306c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003070:	4282      	cmp	r2, r0
 8003072:	d104      	bne.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003074:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003076:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800307c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800307e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003080:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003086:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 800308a:	4610      	mov	r0, r2
}
 800308c:	bc30      	pop	{r4, r5}
 800308e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003090:	2002      	movs	r0, #2
}
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400

0800309c <memset>:
 800309c:	4603      	mov	r3, r0
 800309e:	4402      	add	r2, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <__libc_init_array>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	2600      	movs	r6, #0
 80030b0:	4d0c      	ldr	r5, [pc, #48]	@ (80030e4 <__libc_init_array+0x38>)
 80030b2:	4c0d      	ldr	r4, [pc, #52]	@ (80030e8 <__libc_init_array+0x3c>)
 80030b4:	1b64      	subs	r4, r4, r5
 80030b6:	10a4      	asrs	r4, r4, #2
 80030b8:	42a6      	cmp	r6, r4
 80030ba:	d109      	bne.n	80030d0 <__libc_init_array+0x24>
 80030bc:	f000 f828 	bl	8003110 <_init>
 80030c0:	2600      	movs	r6, #0
 80030c2:	4d0a      	ldr	r5, [pc, #40]	@ (80030ec <__libc_init_array+0x40>)
 80030c4:	4c0a      	ldr	r4, [pc, #40]	@ (80030f0 <__libc_init_array+0x44>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	42a6      	cmp	r6, r4
 80030cc:	d105      	bne.n	80030da <__libc_init_array+0x2e>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d4:	4798      	blx	r3
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7ee      	b.n	80030b8 <__libc_init_array+0xc>
 80030da:	f855 3b04 	ldr.w	r3, [r5], #4
 80030de:	4798      	blx	r3
 80030e0:	3601      	adds	r6, #1
 80030e2:	e7f2      	b.n	80030ca <__libc_init_array+0x1e>
 80030e4:	080031ec 	.word	0x080031ec
 80030e8:	080031ec 	.word	0x080031ec
 80030ec:	080031ec 	.word	0x080031ec
 80030f0:	080031f0 	.word	0x080031f0

080030f4 <memcpy>:
 80030f4:	440a      	add	r2, r1
 80030f6:	4291      	cmp	r1, r2
 80030f8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80030fc:	d100      	bne.n	8003100 <memcpy+0xc>
 80030fe:	4770      	bx	lr
 8003100:	b510      	push	{r4, lr}
 8003102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003106:	4291      	cmp	r1, r2
 8003108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800310c:	d1f9      	bne.n	8003102 <memcpy+0xe>
 800310e:	bd10      	pop	{r4, pc}

08003110 <_init>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr

0800311c <_fini>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr
