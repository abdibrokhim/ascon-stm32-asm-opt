
ascon-newuu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000168c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08001798  08001798  00002798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800185c  0800185c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800185c  0800185c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800185c  0800185c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800185c  0800185c  0000285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001860  08001860  00002860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001864  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08001870  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001870  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd39  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cda  00000000  00000000  0000ed6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009828  00000000  00000000  00010a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0001a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbf  00000000  00000000  0001ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ea0  00000000  00000000  0001b8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f33c  00000000  00000000  00031787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000880ba  00000000  00000000  00040ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c8b7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001920  00000000  00000000  000c8bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000ca4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001780 	.word	0x08001780

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001780 	.word	0x08001780

0800014c <GOST_Crypt_32_E_Cicle>:
@param *GOST_Table - Указатель на таблицу замены ГОСТ(ДК) в 128 байтном формате
(вместо старшого полубайта 0)
@param GOST_Key - 32хбитная часть ключа(СК).
*/
void GOST_Crypt_32_E_Cicle(GOST_Data_Part *DATA, uint8_t *GOST_Table, uint32_t *GOST_Key)
{
 800014c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 8000150:	e9d0 5300 	ldrd	r5, r3, [r0]
{
 8000154:	4696      	mov	lr, r2
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 8000156:	f04f 0903 	mov.w	r9, #3
{
 800015a:	4683      	mov	fp, r0
 800015c:	b085      	sub	sp, #20
 800015e:	e9cd e702 	strd	lr, r7, [sp, #8]
 8000162:	3220      	adds	r2, #32
 8000164:	9200      	str	r2, [sp, #0]
//Key rotation:
//K0,K1,K2,K3,K4,K5,K6,K7, K0,K1,K2,K3,K4,K5,K6,K7, K0,K1,K2,K3,K4,K5,K6,K7, K7,K6,K5,K4,K3,K2,K1,K0

    for(k=0;k<3;k++)
    {
        for (j=0;j<8;j++)
 8000166:	46ae      	mov	lr, r5
 8000168:	9f02      	ldr	r7, [sp, #8]
 800016a:	461d      	mov	r5, r3
 800016c:	f8cd 9004 	str.w	r9, [sp, #4]
 8000170:	e000      	b.n	8000174 <GOST_Crypt_32_E_Cicle+0x28>
 8000172:	461d      	mov	r5, r3
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000174:	f857 2b04 	ldr.w	r2, [r7], #4
 8000178:	4413      	add	r3, r2
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 800017a:	f3c3 1403 	ubfx	r4, r3, #4, #4
        uint8_t low_subst = *(GOST_Table + low_nibble);
 800017e:	f003 020f 	and.w	r2, r3, #15
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000182:	3410      	adds	r4, #16
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 8000184:	f3c3 3603 	ubfx	r6, r3, #12, #4
        uint8_t low_nibble = tmp & 0x0F;
 8000188:	f3c3 2003 	ubfx	r0, r3, #8, #4
        S.parts[m] = low_subst | (high_subst << 4);
 800018c:	f811 a004 	ldrb.w	sl, [r1, r4]
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000190:	3630      	adds	r6, #48	@ 0x30
        S.parts[m] = low_subst | (high_subst << 4);
 8000192:	5c8c      	ldrb	r4, [r1, r2]
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 8000194:	f3c3 5803 	ubfx	r8, r3, #20, #4
        uint8_t low_nibble = tmp & 0x0F;
 8000198:	f3c3 4203 	ubfx	r2, r3, #16, #4
        uint8_t low_subst = *(GOST_Table + low_nibble);
 800019c:	3020      	adds	r0, #32
        S.parts[m] = low_subst | (high_subst << 4);
 800019e:	f811 9006 	ldrb.w	r9, [r1, r6]
 80001a2:	5c08      	ldrb	r0, [r1, r0]
        uint8_t low_nibble = tmp & 0x0F;
 80001a4:	f3c3 6603 	ubfx	r6, r3, #24, #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80001a8:	f108 0850 	add.w	r8, r8, #80	@ 0x50
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80001ac:	3240      	adds	r2, #64	@ 0x40
        S.parts[m] = low_subst | (high_subst << 4);
 80001ae:	f811 8008 	ldrb.w	r8, [r1, r8]
 80001b2:	5c8a      	ldrb	r2, [r1, r2]
 80001b4:	ea44 140a 	orr.w	r4, r4, sl, lsl #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80001b8:	eb01 7313 	add.w	r3, r1, r3, lsr #28
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80001bc:	3660      	adds	r6, #96	@ 0x60
        S.parts[m] = low_subst | (high_subst << 4);
 80001be:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80001c2:	5d8e      	ldrb	r6, [r1, r6]
 80001c4:	f364 0c07 	bfi	ip, r4, #0, #8
 80001c8:	ea40 1009 	orr.w	r0, r0, r9, lsl #4
 80001cc:	ea42 1208 	orr.w	r2, r2, r8, lsl #4
 80001d0:	f360 2c0f 	bfi	ip, r0, #8, #8
 80001d4:	f362 4c17 	bfi	ip, r2, #16, #8
 80001d8:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
        for (j=0;j<8;j++)
 80001dc:	9a00      	ldr	r2, [sp, #0]
        S.parts[m] = low_subst | (high_subst << 4);
 80001de:	f366 6c1f 	bfi	ip, r6, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 80001e2:	ea8e 537c 	eor.w	r3, lr, ip, ror #21
        for (j=0;j<8;j++)
 80001e6:	4297      	cmp	r7, r2
 80001e8:	46ae      	mov	lr, r5
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half]; // N2=N1
 80001ea:	f8cb 5000 	str.w	r5, [fp]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80001ee:	f8cb 3004 	str.w	r3, [fp, #4]
        for (j=0;j<8;j++)
 80001f2:	d1be      	bne.n	8000172 <GOST_Crypt_32_E_Cicle+0x26>
    for(k=0;k<3;k++)
 80001f4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80001f8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80001fc:	f012 09ff 	ands.w	r9, r2, #255	@ 0xff
 8000200:	d1b1      	bne.n	8000166 <GOST_Crypt_32_E_Cicle+0x1a>
            GOST_Key++;
        }
        GOST_Key=GOST_Key_tmp;
    }

    GOST_Key+=7;//K7
 8000202:	e9dd e702 	ldrd	lr, r7, [sp, #8]
 8000206:	f10e 061c 	add.w	r6, lr, #28

    for (j=0;j<7;j++)
 800020a:	e000      	b.n	800020e <GOST_Crypt_32_E_Cicle+0xc2>
 800020c:	4613      	mov	r3, r2
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800020e:	f856 2904 	ldr.w	r2, [r6], #-4
 8000212:	441a      	add	r2, r3
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 8000214:	f3c2 1003 	ubfx	r0, r2, #4, #4
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000218:	f002 0c0f 	and.w	ip, r2, #15
        uint8_t high_subst = *(GOST_Table + high_nibble);
 800021c:	3010      	adds	r0, #16
        S.parts[m] = low_subst | (high_subst << 4);
 800021e:	f811 a000 	ldrb.w	sl, [r1, r0]
 8000222:	f811 000c 	ldrb.w	r0, [r1, ip]
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 8000226:	f3c2 3803 	ubfx	r8, r2, #12, #4
        uint8_t low_nibble = tmp & 0x0F;
 800022a:	f3c2 2403 	ubfx	r4, r2, #8, #4
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 800022e:	f3c2 5c03 	ubfx	ip, r2, #20, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000232:	ea40 100a 	orr.w	r0, r0, sl, lsl #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000236:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 800023a:	f10c 0c50 	add.w	ip, ip, #80	@ 0x50
        S.parts[m] = low_subst | (high_subst << 4);
 800023e:	f360 0707 	bfi	r7, r0, #0, #8
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000242:	3420      	adds	r4, #32
        uint8_t low_nibble = tmp & 0x0F;
 8000244:	f3c2 4003 	ubfx	r0, r2, #16, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000248:	f811 9008 	ldrb.w	r9, [r1, r8]
 800024c:	5d0c      	ldrb	r4, [r1, r4]
 800024e:	f811 800c 	ldrb.w	r8, [r1, ip]
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000252:	3040      	adds	r0, #64	@ 0x40
        uint8_t low_nibble = tmp & 0x0F;
 8000254:	f3c2 6c03 	ubfx	ip, r2, #24, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000258:	5c08      	ldrb	r0, [r1, r0]
        uint8_t high_subst = *(GOST_Table + high_nibble);
 800025a:	eb01 7212 	add.w	r2, r1, r2, lsr #28
        uint8_t low_subst = *(GOST_Table + low_nibble);
 800025e:	f10c 0c60 	add.w	ip, ip, #96	@ 0x60
        S.parts[m] = low_subst | (high_subst << 4);
 8000262:	ea44 1409 	orr.w	r4, r4, r9, lsl #4
 8000266:	f892 9070 	ldrb.w	r9, [r2, #112]	@ 0x70
 800026a:	f811 200c 	ldrb.w	r2, [r1, ip]
 800026e:	f364 270f 	bfi	r7, r4, #8, #8
 8000272:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
 8000276:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
 800027a:	f360 4717 	bfi	r7, r0, #16, #8
 800027e:	f362 671f 	bfi	r7, r2, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 8000282:	ea85 5277 	eor.w	r2, r5, r7, ror #21
    for (j=0;j<7;j++)
 8000286:	45b6      	cmp	lr, r6
 8000288:	461d      	mov	r5, r3
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half]; // N2=N1
 800028a:	f8cb 3000 	str.w	r3, [fp]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800028e:	f8cb 2004 	str.w	r2, [fp, #4]
    for (j=0;j<7;j++)
 8000292:	d1bb      	bne.n	800020c <GOST_Crypt_32_E_Cicle+0xc0>
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000294:	f8de 0000 	ldr.w	r0, [lr]
 8000298:	4402      	add	r2, r0
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 800029a:	f3c2 1003 	ubfx	r0, r2, #4, #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 800029e:	3010      	adds	r0, #16
        S.parts[m] = low_subst | (high_subst << 4);
 80002a0:	5c0d      	ldrb	r5, [r1, r0]
 80002a2:	2000      	movs	r0, #0
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80002a4:	f002 040f 	and.w	r4, r2, #15
        S.parts[m] = low_subst | (high_subst << 4);
 80002a8:	5d0c      	ldrb	r4, [r1, r4]
 80002aa:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80002ae:	f364 0007 	bfi	r0, r4, #0, #8
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 80002b2:	f3c2 3403 	ubfx	r4, r2, #12, #4
        GOST_Table += _GOST_TABLE_MAX_NODE_VALUE;
 80002b6:	f101 0520 	add.w	r5, r1, #32
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80002ba:	3410      	adds	r4, #16
        S.parts[m] = low_subst | (high_subst << 4);
 80002bc:	5d2e      	ldrb	r6, [r5, r4]
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80002be:	f3c2 2403 	ubfx	r4, r2, #8, #4
        S.parts[m] = low_subst | (high_subst << 4);
 80002c2:	5d2c      	ldrb	r4, [r5, r4]
        GOST_Table += _GOST_TABLE_MAX_NODE_VALUE;
 80002c4:	f101 0540 	add.w	r5, r1, #64	@ 0x40
        S.parts[m] = low_subst | (high_subst << 4);
 80002c8:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 80002cc:	f364 200f 	bfi	r0, r4, #8, #8
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 80002d0:	f3c2 5403 	ubfx	r4, r2, #20, #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80002d4:	3410      	adds	r4, #16
        S.parts[m] = low_subst | (high_subst << 4);
 80002d6:	5d2e      	ldrb	r6, [r5, r4]
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80002d8:	f3c2 4403 	ubfx	r4, r2, #16, #4
        S.parts[m] = low_subst | (high_subst << 4);
 80002dc:	5d2c      	ldrb	r4, [r5, r4]
        GOST_Table += _GOST_TABLE_MAX_NODE_VALUE;
 80002de:	3160      	adds	r1, #96	@ 0x60
        S.parts[m] = low_subst | (high_subst << 4);
 80002e0:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 80002e4:	f364 4017 	bfi	r0, r4, #16, #8
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80002e8:	eb01 7412 	add.w	r4, r1, r2, lsr #28
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80002ec:	f3c2 6203 	ubfx	r2, r2, #24, #4
        S.parts[m] = low_subst | (high_subst << 4);
 80002f0:	5c8a      	ldrb	r2, [r1, r2]
 80002f2:	7c21      	ldrb	r1, [r4, #16]
 80002f4:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80002f8:	f362 601f 	bfi	r0, r2, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 80002fc:	ea83 5370 	eor.w	r3, r3, r0, ror #21
        (*DATA).half[_GOST_Data_Part_N2_Half] = S.full; // N2=S
 8000300:	f8cb 3000 	str.w	r3, [fp]
    {
        GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Next_Step ) ;
        GOST_Key--;
    }
    GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Last_Step ) ;
}
 8000304:	b005      	add	sp, #20
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	bf00      	nop

0800030c <GOST_Crypt_32_D_Cicle>:
(вместо старшого полубайта 0)
@param GOST_Key - 32хбитная часть ключа(СК).
*/
//Basic 32-P decryption algorithm of GOST, usefull only in SR mode
void GOST_Crypt_32_D_Cicle(GOST_Data_Part *DATA, uint8_t *GOST_Table, uint32_t *GOST_Key)
{
 800030c:	4613      	mov	r3, r2
 800030e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000312:	b085      	sub	sp, #20
 8000314:	9200      	str	r2, [sp, #0]
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 8000316:	4698      	mov	r8, r3
 8000318:	e9d0 9200 	ldrd	r9, r2, [r0]
 800031c:	f103 0b20 	add.w	fp, r3, #32
 8000320:	9701      	str	r7, [sp, #4]
 8000322:	e000      	b.n	8000326 <GOST_Crypt_32_D_Cicle+0x1a>
 8000324:	461a      	mov	r2, r3
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 8000326:	f858 3b04 	ldr.w	r3, [r8], #4
 800032a:	4413      	add	r3, r2
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 800032c:	f3c3 1703 	ubfx	r7, r3, #4, #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000330:	3710      	adds	r7, #16
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000332:	f003 060f 	and.w	r6, r3, #15
        S.parts[m] = low_subst | (high_subst << 4);
 8000336:	f811 a007 	ldrb.w	sl, [r1, r7]
 800033a:	5d8e      	ldrb	r6, [r1, r6]
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 800033c:	f3c3 3e03 	ubfx	lr, r3, #12, #4
        uint8_t low_nibble = tmp & 0x0F;
 8000340:	f3c3 2503 	ubfx	r5, r3, #8, #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000344:	f10e 0e30 	add.w	lr, lr, #48	@ 0x30
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000348:	3520      	adds	r5, #32
        S.parts[m] = low_subst | (high_subst << 4);
 800034a:	f811 e00e 	ldrb.w	lr, [r1, lr]
 800034e:	5d4d      	ldrb	r5, [r1, r5]
 8000350:	ea46 160a 	orr.w	r6, r6, sl, lsl #4
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 8000354:	f3c3 5703 	ubfx	r7, r3, #20, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000358:	f366 0407 	bfi	r4, r6, #0, #8
        uint8_t low_nibble = tmp & 0x0F;
 800035c:	f3c3 4603 	ubfx	r6, r3, #16, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000360:	ea45 150e 	orr.w	r5, r5, lr, lsl #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000364:	3750      	adds	r7, #80	@ 0x50
        uint8_t low_nibble = tmp & 0x0F;
 8000366:	f3c3 6e03 	ubfx	lr, r3, #24, #4
        uint8_t low_subst = *(GOST_Table + low_nibble);
 800036a:	3640      	adds	r6, #64	@ 0x40
        S.parts[m] = low_subst | (high_subst << 4);
 800036c:	5dcf      	ldrb	r7, [r1, r7]
 800036e:	5d8e      	ldrb	r6, [r1, r6]
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000370:	eb01 7313 	add.w	r3, r1, r3, lsr #28
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000374:	f10e 0e60 	add.w	lr, lr, #96	@ 0x60
        S.parts[m] = low_subst | (high_subst << 4);
 8000378:	f893 a070 	ldrb.w	sl, [r3, #112]	@ 0x70
 800037c:	f811 300e 	ldrb.w	r3, [r1, lr]
 8000380:	f365 240f 	bfi	r4, r5, #8, #8
 8000384:	ea46 1607 	orr.w	r6, r6, r7, lsl #4
 8000388:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
 800038c:	f366 4417 	bfi	r4, r6, #16, #8
 8000390:	f363 641f 	bfi	r4, r3, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 8000394:	ea89 5374 	eor.w	r3, r9, r4, ror #21
    uint8_t k,j;
//Key rotation:
//K0,K1,K2,K3,K4,K5,K6,K7, K7,K6,K5,K4,K3,K2,K1,K0, K7,K6,K5,K4,K3,K2,K1,K0, K7,K6,K5,K4,K3,K2,K1,K0
    for (j=0;j<8;j++)
 8000398:	45d8      	cmp	r8, fp
 800039a:	4691      	mov	r9, r2
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half]; // N2=N1
 800039c:	6002      	str	r2, [r0, #0]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 800039e:	6043      	str	r3, [r0, #4]
    for (j=0;j<8;j++)
 80003a0:	d1c0      	bne.n	8000324 <GOST_Crypt_32_D_Cicle+0x18>
 80003a2:	2502      	movs	r5, #2
 80003a4:	9f01      	ldr	r7, [sp, #4]
 80003a6:	e9cd b702 	strd	fp, r7, [sp, #8]
 80003aa:	462f      	mov	r7, r5
        GOST_Key++;
    }
//GOST_Key offset =  GOST_Key + _GOST_32_3P_CICLE_ITERS_J
    for(k=0;k<2;k++)
    {
        for (j=0;j<8;j++)
 80003ac:	4696      	mov	lr, r2
 80003ae:	9c02      	ldr	r4, [sp, #8]
 80003b0:	461a      	mov	r2, r3
 80003b2:	9701      	str	r7, [sp, #4]
 80003b4:	e000      	b.n	80003b8 <GOST_Crypt_32_D_Cicle+0xac>
 80003b6:	461a      	mov	r2, r3
        {
            GOST_Key--;
 80003b8:	46a3      	mov	fp, r4
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80003ba:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80003be:	442b      	add	r3, r5
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 80003c0:	f3c3 1703 	ubfx	r7, r3, #4, #4
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80003c4:	f003 050f 	and.w	r5, r3, #15
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80003c8:	3710      	adds	r7, #16
        S.parts[m] = low_subst | (high_subst << 4);
 80003ca:	f811 a007 	ldrb.w	sl, [r1, r7]
 80003ce:	5d4f      	ldrb	r7, [r1, r5]
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 80003d0:	f3c3 3903 	ubfx	r9, r3, #12, #4
        uint8_t low_nibble = tmp & 0x0F;
 80003d4:	f3c3 2603 	ubfx	r6, r3, #8, #4
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 80003d8:	f3c3 5803 	ubfx	r8, r3, #20, #4
        uint8_t low_nibble = tmp & 0x0F;
 80003dc:	f3c3 4503 	ubfx	r5, r3, #16, #4
        S.parts[m] = low_subst | (high_subst << 4);
 80003e0:	ea47 170a 	orr.w	r7, r7, sl, lsl #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80003e4:	f109 0930 	add.w	r9, r9, #48	@ 0x30
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80003e8:	3620      	adds	r6, #32
        S.parts[m] = low_subst | (high_subst << 4);
 80003ea:	f811 9009 	ldrb.w	r9, [r1, r9]
 80003ee:	5d8e      	ldrb	r6, [r1, r6]
 80003f0:	f367 0c07 	bfi	ip, r7, #0, #8
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80003f4:	f108 0850 	add.w	r8, r8, #80	@ 0x50
        uint8_t low_nibble = tmp & 0x0F;
 80003f8:	f3c3 6703 	ubfx	r7, r3, #24, #4
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80003fc:	3540      	adds	r5, #64	@ 0x40
        S.parts[m] = low_subst | (high_subst << 4);
 80003fe:	f811 8008 	ldrb.w	r8, [r1, r8]
 8000402:	5d4d      	ldrb	r5, [r1, r5]
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000404:	eb01 7313 	add.w	r3, r1, r3, lsr #28
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000408:	3760      	adds	r7, #96	@ 0x60
        S.parts[m] = low_subst | (high_subst << 4);
 800040a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800040e:	5dcf      	ldrb	r7, [r1, r7]
 8000410:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
 8000414:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
 8000418:	f366 2c0f 	bfi	ip, r6, #8, #8
 800041c:	f365 4c17 	bfi	ip, r5, #16, #8
 8000420:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
        for (j=0;j<8;j++)
 8000424:	9d00      	ldr	r5, [sp, #0]
        S.parts[m] = low_subst | (high_subst << 4);
 8000426:	f367 6c1f 	bfi	ip, r7, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 800042a:	ea8e 537c 	eor.w	r3, lr, ip, ror #21
        for (j=0;j<8;j++)
 800042e:	42a5      	cmp	r5, r4
 8000430:	4696      	mov	lr, r2
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half]; // N2=N1
 8000432:	6002      	str	r2, [r0, #0]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 8000434:	6043      	str	r3, [r0, #4]
        for (j=0;j<8;j++)
 8000436:	d1be      	bne.n	80003b6 <GOST_Crypt_32_D_Cicle+0xaa>
    for(k=0;k<2;k++)
 8000438:	9f01      	ldr	r7, [sp, #4]
 800043a:	2f01      	cmp	r7, #1
 800043c:	d001      	beq.n	8000442 <GOST_Crypt_32_D_Cicle+0x136>
 800043e:	2701      	movs	r7, #1
 8000440:	e7b4      	b.n	80003ac <GOST_Crypt_32_D_Cicle+0xa0>
 8000442:	46dc      	mov	ip, fp
 8000444:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8000448:	e000      	b.n	800044c <GOST_Crypt_32_D_Cicle+0x140>
 800044a:	4623      	mov	r3, r4
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 800044c:	f85b 4d04 	ldr.w	r4, [fp, #-4]!
 8000450:	441c      	add	r4, r3
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 8000452:	f3c4 1503 	ubfx	r5, r4, #4, #4
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000456:	f004 0e0f 	and.w	lr, r4, #15
        uint8_t high_subst = *(GOST_Table + high_nibble);
 800045a:	3510      	adds	r5, #16
        S.parts[m] = low_subst | (high_subst << 4);
 800045c:	f811 a005 	ldrb.w	sl, [r1, r5]
 8000460:	f811 500e 	ldrb.w	r5, [r1, lr]
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 8000464:	f3c4 3803 	ubfx	r8, r4, #12, #4
        uint8_t low_nibble = tmp & 0x0F;
 8000468:	f3c4 2603 	ubfx	r6, r4, #8, #4
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 800046c:	f3c4 5e03 	ubfx	lr, r4, #20, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000470:	ea45 150a 	orr.w	r5, r5, sl, lsl #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000474:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 8000478:	f10e 0e50 	add.w	lr, lr, #80	@ 0x50
        S.parts[m] = low_subst | (high_subst << 4);
 800047c:	f365 0707 	bfi	r7, r5, #0, #8
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000480:	3620      	adds	r6, #32
        uint8_t low_nibble = tmp & 0x0F;
 8000482:	f3c4 4503 	ubfx	r5, r4, #16, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000486:	f811 9008 	ldrb.w	r9, [r1, r8]
 800048a:	5d8e      	ldrb	r6, [r1, r6]
 800048c:	f811 800e 	ldrb.w	r8, [r1, lr]
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000490:	3540      	adds	r5, #64	@ 0x40
        uint8_t low_nibble = tmp & 0x0F;
 8000492:	f3c4 6e03 	ubfx	lr, r4, #24, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000496:	5d4d      	ldrb	r5, [r1, r5]
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000498:	eb01 7414 	add.w	r4, r1, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + low_nibble);
 800049c:	f10e 0e60 	add.w	lr, lr, #96	@ 0x60
        S.parts[m] = low_subst | (high_subst << 4);
 80004a0:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
 80004a4:	f894 9070 	ldrb.w	r9, [r4, #112]	@ 0x70
 80004a8:	f811 400e 	ldrb.w	r4, [r1, lr]
 80004ac:	f366 270f 	bfi	r7, r6, #8, #8
 80004b0:	ea45 1508 	orr.w	r5, r5, r8, lsl #4
 80004b4:	ea44 1409 	orr.w	r4, r4, r9, lsl #4
 80004b8:	f365 4717 	bfi	r7, r5, #16, #8
 80004bc:	f364 671f 	bfi	r7, r4, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 80004c0:	ea82 5477 	eor.w	r4, r2, r7, ror #21
            GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Next_Step ) ;
        }
        GOST_Key+=8;
    }
    for (j=0;j<7;j++)
 80004c4:	45e3      	cmp	fp, ip
 80004c6:	461a      	mov	r2, r3
        (*DATA).half[_GOST_Data_Part_N2_Half] = (*DATA).half[_GOST_Data_Part_N1_Half]; // N2=N1
 80004c8:	6003      	str	r3, [r0, #0]
        (*DATA).half[_GOST_Data_Part_N1_Half] = S.full; // N1=S
 80004ca:	6044      	str	r4, [r0, #4]
    for (j=0;j<7;j++)
 80004cc:	d1bd      	bne.n	800044a <GOST_Crypt_32_D_Cicle+0x13e>
    S.full = (uint32_t)((*DATA).half[_GOST_Data_Part_N1_Half] + GOST_Key);
 80004ce:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 80004d2:	4414      	add	r4, r2
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 80004d4:	f3c4 1203 	ubfx	r2, r4, #4, #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80004d8:	3210      	adds	r2, #16
        S.parts[m] = low_subst | (high_subst << 4);
 80004da:	5c8e      	ldrb	r6, [r1, r2]
 80004dc:	2200      	movs	r2, #0
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80004de:	f004 050f 	and.w	r5, r4, #15
        S.parts[m] = low_subst | (high_subst << 4);
 80004e2:	5d4d      	ldrb	r5, [r1, r5]
 80004e4:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 80004e8:	f365 0207 	bfi	r2, r5, #0, #8
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 80004ec:	f3c4 3503 	ubfx	r5, r4, #12, #4
        GOST_Table += _GOST_TABLE_MAX_NODE_VALUE;
 80004f0:	f101 0620 	add.w	r6, r1, #32
        uint8_t high_subst = *(GOST_Table + high_nibble);
 80004f4:	3510      	adds	r5, #16
        S.parts[m] = low_subst | (high_subst << 4);
 80004f6:	5d77      	ldrb	r7, [r6, r5]
        uint8_t low_subst = *(GOST_Table + low_nibble);
 80004f8:	f3c4 2503 	ubfx	r5, r4, #8, #4
        S.parts[m] = low_subst | (high_subst << 4);
 80004fc:	5d75      	ldrb	r5, [r6, r5]
        GOST_Table += _GOST_TABLE_MAX_NODE_VALUE;
 80004fe:	f101 0640 	add.w	r6, r1, #64	@ 0x40
        S.parts[m] = low_subst | (high_subst << 4);
 8000502:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
 8000506:	f365 220f 	bfi	r2, r5, #8, #8
        uint8_t high_nibble = (tmp & 0xF0) >> 4;
 800050a:	f3c4 5503 	ubfx	r5, r4, #20, #4
        uint8_t high_subst = *(GOST_Table + high_nibble);
 800050e:	3510      	adds	r5, #16
        S.parts[m] = low_subst | (high_subst << 4);
 8000510:	5d77      	ldrb	r7, [r6, r5]
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000512:	f3c4 4503 	ubfx	r5, r4, #16, #4
        S.parts[m] = low_subst | (high_subst << 4);
 8000516:	5d75      	ldrb	r5, [r6, r5]
        GOST_Table += _GOST_TABLE_MAX_NODE_VALUE;
 8000518:	3160      	adds	r1, #96	@ 0x60
        S.parts[m] = low_subst | (high_subst << 4);
 800051a:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
 800051e:	f365 4217 	bfi	r2, r5, #16, #8
        uint8_t high_subst = *(GOST_Table + high_nibble);
 8000522:	eb01 7514 	add.w	r5, r1, r4, lsr #28
        uint8_t low_subst = *(GOST_Table + low_nibble);
 8000526:	f3c4 6403 	ubfx	r4, r4, #24, #4
        S.parts[m] = low_subst | (high_subst << 4);
 800052a:	5d09      	ldrb	r1, [r1, r4]
 800052c:	7c2c      	ldrb	r4, [r5, #16]
 800052e:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 8000532:	f361 621f 	bfi	r2, r1, #24, #8
    S.full = (*DATA).half[_GOST_Data_Part_N2_Half] ^ rotated;
 8000536:	ea83 5372 	eor.w	r3, r3, r2, ror #21
        (*DATA).half[_GOST_Data_Part_N2_Half] = S.full; // N2=S
 800053a:	6003      	str	r3, [r0, #0]
        GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Next_Step ) ;
    }
    GOST_Key--;
    GOST_Crypt_Step(DATA, GOST_Table, *GOST_Key,_GOST_Last_Step ) ;

}
 800053c:	b005      	add	sp, #20
 800053e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000542:	bf00      	nop

08000544 <GOST_Encrypt_SR>:
@param Mode - Если _GOST_Mode_Encrypt шифрования, _GOST_Mode_Decrypt - расшифрование
@param *GOST_Table - Указатель на таблицу замены ГОСТ(ДК) в 128 байтном формате
(вместо старшого полубайта 0)
@param *GOST_Key - Указатель на 256 битный массив ключа(СК).
*/
void GOST_Encrypt_SR(uint8_t *Data, uint32_t Size, bool Mode, uint8_t *GOST_Table, uint8_t *GOST_Key ) {
 8000544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
    uint8_t Cur_Part_Size;
    GOST_Data_Part Data_prep;
    uint32_t *GOST_Key_pt=(uint32_t *) GOST_Key;

    while (Size!=0) {
 800054e:	b369      	cbz	r1, 80005ac <GOST_Encrypt_SR+0x68>
 8000550:	4606      	mov	r6, r0
 8000552:	4692      	mov	sl, r2
 8000554:	4698      	mov	r8, r3
 8000556:	460d      	mov	r5, r1
 8000558:	466c      	mov	r4, sp
 800055a:	b352      	cbz	r2, 80005b2 <GOST_Encrypt_SR+0x6e>
        Cur_Part_Size=_Min(_GOST_Part_Size,Size);
        memset(&Data_prep,_GOST_Def_Byte,sizeof(Data_prep));
 800055c:	f04f 0a00 	mov.w	sl, #0
        Cur_Part_Size=_Min(_GOST_Part_Size,Size);
 8000560:	2d08      	cmp	r5, #8
 8000562:	462f      	mov	r7, r5
 8000564:	bf28      	it	cs
 8000566:	2708      	movcs	r7, #8
        memcpy(&Data_prep,Data,Cur_Part_Size);
 8000568:	4631      	mov	r1, r6
 800056a:	463a      	mov	r2, r7
 800056c:	4620      	mov	r0, r4
        memset(&Data_prep,_GOST_Def_Byte,sizeof(Data_prep));
 800056e:	e9c4 aa00 	strd	sl, sl, [r4]
        memcpy(&Data_prep,Data,Cur_Part_Size);
 8000572:	f001 f8f7 	bl	8001764 <memcpy>
#if _GOST_ROT==1
        Data_prep.half[_GOST_Data_Part_N2_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N2_Half]);
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8000576:	e9dd 2300 	ldrd	r2, r3, [sp]
#endif
        if (Mode==_GOST_Mode_Encrypt) {
            GOST_Crypt_32_E_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 800057a:	4641      	mov	r1, r8
        Data_prep.half[_GOST_Data_Part_N2_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 800057c:	fa92 fc82 	rev.w	ip, r2
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8000580:	ba1b      	rev	r3, r3
            GOST_Crypt_32_E_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 8000582:	464a      	mov	r2, r9
 8000584:	4620      	mov	r0, r4
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 8000586:	e9cd c300 	strd	ip, r3, [sp]
            GOST_Crypt_32_E_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 800058a:	f7ff fddf 	bl	800014c <GOST_Crypt_32_E_Cicle>
        } else {
            GOST_Crypt_32_D_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
        }
#if _GOST_ROT==1
        Data_prep.half[_GOST_Data_Part_N2_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N2_Half]);
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 800058e:	e9dd 3200 	ldrd	r3, r2, [sp]
#endif
        memcpy(Data,&Data_prep, Cur_Part_Size);
 8000592:	4630      	mov	r0, r6
        Data_prep.half[_GOST_Data_Part_N2_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 8000594:	fa93 fc83 	rev.w	ip, r3
        memcpy(Data,&Data_prep, Cur_Part_Size);
 8000598:	4621      	mov	r1, r4
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 800059a:	ba13      	rev	r3, r2
        memcpy(Data,&Data_prep, Cur_Part_Size);
 800059c:	463a      	mov	r2, r7
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 800059e:	e9cd c300 	strd	ip, r3, [sp]
        memcpy(Data,&Data_prep, Cur_Part_Size);
 80005a2:	f001 f8df 	bl	8001764 <memcpy>
    while (Size!=0) {
 80005a6:	1bed      	subs	r5, r5, r7
        Data+=Cur_Part_Size;
 80005a8:	443e      	add	r6, r7
    while (Size!=0) {
 80005aa:	d1d9      	bne.n	8000560 <GOST_Encrypt_SR+0x1c>
        Size-=Cur_Part_Size;
    }
}
 80005ac:	b002      	add	sp, #8
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Cur_Part_Size=_Min(_GOST_Part_Size,Size);
 80005b2:	2d08      	cmp	r5, #8
 80005b4:	462f      	mov	r7, r5
 80005b6:	bf28      	it	cs
 80005b8:	2708      	movcs	r7, #8
        memcpy(&Data_prep,Data,Cur_Part_Size);
 80005ba:	4631      	mov	r1, r6
 80005bc:	463a      	mov	r2, r7
 80005be:	4620      	mov	r0, r4
        memset(&Data_prep,_GOST_Def_Byte,sizeof(Data_prep));
 80005c0:	e9c4 aa00 	strd	sl, sl, [r4]
        memcpy(&Data_prep,Data,Cur_Part_Size);
 80005c4:	f001 f8ce 	bl	8001764 <memcpy>
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 80005c8:	e9dd 2300 	ldrd	r2, r3, [sp]
            GOST_Crypt_32_D_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 80005cc:	4641      	mov	r1, r8
        Data_prep.half[_GOST_Data_Part_N2_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 80005ce:	fa92 fc82 	rev.w	ip, r2
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 80005d2:	ba1b      	rev	r3, r3
            GOST_Crypt_32_D_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 80005d4:	464a      	mov	r2, r9
 80005d6:	4620      	mov	r0, r4
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 80005d8:	e9cd c300 	strd	ip, r3, [sp]
            GOST_Crypt_32_D_Cicle(&Data_prep,GOST_Table,GOST_Key_pt);
 80005dc:	f7ff fe96 	bl	800030c <GOST_Crypt_32_D_Cicle>
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 80005e0:	e9dd 2300 	ldrd	r2, r3, [sp]
        memcpy(Data,&Data_prep, Cur_Part_Size);
 80005e4:	4630      	mov	r0, r6
        Data_prep.half[_GOST_Data_Part_N2_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N2_Half]);
 80005e6:	fa92 fc82 	rev.w	ip, r2
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 80005ea:	ba1b      	rev	r3, r3
        memcpy(Data,&Data_prep, Cur_Part_Size);
 80005ec:	463a      	mov	r2, r7
 80005ee:	4621      	mov	r1, r4
        Data_prep.half[_GOST_Data_Part_N1_Half] = __builtin_bswap32(Data_prep.half[_GOST_Data_Part_N1_Half]);
 80005f0:	e9cd c300 	strd	ip, r3, [sp]
        memcpy(Data,&Data_prep, Cur_Part_Size);
 80005f4:	f001 f8b6 	bl	8001764 <memcpy>
    while (Size!=0) {
 80005f8:	1bed      	subs	r5, r5, r7
        Data+=Cur_Part_Size;
 80005fa:	443e      	add	r6, r7
    while (Size!=0) {
 80005fc:	d1d9      	bne.n	80005b2 <GOST_Encrypt_SR+0x6e>
 80005fe:	e7d5      	b.n	80005ac <GOST_Encrypt_SR+0x68>

08000600 <gost_main>:
// }



/* GOST test function */
int gost_main() {
 8000600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000604:	f2ad 4dcc 	subw	sp, sp, #1228	@ 0x4cc
    // Define the 256-bit key (32 bytes)
    uint8_t key[32] = {
 8000608:	ae0a      	add	r6, sp, #40	@ 0x28
 800060a:	4635      	mov	r5, r6
 800060c:	4c50      	ldr	r4, [pc, #320]	@ (8000750 <gost_main+0x150>)
 800060e:	f10d 0a67 	add.w	sl, sp, #103	@ 0x67
 8000612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000616:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800061a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    };

    // Define a sample S-box (128 bytes, 8 rows of 16 nibbles)
    // Note: Replace with the actual GOST S-box for correct operation
    uint8_t sbox[128] = {
 800061e:	2280      	movs	r2, #128	@ 0x80
 8000620:	f104 0110 	add.w	r1, r4, #16
 8000624:	a812      	add	r0, sp, #72	@ 0x48
 8000626:	f001 f89d 	bl	8001764 <memcpy>
    0x09, 0x0B, 0x0C, 0x00, 0x03, 0x06, 0x07, 0x05, 0x04, 0x08, 0x0E, 0x0F, 0x01, 0x0A, 0x02, 0x0D,
    0x0C, 0x06, 0x05, 0x02, 0x0B, 0x00, 0x09, 0x0D, 0x03, 0x0E, 0x07, 0x0A, 0x0F, 0x04, 0x01, 0x08
    };

    uint8_t sbox2[4*256];
    for(int i = 0; i < 4; i++){
 800062a:	aa32      	add	r2, sp, #200	@ 0xc8
    uint8_t sbox[128] = {
 800062c:	2000      	movs	r0, #0
 800062e:	4613      	mov	r3, r2
 8000630:	4602      	mov	r2, r0
 8000632:	4618      	mov	r0, r3
      for(int j = 0; j < 16; j++)
      for(int k = 0; k < 16; k++){
        sbox2[i*256+j*16+k] = sbox[i*32+j+16]*16 + sbox[i*32+k];
 8000634:	4601      	mov	r1, r0
 8000636:	f85a bc1f 	ldr.w	fp, [sl, #-31]
 800063a:	f85a 9c1b 	ldr.w	r9, [sl, #-27]
 800063e:	f00b 337f 	and.w	r3, fp, #2139062143	@ 0x7f7f7f7f
 8000642:	f85a 8c17 	ldr.w	r8, [sl, #-23]
 8000646:	f85a ec13 	ldr.w	lr, [sl, #-19]
 800064a:	9305      	str	r3, [sp, #20]
 800064c:	f009 337f 	and.w	r3, r9, #2139062143	@ 0x7f7f7f7f
 8000650:	9304      	str	r3, [sp, #16]
 8000652:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8000656:	f008 337f 	and.w	r3, r8, #2139062143	@ 0x7f7f7f7f
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	f00e 337f 	and.w	r3, lr, #2139062143	@ 0x7f7f7f7f
 8000660:	f1aa 0c10 	sub.w	ip, sl, #16
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2300      	movs	r3, #0
 8000668:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800066c:	9d05      	ldr	r5, [sp, #20]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	f362 0307 	bfi	r3, r2, #0, #8
 8000676:	f362 230f 	bfi	r3, r2, #8, #8
 800067a:	f362 4317 	bfi	r3, r2, #16, #8
 800067e:	f362 631f 	bfi	r3, r2, #24, #8
 8000682:	f003 327f 	and.w	r2, r3, #2139062143	@ 0x7f7f7f7f
 8000686:	ea8b 0703 	eor.w	r7, fp, r3
 800068a:	4415      	add	r5, r2
 800068c:	f007 3780 	and.w	r7, r7, #2155905152	@ 0x80808080
      for(int j = 0; j < 16; j++)
 8000690:	3110      	adds	r1, #16
        sbox2[i*256+j*16+k] = sbox[i*32+j+16]*16 + sbox[i*32+k];
 8000692:	407d      	eors	r5, r7
 8000694:	f841 5c10 	str.w	r5, [r1, #-16]
 8000698:	9d04      	ldr	r5, [sp, #16]
 800069a:	ea89 0403 	eor.w	r4, r9, r3
 800069e:	4415      	add	r5, r2
 80006a0:	f004 3480 	and.w	r4, r4, #2155905152	@ 0x80808080
 80006a4:	406c      	eors	r4, r5
 80006a6:	f841 4c0c 	str.w	r4, [r1, #-12]
 80006aa:	9c03      	ldr	r4, [sp, #12]
 80006ac:	ea88 0003 	eor.w	r0, r8, r3
 80006b0:	4414      	add	r4, r2
 80006b2:	f000 3080 	and.w	r0, r0, #2155905152	@ 0x80808080
 80006b6:	4060      	eors	r0, r4
 80006b8:	f841 0c08 	str.w	r0, [r1, #-8]
 80006bc:	9802      	ldr	r0, [sp, #8]
 80006be:	ea8e 0303 	eor.w	r3, lr, r3
 80006c2:	f003 3380 	and.w	r3, r3, #2155905152	@ 0x80808080
 80006c6:	4402      	add	r2, r0
 80006c8:	4053      	eors	r3, r2
      for(int j = 0; j < 16; j++)
 80006ca:	45e2      	cmp	sl, ip
        sbox2[i*256+j*16+k] = sbox[i*32+j+16]*16 + sbox[i*32+k];
 80006cc:	f841 3c04 	str.w	r3, [r1, #-4]
      for(int j = 0; j < 16; j++)
 80006d0:	d1c9      	bne.n	8000666 <gost_main+0x66>
    for(int i = 0; i < 4; i++){
 80006d2:	e9dd 2006 	ldrd	r2, r0, [sp, #24]
 80006d6:	3210      	adds	r2, #16
 80006d8:	2a40      	cmp	r2, #64	@ 0x40
 80006da:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 80006de:	f10a 0a20 	add.w	sl, sl, #32
 80006e2:	d1a7      	bne.n	8000634 <gost_main+0x34>
      }
    }

    // Define plaintext (64-bit block, 8 bytes)
    uint8_t plaintext[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80006e4:	2200      	movs	r2, #0
    // memcpy(ciphertext, plaintext, 8); // plaintext now contains ciphertext

    // Measure performance: Encrypt multiple times
    uint32_t total_time = 0;
    uint32_t iterations = 20000;
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 80006e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ea:	481a      	ldr	r0, [pc, #104]	@ (8000754 <gost_main+0x154>)
    uint8_t plaintext[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80006ec:	e9cd 2208 	strd	r2, r2, [sp, #32]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 80006f0:	f000 fc0e 	bl	8000f10 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                          // Wait 5 seconds
 80006f4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006f8:	f000 f98c 	bl	8000a14 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000702:	4814      	ldr	r0, [pc, #80]	@ (8000754 <gost_main+0x154>)
 8000704:	f000 fc04 	bl	8000f10 <HAL_GPIO_WritePin>

    uint32_t start_time = HAL_GetTick();
 8000708:	f644 6420 	movw	r4, #20000	@ 0x4e20
 800070c:	f000 f97c 	bl	8000a08 <HAL_GetTick>
    for (uint32_t i = 0; i < iterations; i++) {
        GOST_Encrypt_SR(plaintext, 8, _GOST_Mode_Encrypt, sbox2, key);
 8000710:	2201      	movs	r2, #1
 8000712:	2108      	movs	r1, #8
 8000714:	ab32      	add	r3, sp, #200	@ 0xc8
 8000716:	a808      	add	r0, sp, #32
 8000718:	9600      	str	r6, [sp, #0]
 800071a:	f7ff ff13 	bl	8000544 <GOST_Encrypt_SR>
    for (uint32_t i = 0; i < iterations; i++) {
 800071e:	3c01      	subs	r4, #1
 8000720:	d1f6      	bne.n	8000710 <gost_main+0x110>
    }
    uint32_t end_time = HAL_GetTick();
 8000722:	f000 f971 	bl	8000a08 <HAL_GetTick>
    uint32_t elapsed = end_time - start_time;
    total_time += elapsed;

    // Indicate test result via LED
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8000726:	4622      	mov	r2, r4
 8000728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <gost_main+0x154>)
 800072e:	f000 fbef 	bl	8000f10 <HAL_GPIO_WritePin>
    HAL_Delay(3000);
 8000732:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000736:	f000 f96d 	bl	8000a14 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <gost_main+0x154>)
 8000742:	f000 fbe5 	bl	8000f10 <HAL_GPIO_WritePin>

    return result;
}
 8000746:	4620      	mov	r0, r4
 8000748:	f20d 4dcc 	addw	sp, sp, #1228	@ 0x4cc
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	08001798 	.word	0x08001798
 8000754:	40011000 	.word	0x40011000

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075c:	2224      	movs	r2, #36	@ 0x24
 800075e:	2100      	movs	r1, #0
 8000760:	a807      	add	r0, sp, #28
 8000762:	f000 ffd3 	bl	800170c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000766:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076a:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000778:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f000 fbca 	bl	8000f18 <HAL_RCC_OscConfig>
 8000784:	b108      	cbz	r0, 800078a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000786:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	4601      	mov	r1, r0
 800078c:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079a:	f000 fdab 	bl	80012f4 <HAL_RCC_ClockConfig>
 800079e:	b108      	cbz	r0, 80007a4 <SystemClock_Config+0x4c>
 80007a0:	b672      	cpsid	i
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <SystemClock_Config+0x4a>
}
 80007a4:	b011      	add	sp, #68	@ 0x44
 80007a6:	bd30      	pop	{r4, r5, pc}

080007a8 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	2400      	movs	r4, #0
{
 80007aa:	b500      	push	{lr}
 80007ac:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 80007ae:	f000 f90d 	bl	80009cc <HAL_Init>
  SystemClock_Config();
 80007b2:	f7ff ffd1 	bl	8000758 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80007ba:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <main+0xe8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c6:	4833      	ldr	r0, [pc, #204]	@ (8000894 <main+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c8:	f042 0210 	orr.w	r2, r2, #16
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 80007d0:	4d31      	ldr	r5, [pc, #196]	@ (8000898 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	f002 0210 	and.w	r2, r2, #16
 80007d6:	9200      	str	r2, [sp, #0]
 80007d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	699a      	ldr	r2, [r3, #24]
 80007dc:	f042 0204 	orr.w	r2, r2, #4
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007e4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ee:	f000 fb8f 	bl	8000f10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	e9cd 1204 	strd	r1, r2, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	4825      	ldr	r0, [pc, #148]	@ (8000894 <main+0xec>)
 8000800:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000806:	f000 f97d 	bl	8000b04 <HAL_GPIO_Init>
  htim1.Init.Period = 65535;
 800080a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim1.Instance = TIM1;
 800080e:	4a23      	ldr	r2, [pc, #140]	@ (800089c <main+0xf4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000810:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000816:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 800081e:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Instance = TIM1;
 8000822:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = 65535;
 8000824:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000826:	9402      	str	r4, [sp, #8]
  htim1.Init.RepetitionCounter = 0;
 8000828:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	9403      	str	r4, [sp, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800082c:	f000 fe24 	bl	8001478 <HAL_TIM_Base_Init>
 8000830:	b108      	cbz	r0, 8000836 <main+0x8e>
 8000832:	b672      	cpsid	i
  while (1)
 8000834:	e7fe      	b.n	8000834 <main+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083a:	4628      	mov	r0, r5
 800083c:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000840:	f000 fe88 	bl	8001554 <HAL_TIM_ConfigClockSource>
 8000844:	b108      	cbz	r0, 800084a <main+0xa2>
 8000846:	b672      	cpsid	i
  while (1)
 8000848:	e7fe      	b.n	8000848 <main+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2200      	movs	r2, #0
 800084c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084e:	4628      	mov	r0, r5
 8000850:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000856:	f000 ff27 	bl	80016a8 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	b108      	cbz	r0, 8000860 <main+0xb8>
 800085c:	b672      	cpsid	i
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0xb6>
  gost_main();
 8000860:	f7ff fece 	bl	8000600 <gost_main>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000864:	4c0b      	ldr	r4, [pc, #44]	@ (8000894 <main+0xec>)
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086c:	4620      	mov	r0, r4
 800086e:	f000 fb4f 	bl	8000f10 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 8000872:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000876:	f000 f8cd 	bl	8000a14 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800087a:	4620      	mov	r0, r4
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000882:	f000 fb45 	bl	8000f10 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 8000886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800088a:	f000 f8c3 	bl	8000a14 <HAL_Delay>
  while (1)
 800088e:	e7ea      	b.n	8000866 <main+0xbe>
 8000890:	40021000 	.word	0x40021000
 8000894:	40011000 	.word	0x40011000
 8000898:	20000030 	.word	0x20000030
 800089c:	40012c00 	.word	0x40012c00

080008a0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_MspInit+0x3c>)
{
 80008a2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a4:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008a6:	490e      	ldr	r1, [pc, #56]	@ (80008e0 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a8:	f042 0201 	orr.w	r2, r2, #1
 80008ac:	619a      	str	r2, [r3, #24]
 80008ae:	699a      	ldr	r2, [r3, #24]
 80008b0:	f002 0201 	and.w	r2, r2, #1
 80008b4:	9200      	str	r2, [sp, #0]
 80008b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	69da      	ldr	r2, [r3, #28]
 80008ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80008be:	61da      	str	r2, [r3, #28]
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ca:	684b      	ldr	r3, [r1, #4]
 80008cc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008d4:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	b002      	add	sp, #8
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010000 	.word	0x40010000

080008e4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <HAL_TIM_Base_MspInit+0x28>)
 80008e6:	6802      	ldr	r2, [r0, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d000      	beq.n	80008ee <HAL_TIM_Base_MspInit+0xa>
 80008ec:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ee:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80008f2:	699a      	ldr	r2, [r3, #24]
{
 80008f4:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000906:	b002      	add	sp, #8
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40012c00 	.word	0x40012c00

08000910 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler>
 8000912:	bf00      	nop

08000914 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <HardFault_Handler>
 8000916:	bf00      	nop

08000918 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler>
 800091a:	bf00      	nop

0800091c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <BusFault_Handler>
 800091e:	bf00      	nop

08000920 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler>
 8000922:	bf00      	nop

08000924 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 b85e 	b.w	80009f0 <HAL_IncTick>

08000934 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000938:	f7ff fffc 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480b      	ldr	r0, [pc, #44]	@ (800096c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800093e:	490c      	ldr	r1, [pc, #48]	@ (8000970 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000940:	4a0c      	ldr	r2, [pc, #48]	@ (8000974 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a09      	ldr	r2, [pc, #36]	@ (8000978 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000954:	4c09      	ldr	r4, [pc, #36]	@ (800097c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f000 fedb 	bl	800171c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000966:	f7ff ff1f 	bl	80007a8 <main>
  bx lr
 800096a:	4770      	bx	lr
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000974:	08001864 	.word	0x08001864
  ldr r2, =_sbss
 8000978:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800097c:	2000007c 	.word	0x2000007c

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>
	...

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098a:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <HAL_InitTick+0x3c>)
{
 800098c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098e:	7811      	ldrb	r1, [r2, #0]
 8000990:	4a0c      	ldr	r2, [pc, #48]	@ (80009c4 <HAL_InitTick+0x40>)
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	6812      	ldr	r2, [r2, #0]
 8000998:	fbb2 f0f3 	udiv	r0, r2, r3
 800099c:	f000 f89a 	bl	8000ad4 <HAL_SYSTICK_Config>
 80009a0:	b908      	cbnz	r0, 80009a6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	2d0f      	cmp	r5, #15
 80009a4:	d901      	bls.n	80009aa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80009a6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009a8:	bd38      	pop	{r3, r4, r5, pc}
 80009aa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	4602      	mov	r2, r0
 80009ae:	4629      	mov	r1, r5
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b4:	f000 f852 	bl	8000a5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <HAL_InitTick+0x44>)
 80009ba:	4620      	mov	r0, r4
 80009bc:	601d      	str	r5, [r3, #0]
}
 80009be:	bd38      	pop	{r3, r4, r5, pc}
 80009c0:	20000004 	.word	0x20000004
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008

080009cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <HAL_Init+0x20>)
{
 80009ce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009da:	f000 f82d 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f7ff ffd0 	bl	8000984 <HAL_InitTick>
  HAL_MspInit();
 80009e4:	f7ff ff5c 	bl	80008a0 <HAL_MspInit>
}
 80009e8:	2000      	movs	r0, #0
 80009ea:	bd08      	pop	{r3, pc}
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009f0:	4a03      	ldr	r2, [pc, #12]	@ (8000a00 <HAL_IncTick+0x10>)
 80009f2:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <HAL_IncTick+0x14>)
 80009f4:	6811      	ldr	r1, [r2, #0]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	440b      	add	r3, r1
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000078 	.word	0x20000078
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a08:	4b01      	ldr	r3, [pc, #4]	@ (8000a10 <HAL_GetTick+0x8>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000078 	.word	0x20000078

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b538      	push	{r3, r4, r5, lr}
 8000a16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff fff6 	bl	8000a08 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000a1e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000a20:	d002      	beq.n	8000a28 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <HAL_Delay+0x20>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a28:	f7ff ffee 	bl	8000a08 <HAL_GetTick>
 8000a2c:	1b40      	subs	r0, r0, r5
 8000a2e:	42a0      	cmp	r0, r4
 8000a30:	d3fa      	bcc.n	8000a28 <HAL_Delay+0x14>
  {
  }
}
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a38:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4906      	ldr	r1, [pc, #24]	@ (8000a58 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a3e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a54:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5e:	b500      	push	{lr}
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a66:	f1c3 0e07 	rsb	lr, r3, #7
 8000a6a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a72:	bf28      	it	cs
 8000a74:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a78:	f1bc 0f06 	cmp.w	ip, #6
 8000a7c:	d91c      	bls.n	8000ab8 <HAL_NVIC_SetPriority+0x5c>
 8000a7e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a86:	fa03 f30c 	lsl.w	r3, r3, ip
 8000a8a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a92:	fa03 f30e 	lsl.w	r3, r3, lr
 8000a96:	ea21 0303 	bic.w	r3, r1, r3
 8000a9a:	fa03 f30c 	lsl.w	r3, r3, ip
 8000a9e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	db0a      	blt.n	8000abe <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000aac:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000ab0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ab8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	4694      	mov	ip, r2
 8000abc:	e7e7      	b.n	8000a8e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_NVIC_SetPriority+0x74>)
 8000ac0:	f000 000f 	and.w	r0, r0, #15
 8000ac4:	4402      	add	r2, r0
 8000ac6:	7613      	strb	r3, [r2, #24]
 8000ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	e000ecfc 	.word	0xe000ecfc

08000ad4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	3801      	subs	r0, #1
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ada:	d301      	bcc.n	8000ae0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000adc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ade:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	2107      	movs	r1, #7
{
 8000aec:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	4c04      	ldr	r4, [pc, #16]	@ (8000b00 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	619a      	str	r2, [r3, #24]
}
 8000afa:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afc:	6119      	str	r1, [r3, #16]
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b08:	680c      	ldr	r4, [r1, #0]
{
 8000b0a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0c:	2c00      	cmp	r4, #0
 8000b0e:	f000 80ad 	beq.w	8000c6c <HAL_GPIO_Init+0x168>
 8000b12:	4bb3      	ldr	r3, [pc, #716]	@ (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000b14:	4298      	cmp	r0, r3
 8000b16:	f000 80d7 	beq.w	8000cc8 <HAL_GPIO_Init+0x1c4>
 8000b1a:	2200      	movs	r2, #0
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1c:	1d03      	adds	r3, r0, #4
 8000b1e:	9301      	str	r3, [sp, #4]
    ioposition = (0x01uL << position);
 8000b20:	2501      	movs	r5, #1
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b22:	270f      	movs	r7, #15
  uint32_t config = 0x00u;
 8000b24:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000b26:	4613      	mov	r3, r2
 8000b28:	4683      	mov	fp, r0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2a:	f8df 82b8 	ldr.w	r8, [pc, #696]	@ 8000de4 <HAL_GPIO_Init+0x2e0>
 8000b2e:	e006      	b.n	8000b3e <HAL_GPIO_Init+0x3a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000b30:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	fa34 f003 	lsrs.w	r0, r4, r3
 8000b36:	f102 0204 	add.w	r2, r2, #4
 8000b3a:	f000 8097 	beq.w	8000c6c <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 8000b3e:	fa05 f003 	lsl.w	r0, r5, r3
    if (iocurrent == ioposition)
 8000b42:	ea30 0c04 	bics.w	ip, r0, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b46:	ea00 0604 	and.w	r6, r0, r4
    if (iocurrent == ioposition)
 8000b4a:	d1f1      	bne.n	8000b30 <HAL_GPIO_Init+0x2c>
      switch (GPIO_Init->Mode)
 8000b4c:	684c      	ldr	r4, [r1, #4]
 8000b4e:	2c12      	cmp	r4, #18
 8000b50:	f200 80a0 	bhi.w	8000c94 <HAL_GPIO_Init+0x190>
 8000b54:	2c12      	cmp	r4, #18
 8000b56:	d816      	bhi.n	8000b86 <HAL_GPIO_Init+0x82>
 8000b58:	e8df f014 	tbh	[pc, r4, lsl #1]
 8000b5c:	001300af 	.word	0x001300af
 8000b60:	01950098 	.word	0x01950098
 8000b64:	00150015 	.word	0x00150015
 8000b68:	00150015 	.word	0x00150015
 8000b6c:	00150015 	.word	0x00150015
 8000b70:	00150015 	.word	0x00150015
 8000b74:	00150015 	.word	0x00150015
 8000b78:	00150015 	.word	0x00150015
 8000b7c:	00940015 	.word	0x00940015
 8000b80:	0090      	.short	0x0090
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b82:	f8d1 a00c 	ldr.w	sl, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b86:	2eff      	cmp	r6, #255	@ 0xff
 8000b88:	bf99      	ittee	ls
 8000b8a:	465c      	movls	r4, fp
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b8c:	4694      	movls	ip, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8e:	9c01      	ldrhi	r4, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b90:	f1a2 0c20 	subhi.w	ip, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b94:	6820      	ldr	r0, [r4, #0]
 8000b96:	fa07 fe0c 	lsl.w	lr, r7, ip
 8000b9a:	ea20 000e 	bic.w	r0, r0, lr
 8000b9e:	fa0a fc0c 	lsl.w	ip, sl, ip
 8000ba2:	ea40 000c 	orr.w	r0, r0, ip
 8000ba6:	6020      	str	r0, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba8:	684c      	ldr	r4, [r1, #4]
 8000baa:	00e0      	lsls	r0, r4, #3
 8000bac:	d564      	bpl.n	8000c78 <HAL_GPIO_Init+0x174>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bae:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8000bb2:	f023 0c03 	bic.w	ip, r3, #3
 8000bb6:	f040 0001 	orr.w	r0, r0, #1
 8000bba:	f8c8 0018 	str.w	r0, [r8, #24]
 8000bbe:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8000bc2:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8000bc6:	f000 0001 	and.w	r0, r0, #1
 8000bca:	9003      	str	r0, [sp, #12]
 8000bcc:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd0:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd4:	9803      	ldr	r0, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000bda:	f8dc 0008 	ldr.w	r0, [ip, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bde:	fa07 fe09 	lsl.w	lr, r7, r9
 8000be2:	ea20 0e0e 	bic.w	lr, r0, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be6:	4880      	ldr	r0, [pc, #512]	@ (8000de8 <HAL_GPIO_Init+0x2e4>)
 8000be8:	4583      	cmp	fp, r0
 8000bea:	f000 812c 	beq.w	8000e46 <HAL_GPIO_Init+0x342>
 8000bee:	487f      	ldr	r0, [pc, #508]	@ (8000dec <HAL_GPIO_Init+0x2e8>)
 8000bf0:	4583      	cmp	fp, r0
 8000bf2:	f000 8139 	beq.w	8000e68 <HAL_GPIO_Init+0x364>
 8000bf6:	487e      	ldr	r0, [pc, #504]	@ (8000df0 <HAL_GPIO_Init+0x2ec>)
 8000bf8:	4583      	cmp	fp, r0
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2003      	moveq	r0, #3
 8000bfe:	2004      	movne	r0, #4
 8000c00:	fa00 f009 	lsl.w	r0, r0, r9
 8000c04:	ea40 000e 	orr.w	r0, r0, lr
        AFIO->EXTICR[position >> 2u] = temp;
 8000c08:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c0c:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8000df4 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c10:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c14:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8000c18:	bf14      	ite	ne
 8000c1a:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c1c:	43b0      	biceq	r0, r6
 8000c1e:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c22:	f8df c1d0 	ldr.w	ip, [pc, #464]	@ 8000df4 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c26:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c2a:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8000c2e:	bf14      	ite	ne
 8000c30:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c32:	43b0      	biceq	r0, r6
 8000c34:	f8cc 000c 	str.w	r0, [ip, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000c38:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8000df4 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3c:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c40:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8000c44:	bf14      	ite	ne
 8000c46:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c48:	43b0      	biceq	r0, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c4a:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000c4e:	4c69      	ldr	r4, [pc, #420]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c50:	f8cc 0004 	str.w	r0, [ip, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000c54:	6820      	ldr	r0, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c56:	d00c      	beq.n	8000c72 <HAL_GPIO_Init+0x16e>
          SET_BIT(EXTI->IMR, iocurrent);
 8000c58:	4330      	orrs	r0, r6
 8000c5a:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5c:	680c      	ldr	r4, [r1, #0]
	position++;
 8000c5e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c60:	fa34 f003 	lsrs.w	r0, r4, r3
 8000c64:	f102 0204 	add.w	r2, r2, #4
 8000c68:	f47f af69 	bne.w	8000b3e <HAL_GPIO_Init+0x3a>
  }
}
 8000c6c:	b005      	add	sp, #20
 8000c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c72:	ea20 0006 	bic.w	r0, r0, r6
 8000c76:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c78:	680c      	ldr	r4, [r1, #0]
 8000c7a:	e759      	b.n	8000b30 <HAL_GPIO_Init+0x2c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c7c:	68c8      	ldr	r0, [r1, #12]
 8000c7e:	f100 0a0c 	add.w	sl, r0, #12
          break;
 8000c82:	e780      	b.n	8000b86 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c84:	68c8      	ldr	r0, [r1, #12]
 8000c86:	f100 0a04 	add.w	sl, r0, #4
          break;
 8000c8a:	e77c      	b.n	8000b86 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c8c:	68c8      	ldr	r0, [r1, #12]
 8000c8e:	f100 0a08 	add.w	sl, r0, #8
          break;
 8000c92:	e778      	b.n	8000b86 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8000c94:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8000df8 <HAL_GPIO_Init+0x2f4>
 8000c98:	4564      	cmp	r4, ip
 8000c9a:	d00e      	beq.n	8000cba <HAL_GPIO_Init+0x1b6>
 8000c9c:	f200 80d9 	bhi.w	8000e52 <HAL_GPIO_Init+0x34e>
 8000ca0:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8000ca4:	4564      	cmp	r4, ip
 8000ca6:	d008      	beq.n	8000cba <HAL_GPIO_Init+0x1b6>
 8000ca8:	f50c 2c70 	add.w	ip, ip, #983040	@ 0xf0000
 8000cac:	4564      	cmp	r4, ip
 8000cae:	d004      	beq.n	8000cba <HAL_GPIO_Init+0x1b6>
 8000cb0:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8000cb4:	4564      	cmp	r4, ip
 8000cb6:	f47f af66 	bne.w	8000b86 <HAL_GPIO_Init+0x82>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cba:	688c      	ldr	r4, [r1, #8]
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	f040 80d9 	bne.w	8000e74 <HAL_GPIO_Init+0x370>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cc2:	f04f 0a04 	mov.w	sl, #4
 8000cc6:	e75e      	b.n	8000b86 <HAL_GPIO_Init+0x82>
  uint32_t config = 0x00u;
 8000cc8:	f04f 0900 	mov.w	r9, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ccc:	f06f 051f 	mvn.w	r5, #31
    ioposition = (0x01uL << position);
 8000cd0:	2701      	movs	r7, #1
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd2:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8000cd6:	464b      	mov	r3, r9
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd8:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8000de4 <HAL_GPIO_Init+0x2e0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cdc:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8000dfc <HAL_GPIO_Init+0x2f8>
 8000ce0:	e005      	b.n	8000cee <HAL_GPIO_Init+0x1ea>
	position++;
 8000ce2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce4:	fa34 f203 	lsrs.w	r2, r4, r3
 8000ce8:	f105 0504 	add.w	r5, r5, #4
 8000cec:	d0be      	beq.n	8000c6c <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 8000cee:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent == ioposition)
 8000cf2:	ea32 0a04 	bics.w	sl, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf6:	ea04 0602 	and.w	r6, r4, r2
    if (iocurrent == ioposition)
 8000cfa:	d1f2      	bne.n	8000ce2 <HAL_GPIO_Init+0x1de>
      switch (GPIO_Init->Mode)
 8000cfc:	684c      	ldr	r4, [r1, #4]
 8000cfe:	2c12      	cmp	r4, #18
 8000d00:	f200 80c4 	bhi.w	8000e8c <HAL_GPIO_Init+0x388>
 8000d04:	2c12      	cmp	r4, #18
 8000d06:	d816      	bhi.n	8000d36 <HAL_GPIO_Init+0x232>
 8000d08:	e8df f014 	tbh	[pc, r4, lsl #1]
 8000d0c:	001300d2 	.word	0x001300d2
 8000d10:	00f400df 	.word	0x00f400df
 8000d14:	00150015 	.word	0x00150015
 8000d18:	00150015 	.word	0x00150015
 8000d1c:	00150015 	.word	0x00150015
 8000d20:	00150015 	.word	0x00150015
 8000d24:	00150015 	.word	0x00150015
 8000d28:	00150015 	.word	0x00150015
 8000d2c:	00e30015 	.word	0x00e30015
 8000d30:	00db      	.short	0x00db
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d32:	f8d1 900c 	ldr.w	r9, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d36:	2eff      	cmp	r6, #255	@ 0xff
 8000d38:	d962      	bls.n	8000e00 <HAL_GPIO_Init+0x2fc>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d3a:	46aa      	mov	sl, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d3c:	4644      	mov	r4, r8
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d3e:	6822      	ldr	r2, [r4, #0]
 8000d40:	fa0e fb0a 	lsl.w	fp, lr, sl
 8000d44:	ea22 020b 	bic.w	r2, r2, fp
 8000d48:	fa09 fa0a 	lsl.w	sl, r9, sl
 8000d4c:	ea42 020a 	orr.w	r2, r2, sl
 8000d50:	6022      	str	r2, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d52:	684a      	ldr	r2, [r1, #4]
 8000d54:	00d4      	lsls	r4, r2, #3
 8000d56:	d557      	bpl.n	8000e08 <HAL_GPIO_Init+0x304>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d58:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d5c:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d60:	f044 0401 	orr.w	r4, r4, #1
 8000d64:	f8cc 4018 	str.w	r4, [ip, #24]
 8000d68:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d6c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	f004 0401 	and.w	r4, r4, #1
 8000d74:	9403      	str	r4, [sp, #12]
 8000d76:	9c03      	ldr	r4, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 8000d78:	f023 0403 	bic.w	r4, r3, #3
 8000d7c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8000d80:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8000d84:	f8d4 b008 	ldr.w	fp, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d88:	fa0e fa0a 	lsl.w	sl, lr, sl
 8000d8c:	ea2b 0a0a 	bic.w	sl, fp, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8000d90:	f8c4 a008 	str.w	sl, [r4, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d94:	02d4      	lsls	r4, r2, #11
 8000d96:	d539      	bpl.n	8000e0c <HAL_GPIO_Init+0x308>
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8000df4 <HAL_GPIO_Init+0x2f0>
 8000d9c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8000da0:	4334      	orrs	r4, r6
 8000da2:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da6:	0294      	lsls	r4, r2, #10
 8000da8:	d53a      	bpl.n	8000e20 <HAL_GPIO_Init+0x31c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000daa:	f8df a048 	ldr.w	sl, [pc, #72]	@ 8000df4 <HAL_GPIO_Init+0x2f0>
 8000dae:	f8da 400c 	ldr.w	r4, [sl, #12]
 8000db2:	4334      	orrs	r4, r6
 8000db4:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db8:	0394      	lsls	r4, r2, #14
 8000dba:	d53b      	bpl.n	8000e34 <HAL_GPIO_Init+0x330>
          SET_BIT(EXTI->EMR, iocurrent);
 8000dbc:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8000df4 <HAL_GPIO_Init+0x2f0>
 8000dc0:	f8da 4004 	ldr.w	r4, [sl, #4]
 8000dc4:	4334      	orrs	r4, r6
 8000dc6:	f8ca 4004 	str.w	r4, [sl, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000dca:	4c0a      	ldr	r4, [pc, #40]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dcc:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd0:	6822      	ldr	r2, [r4, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dd2:	bf0c      	ite	eq
 8000dd4:	43b2      	biceq	r2, r6
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd6:	4332      	orrne	r2, r6
 8000dd8:	6022      	str	r2, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	680c      	ldr	r4, [r1, #0]
 8000ddc:	e781      	b.n	8000ce2 <HAL_GPIO_Init+0x1de>
 8000dde:	bf00      	nop
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40011400 	.word	0x40011400
 8000df4:	40010400 	.word	0x40010400
 8000df8:	10220000 	.word	0x10220000
 8000dfc:	40010804 	.word	0x40010804
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e00:	4604      	mov	r4, r0
 8000e02:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8000e06:	e79a      	b.n	8000d3e <HAL_GPIO_Init+0x23a>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	680c      	ldr	r4, [r1, #0]
 8000e0a:	e76a      	b.n	8000ce2 <HAL_GPIO_Init+0x1de>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e0c:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8000f00 <HAL_GPIO_Init+0x3fc>
 8000e10:	f8da 4008 	ldr.w	r4, [sl, #8]
 8000e14:	ea24 0406 	bic.w	r4, r4, r6
 8000e18:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e1c:	0294      	lsls	r4, r2, #10
 8000e1e:	d4c4      	bmi.n	8000daa <HAL_GPIO_Init+0x2a6>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e20:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8000f00 <HAL_GPIO_Init+0x3fc>
 8000e24:	f8da 400c 	ldr.w	r4, [sl, #12]
 8000e28:	ea24 0406 	bic.w	r4, r4, r6
 8000e2c:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e30:	0394      	lsls	r4, r2, #14
 8000e32:	d4c3      	bmi.n	8000dbc <HAL_GPIO_Init+0x2b8>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e34:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000f00 <HAL_GPIO_Init+0x3fc>
 8000e38:	f8da 4004 	ldr.w	r4, [sl, #4]
 8000e3c:	ea24 0406 	bic.w	r4, r4, r6
 8000e40:	f8ca 4004 	str.w	r4, [sl, #4]
 8000e44:	e7c1      	b.n	8000dca <HAL_GPIO_Init+0x2c6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e46:	2001      	movs	r0, #1
 8000e48:	fa00 f009 	lsl.w	r0, r0, r9
 8000e4c:	ea40 000e 	orr.w	r0, r0, lr
 8000e50:	e6da      	b.n	8000c08 <HAL_GPIO_Init+0x104>
      switch (GPIO_Init->Mode)
 8000e52:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8000f04 <HAL_GPIO_Init+0x400>
 8000e56:	4564      	cmp	r4, ip
 8000e58:	f43f af2f 	beq.w	8000cba <HAL_GPIO_Init+0x1b6>
 8000e5c:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
 8000e60:	4564      	cmp	r4, ip
 8000e62:	f47f ae90 	bne.w	8000b86 <HAL_GPIO_Init+0x82>
 8000e66:	e728      	b.n	8000cba <HAL_GPIO_Init+0x1b6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e68:	2002      	movs	r0, #2
 8000e6a:	fa00 f009 	lsl.w	r0, r0, r9
 8000e6e:	ea40 000e 	orr.w	r0, r0, lr
 8000e72:	e6c9      	b.n	8000c08 <HAL_GPIO_Init+0x104>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e74:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e76:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000e7a:	bf0c      	ite	eq
 8000e7c:	f8cb 0010 	streq.w	r0, [fp, #16]
            GPIOx->BRR = ioposition;
 8000e80:	f8cb 0014 	strne.w	r0, [fp, #20]
 8000e84:	e67f      	b.n	8000b86 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8000e86:	f04f 0a00 	mov.w	sl, #0
 8000e8a:	e67c      	b.n	8000b86 <HAL_GPIO_Init+0x82>
 8000e8c:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8000f08 <HAL_GPIO_Init+0x404>
 8000e90:	4554      	cmp	r4, sl
 8000e92:	d00d      	beq.n	8000eb0 <HAL_GPIO_Init+0x3ac>
 8000e94:	d821      	bhi.n	8000eda <HAL_GPIO_Init+0x3d6>
 8000e96:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8000e9a:	4554      	cmp	r4, sl
 8000e9c:	d008      	beq.n	8000eb0 <HAL_GPIO_Init+0x3ac>
 8000e9e:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 8000ea2:	4554      	cmp	r4, sl
 8000ea4:	d004      	beq.n	8000eb0 <HAL_GPIO_Init+0x3ac>
 8000ea6:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8000eaa:	4554      	cmp	r4, sl
 8000eac:	f47f af43 	bne.w	8000d36 <HAL_GPIO_Init+0x232>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb0:	688c      	ldr	r4, [r1, #8]
 8000eb2:	b1e4      	cbz	r4, 8000eee <HAL_GPIO_Init+0x3ea>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb4:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000eb6:	4c15      	ldr	r4, [pc, #84]	@ (8000f0c <HAL_GPIO_Init+0x408>)
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x3f6>
            GPIOx->BRR = ioposition;
 8000eba:	6162      	str	r2, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ebc:	f04f 0908 	mov.w	r9, #8
 8000ec0:	e739      	b.n	8000d36 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec2:	68ca      	ldr	r2, [r1, #12]
 8000ec4:	f102 090c 	add.w	r9, r2, #12
          break;
 8000ec8:	e735      	b.n	8000d36 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eca:	68ca      	ldr	r2, [r1, #12]
 8000ecc:	f102 0908 	add.w	r9, r2, #8
          break;
 8000ed0:	e731      	b.n	8000d36 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed2:	68ca      	ldr	r2, [r1, #12]
 8000ed4:	f102 0904 	add.w	r9, r2, #4
          break;
 8000ed8:	e72d      	b.n	8000d36 <HAL_GPIO_Init+0x232>
      switch (GPIO_Init->Mode)
 8000eda:	f8df a028 	ldr.w	sl, [pc, #40]	@ 8000f04 <HAL_GPIO_Init+0x400>
 8000ede:	4554      	cmp	r4, sl
 8000ee0:	d0e6      	beq.n	8000eb0 <HAL_GPIO_Init+0x3ac>
 8000ee2:	f50a 3a80 	add.w	sl, sl, #65536	@ 0x10000
 8000ee6:	4554      	cmp	r4, sl
 8000ee8:	f47f af25 	bne.w	8000d36 <HAL_GPIO_Init+0x232>
 8000eec:	e7e0      	b.n	8000eb0 <HAL_GPIO_Init+0x3ac>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eee:	f04f 0904 	mov.w	r9, #4
 8000ef2:	e720      	b.n	8000d36 <HAL_GPIO_Init+0x232>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef4:	f04f 0900 	mov.w	r9, #0
 8000ef8:	e71d      	b.n	8000d36 <HAL_GPIO_Init+0x232>
            GPIOx->BSRR = ioposition;
 8000efa:	6122      	str	r2, [r4, #16]
 8000efc:	e7de      	b.n	8000ebc <HAL_GPIO_Init+0x3b8>
 8000efe:	bf00      	nop
 8000f00:	40010400 	.word	0x40010400
 8000f04:	10310000 	.word	0x10310000
 8000f08:	10220000 	.word	0x10220000
 8000f0c:	40010800 	.word	0x40010800

08000f10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f10:	b902      	cbnz	r2, 8000f14 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f12:	0409      	lsls	r1, r1, #16
 8000f14:	6101      	str	r1, [r0, #16]
  }
}
 8000f16:	4770      	bx	lr

08000f18 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	f000 81e4 	beq.w	80012e6 <HAL_RCC_OscConfig+0x3ce>
{
 8000f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f22:	6803      	ldr	r3, [r0, #0]
 8000f24:	4604      	mov	r4, r0
 8000f26:	07dd      	lsls	r5, r3, #31
{
 8000f28:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2a:	d535      	bpl.n	8000f98 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f2c:	4999      	ldr	r1, [pc, #612]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 8000f2e:	684a      	ldr	r2, [r1, #4]
 8000f30:	f002 020c 	and.w	r2, r2, #12
 8000f34:	2a04      	cmp	r2, #4
 8000f36:	f000 80ed 	beq.w	8001114 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f3a:	684a      	ldr	r2, [r1, #4]
 8000f3c:	f002 020c 	and.w	r2, r2, #12
 8000f40:	2a08      	cmp	r2, #8
 8000f42:	f000 80e3 	beq.w	800110c <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f46:	6863      	ldr	r3, [r4, #4]
 8000f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f4c:	d010      	beq.n	8000f70 <HAL_RCC_OscConfig+0x58>
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 810a 	beq.w	8001168 <HAL_RCC_OscConfig+0x250>
 8000f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f58:	f000 8180 	beq.w	800125c <HAL_RCC_OscConfig+0x344>
 8000f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000f6c:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6e:	e004      	b.n	8000f7a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f70:	4a88      	ldr	r2, [pc, #544]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 8000f72:	6813      	ldr	r3, [r2, #0]
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fd45 	bl	8000a08 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4e85      	ldr	r6, [pc, #532]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8000f80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	e005      	b.n	8000f90 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fd40 	bl	8000a08 <HAL_GetTick>
 8000f88:	1b40      	subs	r0, r0, r5
 8000f8a:	2864      	cmp	r0, #100	@ 0x64
 8000f8c:	f200 80e8 	bhi.w	8001160 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f90:	6833      	ldr	r3, [r6, #0]
 8000f92:	039a      	lsls	r2, r3, #14
 8000f94:	d5f6      	bpl.n	8000f84 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	079f      	lsls	r7, r3, #30
 8000f9a:	d528      	bpl.n	8000fee <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f9c:	4a7d      	ldr	r2, [pc, #500]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 8000f9e:	6851      	ldr	r1, [r2, #4]
 8000fa0:	f011 0f0c 	tst.w	r1, #12
 8000fa4:	f000 8096 	beq.w	80010d4 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fa8:	6851      	ldr	r1, [r2, #4]
 8000faa:	f001 010c 	and.w	r1, r1, #12
 8000fae:	2908      	cmp	r1, #8
 8000fb0:	f000 808c 	beq.w	80010cc <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb4:	6923      	ldr	r3, [r4, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8116 	beq.w	80011e8 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4b76      	ldr	r3, [pc, #472]	@ (8001198 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4e74      	ldr	r6, [pc, #464]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 8000fc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fd20 	bl	8000a08 <HAL_GetTick>
 8000fc8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fca:	e005      	b.n	8000fd8 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fd1c 	bl	8000a08 <HAL_GetTick>
 8000fd0:	1b40      	subs	r0, r0, r5
 8000fd2:	2802      	cmp	r0, #2
 8000fd4:	f200 80c4 	bhi.w	8001160 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	0798      	lsls	r0, r3, #30
 8000fdc:	d5f6      	bpl.n	8000fcc <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fde:	6833      	ldr	r3, [r6, #0]
 8000fe0:	6962      	ldr	r2, [r4, #20]
 8000fe2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000fe6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fea:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	071a      	lsls	r2, r3, #28
 8000ff0:	d429      	bmi.n	8001046 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff2:	075d      	lsls	r5, r3, #29
 8000ff4:	d54b      	bpl.n	800108e <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff6:	4b67      	ldr	r3, [pc, #412]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 8000ff8:	69da      	ldr	r2, [r3, #28]
 8000ffa:	00d0      	lsls	r0, r2, #3
 8000ffc:	f100 8084 	bmi.w	8001108 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001000:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	69da      	ldr	r2, [r3, #28]
 8001004:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001008:	61da      	str	r2, [r3, #28]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	4e61      	ldr	r6, [pc, #388]	@ (800119c <HAL_RCC_OscConfig+0x284>)
 8001016:	6833      	ldr	r3, [r6, #0]
 8001018:	05d9      	lsls	r1, r3, #23
 800101a:	f140 8091 	bpl.w	8001140 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101e:	68e3      	ldr	r3, [r4, #12]
 8001020:	2b01      	cmp	r3, #1
 8001022:	f000 80f2 	beq.w	800120a <HAL_RCC_OscConfig+0x2f2>
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80be 	beq.w	80011a8 <HAL_RCC_OscConfig+0x290>
 800102c:	2b05      	cmp	r3, #5
 800102e:	4b59      	ldr	r3, [pc, #356]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 8001030:	6a1a      	ldr	r2, [r3, #32]
 8001032:	f000 8120 	beq.w	8001276 <HAL_RCC_OscConfig+0x35e>
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	621a      	str	r2, [r3, #32]
 800103c:	6a1a      	ldr	r2, [r3, #32]
 800103e:	f022 0204 	bic.w	r2, r2, #4
 8001042:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001044:	e0e6      	b.n	8001214 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001046:	69a3      	ldr	r3, [r4, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d04c      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 800104c:	2201      	movs	r2, #1
 800104e:	4b52      	ldr	r3, [pc, #328]	@ (8001198 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001050:	4e50      	ldr	r6, [pc, #320]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 8001052:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001056:	f7ff fcd7 	bl	8000a08 <HAL_GetTick>
 800105a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105c:	e004      	b.n	8001068 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105e:	f7ff fcd3 	bl	8000a08 <HAL_GetTick>
 8001062:	1b40      	subs	r0, r0, r5
 8001064:	2802      	cmp	r0, #2
 8001066:	d87b      	bhi.n	8001160 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001068:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800106a:	079b      	lsls	r3, r3, #30
 800106c:	d5f7      	bpl.n	800105e <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800106e:	4b4c      	ldr	r3, [pc, #304]	@ (80011a0 <HAL_RCC_OscConfig+0x288>)
 8001070:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <HAL_RCC_OscConfig+0x28c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	0a5b      	lsrs	r3, r3, #9
 800107a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800107c:	bf00      	nop
  }
  while (Delay --);
 800107e:	9b01      	ldr	r3, [sp, #4]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	9201      	str	r2, [sp, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f9      	bne.n	800107c <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	075d      	lsls	r5, r3, #29
 800108c:	d4b3      	bmi.n	8000ff6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800108e:	69e3      	ldr	r3, [r4, #28]
 8001090:	b1c3      	cbz	r3, 80010c4 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001092:	4d40      	ldr	r5, [pc, #256]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 8001094:	686a      	ldr	r2, [r5, #4]
 8001096:	f002 020c 	and.w	r2, r2, #12
 800109a:	2a08      	cmp	r2, #8
 800109c:	f000 80cd 	beq.w	800123a <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 80010a0:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a2:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80010a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001198 <HAL_RCC_OscConfig+0x280>)
 80010a6:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a8:	f000 80ed 	beq.w	8001286 <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 80010ac:	f7ff fcac 	bl	8000a08 <HAL_GetTick>
 80010b0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b2:	e004      	b.n	80010be <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b4:	f7ff fca8 	bl	8000a08 <HAL_GetTick>
 80010b8:	1b00      	subs	r0, r0, r4
 80010ba:	2802      	cmp	r0, #2
 80010bc:	d850      	bhi.n	8001160 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010be:	682b      	ldr	r3, [r5, #0]
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	d4f7      	bmi.n	80010b4 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
}
 80010c6:	b002      	add	sp, #8
 80010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010cc:	6852      	ldr	r2, [r2, #4]
 80010ce:	03d6      	lsls	r6, r2, #15
 80010d0:	f53f af70 	bmi.w	8000fb4 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	0795      	lsls	r5, r2, #30
 80010da:	d525      	bpl.n	8001128 <HAL_RCC_OscConfig+0x210>
 80010dc:	6922      	ldr	r2, [r4, #16]
 80010de:	2a01      	cmp	r2, #1
 80010e0:	d022      	beq.n	8001128 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
 80010e4:	e7ef      	b.n	80010c6 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 80010e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001198 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	4e2a      	ldr	r6, [pc, #168]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 80010ea:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80010ee:	f7ff fc8b 	bl	8000a08 <HAL_GetTick>
 80010f2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f4:	e004      	b.n	8001100 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f6:	f7ff fc87 	bl	8000a08 <HAL_GetTick>
 80010fa:	1b40      	subs	r0, r0, r5
 80010fc:	2802      	cmp	r0, #2
 80010fe:	d82f      	bhi.n	8001160 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001102:	079f      	lsls	r7, r3, #30
 8001104:	d4f7      	bmi.n	80010f6 <HAL_RCC_OscConfig+0x1de>
 8001106:	e7bf      	b.n	8001088 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8001108:	2500      	movs	r5, #0
 800110a:	e783      	b.n	8001014 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800110c:	684a      	ldr	r2, [r1, #4]
 800110e:	03d0      	lsls	r0, r2, #15
 8001110:	f57f af19 	bpl.w	8000f46 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	0391      	lsls	r1, r2, #14
 800111a:	f57f af3d 	bpl.w	8000f98 <HAL_RCC_OscConfig+0x80>
 800111e:	6862      	ldr	r2, [r4, #4]
 8001120:	2a00      	cmp	r2, #0
 8001122:	f47f af39 	bne.w	8000f98 <HAL_RCC_OscConfig+0x80>
 8001126:	e7dc      	b.n	80010e2 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001128:	491a      	ldr	r1, [pc, #104]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 800112a:	6960      	ldr	r0, [r4, #20]
 800112c:	680a      	ldr	r2, [r1, #0]
 800112e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001132:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001136:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001138:	071a      	lsls	r2, r3, #28
 800113a:	f57f af5a 	bpl.w	8000ff2 <HAL_RCC_OscConfig+0xda>
 800113e:	e782      	b.n	8001046 <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001140:	6833      	ldr	r3, [r6, #0]
 8001142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001146:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001148:	f7ff fc5e 	bl	8000a08 <HAL_GetTick>
 800114c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	6833      	ldr	r3, [r6, #0]
 8001150:	05da      	lsls	r2, r3, #23
 8001152:	f53f af64 	bmi.w	800101e <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001156:	f7ff fc57 	bl	8000a08 <HAL_GetTick>
 800115a:	1bc0      	subs	r0, r0, r7
 800115c:	2864      	cmp	r0, #100	@ 0x64
 800115e:	d9f6      	bls.n	800114e <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8001160:	2003      	movs	r0, #3
}
 8001162:	b002      	add	sp, #8
 8001164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001168:	4d0a      	ldr	r5, [pc, #40]	@ (8001194 <HAL_RCC_OscConfig+0x27c>)
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001170:	602b      	str	r3, [r5, #0]
 8001172:	682b      	ldr	r3, [r5, #0]
 8001174:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001178:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800117a:	f7ff fc45 	bl	8000a08 <HAL_GetTick>
 800117e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001180:	e004      	b.n	800118c <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001182:	f7ff fc41 	bl	8000a08 <HAL_GetTick>
 8001186:	1b80      	subs	r0, r0, r6
 8001188:	2864      	cmp	r0, #100	@ 0x64
 800118a:	d8e9      	bhi.n	8001160 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	039b      	lsls	r3, r3, #14
 8001190:	d4f7      	bmi.n	8001182 <HAL_RCC_OscConfig+0x26a>
 8001192:	e700      	b.n	8000f96 <HAL_RCC_OscConfig+0x7e>
 8001194:	40021000 	.word	0x40021000
 8001198:	42420000 	.word	0x42420000
 800119c:	40007000 	.word	0x40007000
 80011a0:	20000000 	.word	0x20000000
 80011a4:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a8:	4e50      	ldr	r6, [pc, #320]	@ (80012ec <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ae:	6a33      	ldr	r3, [r6, #32]
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	6233      	str	r3, [r6, #32]
 80011b6:	6a33      	ldr	r3, [r6, #32]
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80011be:	f7ff fc23 	bl	8000a08 <HAL_GetTick>
 80011c2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c4:	e004      	b.n	80011d0 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c6:	f7ff fc1f 	bl	8000a08 <HAL_GetTick>
 80011ca:	1bc0      	subs	r0, r0, r7
 80011cc:	4540      	cmp	r0, r8
 80011ce:	d8c7      	bhi.n	8001160 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	6a33      	ldr	r3, [r6, #32]
 80011d2:	0798      	lsls	r0, r3, #30
 80011d4:	d4f7      	bmi.n	80011c6 <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 80011d6:	2d00      	cmp	r5, #0
 80011d8:	f43f af59 	beq.w	800108e <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011dc:	4a43      	ldr	r2, [pc, #268]	@ (80012ec <HAL_RCC_OscConfig+0x3d4>)
 80011de:	69d3      	ldr	r3, [r2, #28]
 80011e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	e752      	b.n	800108e <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 80011e8:	4a41      	ldr	r2, [pc, #260]	@ (80012f0 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	4e40      	ldr	r6, [pc, #256]	@ (80012ec <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 80011ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011ee:	f7ff fc0b 	bl	8000a08 <HAL_GetTick>
 80011f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f4:	e004      	b.n	8001200 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc07 	bl	8000a08 <HAL_GetTick>
 80011fa:	1b40      	subs	r0, r0, r5
 80011fc:	2802      	cmp	r0, #2
 80011fe:	d8af      	bhi.n	8001160 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001200:	6833      	ldr	r3, [r6, #0]
 8001202:	0799      	lsls	r1, r3, #30
 8001204:	d4f7      	bmi.n	80011f6 <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	e6f1      	b.n	8000fee <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120a:	4a38      	ldr	r2, [pc, #224]	@ (80012ec <HAL_RCC_OscConfig+0x3d4>)
 800120c:	6a13      	ldr	r3, [r2, #32]
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001214:	f7ff fbf8 	bl	8000a08 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800121c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121e:	4f33      	ldr	r7, [pc, #204]	@ (80012ec <HAL_RCC_OscConfig+0x3d4>)
 8001220:	e004      	b.n	800122c <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fbf1 	bl	8000a08 <HAL_GetTick>
 8001226:	1b80      	subs	r0, r0, r6
 8001228:	4540      	cmp	r0, r8
 800122a:	d899      	bhi.n	8001160 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	079b      	lsls	r3, r3, #30
 8001230:	d5f7      	bpl.n	8001222 <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 8001232:	2d00      	cmp	r5, #0
 8001234:	f43f af2b 	beq.w	800108e <HAL_RCC_OscConfig+0x176>
 8001238:	e7d0      	b.n	80011dc <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800123a:	2b01      	cmp	r3, #1
 800123c:	f43f af51 	beq.w	80010e2 <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8001240:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	6a22      	ldr	r2, [r4, #32]
 8001244:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8001248:	4291      	cmp	r1, r2
 800124a:	f47f af4a 	bne.w	80010e2 <HAL_RCC_OscConfig+0x1ca>
 800124e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001250:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001254:	1a18      	subs	r0, r3, r0
 8001256:	bf18      	it	ne
 8001258:	2001      	movne	r0, #1
 800125a:	e734      	b.n	80010c6 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001260:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001272:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001274:	e681      	b.n	8000f7a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001276:	f042 0204 	orr.w	r2, r2, #4
 800127a:	621a      	str	r2, [r3, #32]
 800127c:	6a1a      	ldr	r2, [r3, #32]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001284:	e7c6      	b.n	8001214 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 8001286:	f7ff fbbf 	bl	8000a08 <HAL_GetTick>
 800128a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128c:	e005      	b.n	800129a <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fbbb 	bl	8000a08 <HAL_GetTick>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	2802      	cmp	r0, #2
 8001296:	f63f af63 	bhi.w	8001160 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	682b      	ldr	r3, [r5, #0]
 800129c:	0199      	lsls	r1, r3, #6
 800129e:	d4f6      	bmi.n	800128e <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a0:	6a23      	ldr	r3, [r4, #32]
 80012a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a6:	d105      	bne.n	80012b4 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a8:	686a      	ldr	r2, [r5, #4]
 80012aa:	68a1      	ldr	r1, [r4, #8]
 80012ac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80012b0:	430a      	orrs	r2, r1
 80012b2:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012b4:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b6:	4d0d      	ldr	r5, [pc, #52]	@ (80012ec <HAL_RCC_OscConfig+0x3d4>)
 80012b8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80012ba:	686a      	ldr	r2, [r5, #4]
 80012bc:	430b      	orrs	r3, r1
 80012be:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80012c2:	490b      	ldr	r1, [pc, #44]	@ (80012f0 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c4:	4313      	orrs	r3, r2
 80012c6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012c8:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb9d 	bl	8000a08 <HAL_GetTick>
 80012ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d0:	e005      	b.n	80012de <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fb99 	bl	8000a08 <HAL_GetTick>
 80012d6:	1b00      	subs	r0, r0, r4
 80012d8:	2802      	cmp	r0, #2
 80012da:	f63f af41 	bhi.w	8001160 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	019a      	lsls	r2, r3, #6
 80012e2:	d5f6      	bpl.n	80012d2 <HAL_RCC_OscConfig+0x3ba>
 80012e4:	e6ee      	b.n	80010c4 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	42420000 	.word	0x42420000

080012f4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80012f4:	2800      	cmp	r0, #0
 80012f6:	f000 80a1 	beq.w	800143c <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012fa:	4a56      	ldr	r2, [pc, #344]	@ (8001454 <HAL_RCC_ClockConfig+0x160>)
{
 80012fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	4604      	mov	r4, r0
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	428b      	cmp	r3, r1
 800130a:	460d      	mov	r5, r1
 800130c:	d20c      	bcs.n	8001328 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	f023 0307 	bic.w	r3, r3, #7
 8001314:	430b      	orrs	r3, r1
 8001316:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	428b      	cmp	r3, r1
 8001320:	d002      	beq.n	8001328 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001322:	2001      	movs	r0, #1
}
 8001324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	079e      	lsls	r6, r3, #30
 800132c:	d514      	bpl.n	8001358 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132e:	0758      	lsls	r0, r3, #29
 8001330:	d504      	bpl.n	800133c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001332:	4949      	ldr	r1, [pc, #292]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
 8001334:	684a      	ldr	r2, [r1, #4]
 8001336:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800133a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133c:	0719      	lsls	r1, r3, #28
 800133e:	d504      	bpl.n	800134a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001340:	4945      	ldr	r1, [pc, #276]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
 8001342:	684a      	ldr	r2, [r1, #4]
 8001344:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8001348:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134a:	4943      	ldr	r1, [pc, #268]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
 800134c:	68a0      	ldr	r0, [r4, #8]
 800134e:	684a      	ldr	r2, [r1, #4]
 8001350:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001354:	4302      	orrs	r2, r0
 8001356:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001358:	07da      	lsls	r2, r3, #31
 800135a:	d520      	bpl.n	800139e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b3e      	ldr	r3, [pc, #248]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001360:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001364:	d06c      	beq.n	8001440 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001366:	2a02      	cmp	r2, #2
 8001368:	d065      	beq.n	8001436 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	079e      	lsls	r6, r3, #30
 800136c:	d5d9      	bpl.n	8001322 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800136e:	4e3a      	ldr	r6, [pc, #232]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001370:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001374:	6873      	ldr	r3, [r6, #4]
 8001376:	f023 0303 	bic.w	r3, r3, #3
 800137a:	4313      	orrs	r3, r2
 800137c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800137e:	f7ff fb43 	bl	8000a08 <HAL_GetTick>
 8001382:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001384:	e004      	b.n	8001390 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001386:	f7ff fb3f 	bl	8000a08 <HAL_GetTick>
 800138a:	1bc0      	subs	r0, r0, r7
 800138c:	4540      	cmp	r0, r8
 800138e:	d85a      	bhi.n	8001446 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001390:	6873      	ldr	r3, [r6, #4]
 8001392:	6862      	ldr	r2, [r4, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800139c:	d1f3      	bne.n	8001386 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800139e:	4a2d      	ldr	r2, [pc, #180]	@ (8001454 <HAL_RCC_ClockConfig+0x160>)
 80013a0:	6813      	ldr	r3, [r2, #0]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d909      	bls.n	80013be <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	f023 0307 	bic.w	r3, r3, #7
 80013b0:	432b      	orrs	r3, r5
 80013b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b4:	6813      	ldr	r3, [r2, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	42ab      	cmp	r3, r5
 80013bc:	d1b1      	bne.n	8001322 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	0758      	lsls	r0, r3, #29
 80013c2:	d506      	bpl.n	80013d2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c4:	4924      	ldr	r1, [pc, #144]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
 80013c6:	68e0      	ldr	r0, [r4, #12]
 80013c8:	684a      	ldr	r2, [r1, #4]
 80013ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80013ce:	4302      	orrs	r2, r0
 80013d0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d2:	0719      	lsls	r1, r3, #28
 80013d4:	d507      	bpl.n	80013e6 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d6:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
 80013d8:	6921      	ldr	r1, [r4, #16]
 80013da:	6853      	ldr	r3, [r2, #4]
 80013dc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80013e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013e4:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 80013e6:	491c      	ldr	r1, [pc, #112]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
 80013e8:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013ea:	f002 030c 	and.w	r3, r2, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d010      	beq.n	8001414 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013f4:	4a18      	ldr	r2, [pc, #96]	@ (8001458 <HAL_RCC_ClockConfig+0x164>)
 80013f6:	481a      	ldr	r0, [pc, #104]	@ (8001460 <HAL_RCC_ClockConfig+0x16c>)
 80013f8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80013fa:	491a      	ldr	r1, [pc, #104]	@ (8001464 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001400:	5c80      	ldrb	r0, [r0, r2]
 8001402:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <HAL_RCC_ClockConfig+0x174>)
 8001404:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8001406:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001408:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800140a:	f7ff fabb 	bl	8000984 <HAL_InitTick>
  return HAL_OK;
 800140e:	2000      	movs	r0, #0
}
 8001410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001414:	4815      	ldr	r0, [pc, #84]	@ (800146c <HAL_RCC_ClockConfig+0x178>)
 8001416:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800141a:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800141c:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800141e:	d514      	bpl.n	800144a <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001420:	480e      	ldr	r0, [pc, #56]	@ (800145c <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001422:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001424:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001428:	4911      	ldr	r1, [pc, #68]	@ (8001470 <HAL_RCC_ClockConfig+0x17c>)
 800142a:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800142e:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001430:	fbb3 f3f2 	udiv	r3, r3, r2
 8001434:	e7de      	b.n	80013f4 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	019f      	lsls	r7, r3, #6
 8001438:	d499      	bmi.n	800136e <HAL_RCC_ClockConfig+0x7a>
 800143a:	e772      	b.n	8001322 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800143c:	2001      	movs	r0, #1
}
 800143e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001440:	039b      	lsls	r3, r3, #14
 8001442:	d494      	bmi.n	800136e <HAL_RCC_ClockConfig+0x7a>
 8001444:	e76d      	b.n	8001322 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001446:	2003      	movs	r0, #3
 8001448:	e76c      	b.n	8001324 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <HAL_RCC_ClockConfig+0x180>)
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	e7d0      	b.n	80013f4 <HAL_RCC_ClockConfig+0x100>
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000
 8001458:	40021000 	.word	0x40021000
 800145c:	007a1200 	.word	0x007a1200
 8001460:	08001838 	.word	0x08001838
 8001464:	20000008 	.word	0x20000008
 8001468:	20000000 	.word	0x20000000
 800146c:	0800184c 	.word	0x0800184c
 8001470:	08001848 	.word	0x08001848
 8001474:	003d0900 	.word	0x003d0900

08001478 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001478:	2800      	cmp	r0, #0
 800147a:	d066      	beq.n	800154a <HAL_TIM_Base_Init+0xd2>
{
 800147c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800147e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001482:	4604      	mov	r4, r0
 8001484:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001488:	2b00      	cmp	r3, #0
 800148a:	d059      	beq.n	8001540 <HAL_TIM_Base_Init+0xc8>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800148c:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800148e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001490:	4e2f      	ldr	r6, [pc, #188]	@ (8001550 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001492:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001496:	42b2      	cmp	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001498:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800149a:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800149c:	6861      	ldr	r1, [r4, #4]
  tmpcr1 = TIMx->CR1;
 800149e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014a0:	d030      	beq.n	8001504 <HAL_TIM_Base_Init+0x8c>
 80014a2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80014a6:	d02d      	beq.n	8001504 <HAL_TIM_Base_Init+0x8c>
 80014a8:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 80014ac:	42b2      	cmp	r2, r6
 80014ae:	d03e      	beq.n	800152e <HAL_TIM_Base_Init+0xb6>
 80014b0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80014b4:	42b2      	cmp	r2, r6
 80014b6:	d03a      	beq.n	800152e <HAL_TIM_Base_Init+0xb6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014bc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80014be:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014c0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80014c2:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014c4:	2301      	movs	r3, #1
 80014c6:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80014c8:	6913      	ldr	r3, [r2, #16]
 80014ca:	07db      	lsls	r3, r3, #31
 80014cc:	d503      	bpl.n	80014d6 <HAL_TIM_Base_Init+0x5e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80014ce:	6913      	ldr	r3, [r2, #16]
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014dc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80014e0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80014e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80014e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014f4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80014f8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80014fc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001500:	2000      	movs	r0, #0
}
 8001502:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8001504:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800150a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800150c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800150e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001512:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001518:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800151a:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <HAL_TIM_Base_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 800151e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001520:	429a      	cmp	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001522:	bf08      	it	eq
 8001524:	6963      	ldreq	r3, [r4, #20]
  TIMx->PSC = Structure->Prescaler;
 8001526:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001528:	bf08      	it	eq
 800152a:	6313      	streq	r3, [r2, #48]	@ 0x30
 800152c:	e7ca      	b.n	80014c4 <HAL_TIM_Base_Init+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800152e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001534:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001536:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800153c:	4333      	orrs	r3, r6
 800153e:	e7bb      	b.n	80014b8 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8001540:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001544:	f7ff f9ce 	bl	80008e4 <HAL_TIM_Base_MspInit>
 8001548:	e7a0      	b.n	800148c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40012c00 	.word	0x40012c00

08001554 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001554:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001558:	2a01      	cmp	r2, #1
 800155a:	d06e      	beq.n	800163a <HAL_TIM_ConfigClockSource+0xe6>
 800155c:	4603      	mov	r3, r0
{
 800155e:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001560:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001562:	2402      	movs	r4, #2
  tmpsmcr = htim->Instance->SMCR;
 8001564:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(htim);
 8001566:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800156a:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800156e:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001570:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8001574:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001578:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800157a:	680c      	ldr	r4, [r1, #0]
 800157c:	2c60      	cmp	r4, #96	@ 0x60
 800157e:	d076      	beq.n	800166e <HAL_TIM_ConfigClockSource+0x11a>
 8001580:	d811      	bhi.n	80015a6 <HAL_TIM_ConfigClockSource+0x52>
 8001582:	2c40      	cmp	r4, #64	@ 0x40
 8001584:	d05b      	beq.n	800163e <HAL_TIM_ConfigClockSource+0xea>
 8001586:	d82e      	bhi.n	80015e6 <HAL_TIM_ConfigClockSource+0x92>
 8001588:	2c20      	cmp	r4, #32
 800158a:	d004      	beq.n	8001596 <HAL_TIM_ConfigClockSource+0x42>
 800158c:	f200 8088 	bhi.w	80016a0 <HAL_TIM_ConfigClockSource+0x14c>
 8001590:	f034 0110 	bics.w	r1, r4, #16
 8001594:	d11f      	bne.n	80015d6 <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001596:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001598:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800159c:	4321      	orrs	r1, r4
 800159e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015a2:	6091      	str	r1, [r2, #8]
}
 80015a4:	e016      	b.n	80015d4 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 80015a6:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80015aa:	d013      	beq.n	80015d4 <HAL_TIM_ConfigClockSource+0x80>
 80015ac:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80015b0:	d033      	beq.n	800161a <HAL_TIM_ConfigClockSource+0xc6>
 80015b2:	2c70      	cmp	r4, #112	@ 0x70
 80015b4:	d10f      	bne.n	80015d6 <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015b6:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80015ba:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015bc:	4328      	orrs	r0, r5
 80015be:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015c0:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015c4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80015c8:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015ca:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80015cc:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80015ce:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80015d2:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015d6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80015d8:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80015da:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80015e2:	bc30      	pop	{r4, r5}
 80015e4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80015e6:	2c50      	cmp	r4, #80	@ 0x50
 80015e8:	d1f5      	bne.n	80015d6 <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 80015ea:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80015ec:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80015ee:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015f0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80015f4:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015f6:	6a11      	ldr	r1, [r2, #32]
 80015f8:	f021 0101 	bic.w	r1, r1, #1
 80015fc:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015fe:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001600:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001604:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001608:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800160a:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800160c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800160e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001612:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8001616:	6091      	str	r1, [r2, #8]
}
 8001618:	e7dc      	b.n	80015d4 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800161a:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800161e:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001620:	4328      	orrs	r0, r5
 8001622:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001624:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001628:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800162c:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800162e:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001630:	6891      	ldr	r1, [r2, #8]
 8001632:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001636:	6091      	str	r1, [r2, #8]
      break;
 8001638:	e7cc      	b.n	80015d4 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 800163a:	2002      	movs	r0, #2
}
 800163c:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 800163e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001640:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8001642:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001644:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001648:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800164a:	6a11      	ldr	r1, [r2, #32]
 800164c:	f021 0101 	bic.w	r1, r1, #1
 8001650:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001652:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001654:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001658:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800165c:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800165e:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001660:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001662:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001666:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800166a:	6091      	str	r1, [r2, #8]
}
 800166c:	e7b2      	b.n	80015d4 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 800166e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001670:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8001672:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001674:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001678:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800167c:	6a10      	ldr	r0, [r2, #32]
 800167e:	f020 0010 	bic.w	r0, r0, #16
 8001682:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001684:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001686:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800168a:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800168e:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8001690:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001692:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001694:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001698:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800169c:	6091      	str	r1, [r2, #8]
}
 800169e:	e799      	b.n	80015d4 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 80016a0:	2c30      	cmp	r4, #48	@ 0x30
 80016a2:	f43f af78 	beq.w	8001596 <HAL_TIM_ConfigClockSource+0x42>
 80016a6:	e796      	b.n	80015d6 <HAL_TIM_ConfigClockSource+0x82>

080016a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80016a8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80016ac:	2a01      	cmp	r2, #1
 80016ae:	d027      	beq.n	8001700 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80016b0:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b2:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80016b4:	681a      	ldr	r2, [r3, #0]
{
 80016b6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80016b8:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80016bc:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016be:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c0:	4d10      	ldr	r5, [pc, #64]	@ (8001704 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80016c2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016c6:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c8:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80016ca:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 80016cc:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016ce:	d009      	beq.n	80016e4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80016d0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80016d4:	d006      	beq.n	80016e4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80016d6:	480c      	ldr	r0, [pc, #48]	@ (8001708 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80016d8:	4282      	cmp	r2, r0
 80016da:	d003      	beq.n	80016e4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80016dc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80016e0:	4282      	cmp	r2, r0
 80016e2:	d104      	bne.n	80016ee <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80016e4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80016e6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80016ea:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80016ec:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80016ee:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80016f0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80016f6:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016fa:	4610      	mov	r0, r2
}
 80016fc:	bc30      	pop	{r4, r5}
 80016fe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001700:	2002      	movs	r0, #2
}
 8001702:	4770      	bx	lr
 8001704:	40012c00 	.word	0x40012c00
 8001708:	40000400 	.word	0x40000400

0800170c <memset>:
 800170c:	4603      	mov	r3, r0
 800170e:	4402      	add	r2, r0
 8001710:	4293      	cmp	r3, r2
 8001712:	d100      	bne.n	8001716 <memset+0xa>
 8001714:	4770      	bx	lr
 8001716:	f803 1b01 	strb.w	r1, [r3], #1
 800171a:	e7f9      	b.n	8001710 <memset+0x4>

0800171c <__libc_init_array>:
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	2600      	movs	r6, #0
 8001720:	4d0c      	ldr	r5, [pc, #48]	@ (8001754 <__libc_init_array+0x38>)
 8001722:	4c0d      	ldr	r4, [pc, #52]	@ (8001758 <__libc_init_array+0x3c>)
 8001724:	1b64      	subs	r4, r4, r5
 8001726:	10a4      	asrs	r4, r4, #2
 8001728:	42a6      	cmp	r6, r4
 800172a:	d109      	bne.n	8001740 <__libc_init_array+0x24>
 800172c:	f000 f828 	bl	8001780 <_init>
 8001730:	2600      	movs	r6, #0
 8001732:	4d0a      	ldr	r5, [pc, #40]	@ (800175c <__libc_init_array+0x40>)
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <__libc_init_array+0x44>)
 8001736:	1b64      	subs	r4, r4, r5
 8001738:	10a4      	asrs	r4, r4, #2
 800173a:	42a6      	cmp	r6, r4
 800173c:	d105      	bne.n	800174a <__libc_init_array+0x2e>
 800173e:	bd70      	pop	{r4, r5, r6, pc}
 8001740:	f855 3b04 	ldr.w	r3, [r5], #4
 8001744:	4798      	blx	r3
 8001746:	3601      	adds	r6, #1
 8001748:	e7ee      	b.n	8001728 <__libc_init_array+0xc>
 800174a:	f855 3b04 	ldr.w	r3, [r5], #4
 800174e:	4798      	blx	r3
 8001750:	3601      	adds	r6, #1
 8001752:	e7f2      	b.n	800173a <__libc_init_array+0x1e>
 8001754:	0800185c 	.word	0x0800185c
 8001758:	0800185c 	.word	0x0800185c
 800175c:	0800185c 	.word	0x0800185c
 8001760:	08001860 	.word	0x08001860

08001764 <memcpy>:
 8001764:	440a      	add	r2, r1
 8001766:	4291      	cmp	r1, r2
 8001768:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800176c:	d100      	bne.n	8001770 <memcpy+0xc>
 800176e:	4770      	bx	lr
 8001770:	b510      	push	{r4, lr}
 8001772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001776:	4291      	cmp	r1, r2
 8001778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800177c:	d1f9      	bne.n	8001772 <memcpy+0xe>
 800177e:	bd10      	pop	{r4, pc}

08001780 <_init>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	bf00      	nop
 8001784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001786:	bc08      	pop	{r3}
 8001788:	469e      	mov	lr, r3
 800178a:	4770      	bx	lr

0800178c <_fini>:
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	bf00      	nop
 8001790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001792:	bc08      	pop	{r3}
 8001794:	469e      	mov	lr, r3
 8001796:	4770      	bx	lr
