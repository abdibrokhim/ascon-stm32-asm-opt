
ascon-newuu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080011c4  080011c4  000021c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001208  08001208  00003028  2**0
                  CONTENTS
  4 .ARM          00000000  08001208  08001208  00003028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001208  08001208  00003028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001208  08001208  00002208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800120c  0800120c  0000220c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08001210  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000028  08001238  00003028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001238  00003094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae4c  00000000  00000000  00003051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b17  00000000  00000000  0000de9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000698e  00000000  00000000  0000f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  00016348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bdd  00000000  00000000  00016be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015bc1  00000000  00000000  000177bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de44  00000000  00000000  0002d37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000885aa  00000000  00000000  0003b1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c376c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017dc  00000000  00000000  000c37b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000c4f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080011ac 	.word	0x080011ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080011ac 	.word	0x080011ac

0800014c <ascon_permute>:
 *   - A placeholder “sbox” and “linear” step on example registers.
 *-----------------------------------------------------------------------*/
    .global ascon_permute
    .thumb_func
ascon_permute:
    push {lr}           @ Save return address
 800014c:	b500      	push	{lr}

0800014e <LP_loop_cond>:

    /* Assume r12 already points to the round constants (e.g. ascon_start_round_a) */
LP_loop_cond:
    ldrb   r10, [r12, #0]    @ Load a round constant byte
 800014e:	f89c a000 	ldrb.w	sl, [ip]
    cmp    r10, #0
 8000152:	f1ba 0f00 	cmp.w	sl, #0
    beq    LP_end           @ Exit loop if zero reached
 8000156:	d032      	beq.n	80001be <LP_end>
         Example call: sbox x0, x1, x2, x3, x4, t0, t1, t2
         Map registers as follows (for illustration):
           x0 -> r8, x1 -> r9, x2 -> r10, x3 -> r0, x4 -> r1,
           t0 -> r2, t1 -> r3, t2 -> r4.
    */
    sbox r8, r9, r10, r0, r1, r2, r3, r4
 8000158:	ea88 0301 	eor.w	r3, r8, r1
 800015c:	ea80 0401 	eor.w	r4, r0, r1
 8000160:	ea89 020a 	eor.w	r2, r9, sl
 8000164:	ea6f 0c01 	mvn.w	ip, r1
 8000168:	ea40 010c 	orr.w	r1, r0, ip
 800016c:	ea81 0102 	eor.w	r1, r1, r2
 8000170:	ea80 0009 	eor.w	r0, r0, r9
 8000174:	ea40 0002 	orr.w	r0, r0, r2
 8000178:	ea80 0003 	eor.w	r0, r0, r3
 800017c:	ea8a 0a03 	eor.w	sl, sl, r3
 8000180:	ea4a 0a09 	orr.w	sl, sl, r9
 8000184:	ea8a 0a04 	eor.w	sl, sl, r4
 8000188:	ea48 0804 	orr.w	r8, r8, r4
 800018c:	ea82 0208 	eor.w	r2, r2, r8
 8000190:	ea29 0903 	bic.w	r9, r9, r3
 8000194:	ea89 0904 	eor.w	r9, r9, r4
    /* --- Linear layer ---
         For example, one instance might be:
           linear x0l, x0h, x2l, x2h, 19, 28, t0, t1
         (Again, registers must be assigned appropriately.)
    */
    linear r5, r6, r7, r8, 19, 28, r2, r3
 8000198:	ea4f 2278 	mov.w	r2, r8, ror #9
 800019c:	ea82 0207 	eor.w	r2, r2, r7
 80001a0:	ea4f 23b7 	mov.w	r3, r7, ror #10
 80001a4:	ea83 0308 	eor.w	r3, r3, r8
 80001a8:	ea4f 37b7 	mov.w	r7, r7, ror #14
 80001ac:	ea4f 38b8 	mov.w	r8, r8, ror #14
 80001b0:	ea87 0502 	eor.w	r5, r7, r2
 80001b4:	ea88 0603 	eor.w	r6, r8, r3

    /* --- Advance round constant pointer --- */
    add   r12, r12, #2
 80001b8:	f10c 0c02 	add.w	ip, ip, #2

    b     LP_loop_cond
 80001bc:	e7c7      	b.n	800014e <LP_loop_cond>

080001be <LP_end>:

LP_end:
    pop   {lr}
 80001be:	f85d eb04 	ldr.w	lr, [sp], #4
    bx    lr
 80001c2:	4770      	bx	lr

080001c4 <ascon_to_bi32_rev8>:
 * repacking into 32‐bit words. Here we simply call an external helper.
 *-----------------------------------------------------------------------*/
    .global ascon_to_bi32_rev8
    .thumb_func
ascon_to_bi32_rev8:
    push {lr}
 80001c4:	b500      	push	{lr}
    bl   ascon_rev8      @ Call a subroutine that does the rev8/bi32 conversion
 80001c6:	f000 f839 	bl	800023c <ascon_rev8>
    pop  {lr}
 80001ca:	f85d eb04 	ldr.w	lr, [sp], #4
    bx   lr
 80001ce:	4770      	bx	lr

080001d0 <ascon_from_bi32_rev8>:
 * The inverse transformation.
 *-----------------------------------------------------------------------*/
    .global ascon_from_bi32_rev8
    .thumb_func
ascon_from_bi32_rev8:
    push {lr}
 80001d0:	b500      	push	{lr}
    bl   ascon_rev8      @ (Assume same helper works in reverse.)
 80001d2:	f000 f833 	bl	800023c <ascon_rev8>
    pop  {lr}
 80001d6:	f85d eb04 	ldr.w	lr, [sp], #4
    bx   lr
 80001da:	4770      	bx	lr

080001dc <ascon_memcpy>:
 *  r0 = destination, r1 = source, r2 = length.
 *-----------------------------------------------------------------------*/
    .global ascon_memcpy
    .thumb_func
ascon_memcpy:
    push {r4-r7, lr}     @ Save temporaries and LR
 80001dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov  r3, #0          @ Counter in r3
 80001de:	f04f 0300 	mov.w	r3, #0

080001e2 <memcpy_loop>:
memcpy_loop:
    cmp  r3, r2
 80001e2:	4293      	cmp	r3, r2
    bge  memcpy_end
 80001e4:	da04      	bge.n	80001f0 <memcpy_end>
    ldrb r4, [r1, r3]
 80001e6:	5ccc      	ldrb	r4, [r1, r3]
    strb r4, [r0, r3]
 80001e8:	54c4      	strb	r4, [r0, r3]
    add  r3, r3, #1
 80001ea:	f103 0301 	add.w	r3, r3, #1
    b    memcpy_loop
 80001ee:	e7f8      	b.n	80001e2 <memcpy_loop>

080001f0 <memcpy_end>:
memcpy_end:
    pop  {r4-r7, lr}
 80001f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bx   lr
 80001f4:	4770      	bx	lr

080001f6 <ascon_duplex>:
 * XOR them into the state, apply a permutation, etc.
 *-----------------------------------------------------------------------*/
    .global ascon_duplex
    .thumb_func
ascon_duplex:
    push {r4-r7, lr}
 80001f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* [ Duplex loop implementation goes here ]
       This will include loading words (using ldr/ldrb), calling the
       conversion routines and updating the state.
    */
    pop {r4-r7, lr}
 80001f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bx  lr
 80001fc:	4770      	bx	lr

080001fe <ascon_core>:
 * (Adjust as needed for your calling convention.)
 *-----------------------------------------------------------------------*/
    .global ascon_core
    .thumb_func
ascon_core:
    push {r4-r11, lr}   @ Save callee‑saved registers (and LR)
 80001fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* --- Example key loading: ---
         Load key parts from memory pointed to by r5 and r6.
         (Actual key size and order must match the algorithm’s requirements.)
    */
    ldr   r8, [r5]         @ load key part (e.g. k1h)
 8000202:	f8d5 8000 	ldr.w	r8, [r5]
    ldr   r9, [r5, #4]      @ load key part (e.g. k1l)
 8000206:	f8d5 9004 	ldr.w	r9, [r5, #4]
    ldr   r10, [r6]        @ load key part (e.g. k0h)
 800020a:	f8d6 a000 	ldr.w	sl, [r6]
    ldr   r11, [r6, #4]      @ load key part (e.g. k0l)
 800020e:	f8d6 b004 	ldr.w	fp, [r6, #4]
           state[0] = IVo   (e.g., 0x88220000)
           state[1] = IVe   (e.g., 0x200000)
         and mix in the key.
         (Due to limited registers, the full state is maintained in memory.)
    */
    ldr   r12, =0x88220000  @ IVo (example)
 8000212:	f8df c02c 	ldr.w	ip, [pc, #44]	@ 8000240 <ascon_rev8+0x4>
    /* ... initialize other state words ... */

    /* --- Call permutation ---
         Load pointer to the round constants (e.g. ascon_start_round_a) into r12.
    */
    ldr   r4, =ascon_start_round_a
 8000216:	4c0b      	ldr	r4, [pc, #44]	@ (8000244 <ascon_rev8+0x8>)
    mov   r12, r4
 8000218:	46a4      	mov	ip, r4
    bl    ascon_permute
 800021a:	f7ff ff97 	bl	800014c <ascon_permute>

    /* --- Process associated data and message ---
         (For brevity this example simply calls the duplex routine.)
    */
    cmp   r2, #0
 800021e:	2a00      	cmp	r2, #0
    beq   skip_ad
 8000220:	d003      	beq.n	800022a <skip_ad>
    mov   r7, #0          @ Set mode = 0 (duplex)
 8000222:	f04f 0700 	mov.w	r7, #0
    bl    ascon_duplex
 8000226:	f7ff ffe6 	bl	80001f6 <ascon_duplex>

0800022a <skip_ad>:
skip_ad:
    /* Absorb plaintext/ciphertext: */
    bl    ascon_duplex
 800022a:	f7ff ffe4 	bl	80001f6 <ascon_duplex>
    /* --- Finalization ---
         Mix in the key again, apply a final permutation, and produce output.
         For encryption the state is transformed (using ascon_from_bi32_rev8)
         and the result stored (using ascon_memcpy or direct stores).
    */
    bl    ascon_from_bi32_rev8
 800022e:	f7ff ffcf 	bl	80001d0 <ascon_from_bi32_rev8>
    /* ... store the tag or ciphertext ... */

    pop {r4-r11, lr}
 8000232:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bx  lr
 8000236:	4770      	bx	lr

    /* Example of loading a constant (IVo) using ldr */
    /* Original line (caused error):
         mov   r12, #0x0000000088220000  @ IVo (example)
       Fixed line: */
    ldr   r12, =0x88220000         @ IVo (example)
 8000238:	f8df c004 	ldr.w	ip, [pc, #4]	@ 8000240 <ascon_rev8+0x4>

0800023c <ascon_rev8>:
     * -------------------------------------------------------------------- */
    .global ascon_rev8
    .thumb_func
ascon_rev8:
    /* TODO: Implement the proper rev8/bi32 conversion. */
    bx lr
 800023c:	4770      	bx	lr
 800023e:	0000      	.short	0x0000
    ldr   r12, =0x88220000  @ IVo (example)
 8000240:	88220000 	.word	0x88220000
    ldr   r4, =ascon_start_round_a
 8000244:	20000000 	.word	0x20000000

08000248 <crypto_aead_encrypt>:

int crypto_aead_encrypt(unsigned char* c, unsigned long long* clen,
                        const unsigned char* m, unsigned long long mlen,
                        const unsigned char* ad, unsigned long long adlen,
                        const unsigned char* nsec, const unsigned char* npub,
                        const unsigned char* k) {
 8000248:	468c      	mov	ip, r1
  *clen = mlen + CRYPTO_ABYTES;
  (void)nsec;

  return ascon_core(c, m, mlen, ad, adlen, npub, k, 1);
 800024a:	2301      	movs	r3, #1
                        const unsigned char* k) {
 800024c:	b430      	push	{r4, r5}
 800024e:	4611      	mov	r1, r2
 8000250:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
  *clen = mlen + CRYPTO_ABYTES;
 8000254:	f112 0510 	adds.w	r5, r2, #16
 8000258:	f144 0400 	adc.w	r4, r4, #0
  return ascon_core(c, m, mlen, ad, adlen, npub, k, 1);
 800025c:	9305      	str	r3, [sp, #20]
  *clen = mlen + CRYPTO_ABYTES;
 800025e:	e9cc 5400 	strd	r5, r4, [ip]
                        const unsigned char* k) {
 8000262:	9c06      	ldr	r4, [sp, #24]
  return ascon_core(c, m, mlen, ad, adlen, npub, k, 1);
 8000264:	9b04      	ldr	r3, [sp, #16]
 8000266:	9402      	str	r4, [sp, #8]
                        const unsigned char* k) {
 8000268:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  return ascon_core(c, m, mlen, ad, adlen, npub, k, 1);
 800026a:	9403      	str	r4, [sp, #12]
                        const unsigned char* k) {
 800026c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  return ascon_core(c, m, mlen, ad, adlen, npub, k, 1);
 800026e:	9404      	str	r4, [sp, #16]
}
 8000270:	bc30      	pop	{r4, r5}
  return ascon_core(c, m, mlen, ad, adlen, npub, k, 1);
 8000272:	f7ff bfc4 	b.w	80001fe <ascon_core>
 8000276:	bf00      	nop

08000278 <ascon_main>:
  printf("%c[%d]=", c, (int)xlen);
  for (i = 0; i < xlen; ++i) printf("%02x", x[i]);
  printf("\n");
}

int ascon_main() {
 8000278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800027c:	b0b7      	sub	sp, #220	@ 0xdc
  /* Sample data (key, nonce, associated data, plaintext) */
  unsigned char n[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 800027e:	af0e      	add	r7, sp, #56	@ 0x38
 8000280:	46ba      	mov	sl, r7
 8000282:	4d39      	ldr	r5, [pc, #228]	@ (8000368 <ascon_main+0xf0>)
                           11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                           22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
                           11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                           22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000284:	ab26      	add	r3, sp, #152	@ 0x98
 8000286:	930b      	str	r3, [sp, #44]	@ 0x2c
  unsigned char n[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800028e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000292:	46d4      	mov	ip, sl
  unsigned char k[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000294:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
  unsigned char n[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000298:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  unsigned char k[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 800029c:	f1a5 0c10 	sub.w	ip, r5, #16
 80002a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80002a4:	46c4      	mov	ip, r8
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 80002a6:	f10d 0978 	add.w	r9, sp, #120	@ 0x78
 80002aa:	46ce      	mov	lr, r9
                           22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
  unsigned char c[32], h[32], t[32];
  unsigned long long alen = 16;
  unsigned long long mlen = 16;
  unsigned long long clen;
  int result = 0;
 80002ac:	2600      	movs	r6, #0
  unsigned char k[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 80002ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80002b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 80002ba:	f1a5 0c10 	sub.w	ip, r5, #16
 80002be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80002c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80002c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 80002ca:	f1a5 0c10 	sub.w	ip, r5, #16
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 80002ce:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 80002d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80002d6:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c

  uint32_t total_time = 0;
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);    // LED ON
    HAL_Delay(5000);                                          // Wait 5 seconds
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // LED OFF
  uint32_t start_time = HAL_GetTick();
 80002da:	240a      	movs	r4, #10
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 80002dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80002e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);    // LED ON
 80002e8:	4632      	mov	r2, r6
 80002ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ee:	481f      	ldr	r0, [pc, #124]	@ (800036c <ascon_main+0xf4>)
 80002f0:	f000 fb30 	bl	8000954 <HAL_GPIO_WritePin>
    HAL_Delay(5000);                                          // Wait 5 seconds
 80002f4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002f8:	f000 f998 	bl	800062c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // LED OFF
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000302:	481a      	ldr	r0, [pc, #104]	@ (800036c <ascon_main+0xf4>)
  for (int i = 0; i < 10; i++) {

      result |= crypto_aead_encrypt(c, &clen, m, mlen, a, alen, NULL, n, k);
 8000304:	f04f 0a10 	mov.w	sl, #16
 8000308:	f04f 0b00 	mov.w	fp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // LED OFF
 800030c:	f000 fb22 	bl	8000954 <HAL_GPIO_WritePin>
  uint32_t start_time = HAL_GetTick();
 8000310:	f000 f986 	bl	8000620 <HAL_GetTick>
      result |= crypto_aead_encrypt(c, &clen, m, mlen, a, alen, NULL, n, k);
 8000314:	2300      	movs	r3, #0
 8000316:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800031a:	e9cd ab00 	strd	sl, fp, [sp]
 800031e:	e9cd 7807 	strd	r7, r8, [sp, #28]
 8000322:	aa26      	add	r2, sp, #152	@ 0x98
 8000324:	a90c      	add	r1, sp, #48	@ 0x30
 8000326:	9306      	str	r3, [sp, #24]
 8000328:	f8cd 9008 	str.w	r9, [sp, #8]
 800032c:	a82e      	add	r0, sp, #184	@ 0xb8
 800032e:	f7ff ff8b 	bl	8000248 <crypto_aead_encrypt>
  for (int i = 0; i < 10; i++) {
 8000332:	3c01      	subs	r4, #1
      result |= crypto_aead_encrypt(c, &clen, m, mlen, a, alen, NULL, n, k);
 8000334:	ea46 0600 	orr.w	r6, r6, r0
  for (int i = 0; i < 10; i++) {
 8000338:	d1ec      	bne.n	8000314 <ascon_main+0x9c>

      //printf("Encryption %d took %lu ms\n", i + 1, elapsed);
  }
  uint32_t end_time = HAL_GetTick();
 800033a:	f000 f971 	bl	8000620 <HAL_GetTick>
//#elif defined(CRYPTO_AUTH)
  // Similar modifications for the authentication variant (if needed)
//#endif

  /* Turn ON LED on PC13, wait 5 seconds, then turn OFF LED */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);    // LED ON
 800033e:	4622      	mov	r2, r4
 8000340:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000344:	4809      	ldr	r0, [pc, #36]	@ (800036c <ascon_main+0xf4>)
 8000346:	f000 fb05 	bl	8000954 <HAL_GPIO_WritePin>
  HAL_Delay(5000+result);                                          // Wait 5 seconds
 800034a:	f506 509c 	add.w	r0, r6, #4992	@ 0x1380
 800034e:	3008      	adds	r0, #8
 8000350:	f000 f96c 	bl	800062c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // LED OFF
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800035a:	4804      	ldr	r0, [pc, #16]	@ (800036c <ascon_main+0xf4>)
 800035c:	f000 fafa 	bl	8000954 <HAL_GPIO_WritePin>

  return result;
}
 8000360:	4630      	mov	r0, r6
 8000362:	b037      	add	sp, #220	@ 0xdc
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	080011c4 	.word	0x080011c4
 800036c:	40011000 	.word	0x40011000

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b530      	push	{r4, r5, lr}
 8000372:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000374:	2224      	movs	r2, #36	@ 0x24
 8000376:	2100      	movs	r1, #0
 8000378:	a807      	add	r0, sp, #28
 800037a:	f000 feeb 	bl	8001154 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037e:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000382:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000390:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000394:	9206      	str	r2, [sp, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000396:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f000 fae0 	bl	800095c <HAL_RCC_OscConfig>
 800039c:	b108      	cbz	r0, 80003a2 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	4601      	mov	r1, r0
 80003a4:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b2:	f000 fcc1 	bl	8000d38 <HAL_RCC_ClockConfig>
 80003b6:	b108      	cbz	r0, 80003bc <SystemClock_Config+0x4c>
 80003b8:	b672      	cpsid	i
  while (1)
 80003ba:	e7fe      	b.n	80003ba <SystemClock_Config+0x4a>
}
 80003bc:	b011      	add	sp, #68	@ 0x44
 80003be:	bd30      	pop	{r4, r5, pc}

080003c0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	2400      	movs	r4, #0
{
 80003c2:	b500      	push	{lr}
 80003c4:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 80003c6:	f000 f90d 	bl	80005e4 <HAL_Init>
  SystemClock_Config();
 80003ca:	f7ff ffd1 	bl	8000370 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80003d2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b34      	ldr	r3, [pc, #208]	@ (80004a8 <main+0xe8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003de:	4833      	ldr	r0, [pc, #204]	@ (80004ac <main+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e0:	f042 0210 	orr.w	r2, r2, #16
 80003e4:	619a      	str	r2, [r3, #24]
 80003e6:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 80003e8:	4d31      	ldr	r5, [pc, #196]	@ (80004b0 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	f002 0210 	and.w	r2, r2, #16
 80003ee:	9200      	str	r2, [sp, #0]
 80003f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	699a      	ldr	r2, [r3, #24]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	619a      	str	r2, [r3, #24]
 80003fa:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003fc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	f003 0304 	and.w	r3, r3, #4
 8000402:	9301      	str	r3, [sp, #4]
 8000404:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000406:	f000 faa5 	bl	8000954 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800040a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040e:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000410:	e9cd 3204 	strd	r3, r2, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000414:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000416:	4825      	ldr	r0, [pc, #148]	@ (80004ac <main+0xec>)
 8000418:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800041e:	f000 f97d 	bl	800071c <HAL_GPIO_Init>
  htim1.Instance = TIM1;
 8000422:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <main+0xf4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000424:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 8000426:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 65535;
 8000428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000430:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	e9cd 4402 	strd	r4, r4, [sp, #8]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 800043c:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8000440:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 65535;
 8000442:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000444:	f000 fd3a 	bl	8000ebc <HAL_TIM_Base_Init>
 8000448:	b108      	cbz	r0, 800044e <main+0x8e>
 800044a:	b672      	cpsid	i
  while (1)
 800044c:	e7fe      	b.n	800044c <main+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800044e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000452:	4628      	mov	r0, r5
 8000454:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000456:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000458:	f000 fda0 	bl	8000f9c <HAL_TIM_ConfigClockSource>
 800045c:	b108      	cbz	r0, 8000462 <main+0xa2>
 800045e:	b672      	cpsid	i
  while (1)
 8000460:	e7fe      	b.n	8000460 <main+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000462:	2200      	movs	r2, #0
 8000464:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000466:	4628      	mov	r0, r5
 8000468:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800046e:	f000 fe3f 	bl	80010f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000472:	b108      	cbz	r0, 8000478 <main+0xb8>
 8000474:	b672      	cpsid	i
  while (1)
 8000476:	e7fe      	b.n	8000476 <main+0xb6>
  ascon_main();
 8000478:	f7ff fefe 	bl	8000278 <ascon_main>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800047c:	4c0b      	ldr	r4, [pc, #44]	@ (80004ac <main+0xec>)
 800047e:	2201      	movs	r2, #1
 8000480:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000484:	4620      	mov	r0, r4
 8000486:	f000 fa65 	bl	8000954 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 800048a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800048e:	f000 f8cd 	bl	800062c <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000492:	4620      	mov	r0, r4
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800049a:	f000 fa5b 	bl	8000954 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 800049e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004a2:	f000 f8c3 	bl	800062c <HAL_Delay>
  while (1)
 80004a6:	e7ea      	b.n	800047e <main+0xbe>
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40011000 	.word	0x40011000
 80004b0:	20000048 	.word	0x20000048
 80004b4:	40012c00 	.word	0x40012c00

080004b8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <HAL_MspInit+0x3c>)
{
 80004ba:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004bc:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004be:	490e      	ldr	r1, [pc, #56]	@ (80004f8 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c0:	f042 0201 	orr.w	r2, r2, #1
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	699a      	ldr	r2, [r3, #24]
 80004c8:	f002 0201 	and.w	r2, r2, #1
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d0:	69da      	ldr	r2, [r3, #28]
 80004d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80004d6:	61da      	str	r2, [r3, #28]
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e2:	684b      	ldr	r3, [r1, #4]
 80004e4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ec:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	b002      	add	sp, #8
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000

080004fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80004fc:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_TIM_Base_MspInit+0x28>)
 80004fe:	6802      	ldr	r2, [r0, #0]
 8000500:	429a      	cmp	r2, r3
 8000502:	d000      	beq.n	8000506 <HAL_TIM_Base_MspInit+0xa>
 8000504:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000506:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800050a:	699a      	ldr	r2, [r3, #24]
{
 800050c:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 800050e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000512:	619a      	str	r2, [r3, #24]
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800051e:	b002      	add	sp, #8
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40012c00 	.word	0x40012c00

08000528 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000528:	e7fe      	b.n	8000528 <NMI_Handler>
 800052a:	bf00      	nop

0800052c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <HardFault_Handler>
 800052e:	bf00      	nop

08000530 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <MemManage_Handler>
 8000532:	bf00      	nop

08000534 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <BusFault_Handler>
 8000536:	bf00      	nop

08000538 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler>
 800053a:	bf00      	nop

0800053c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000548:	f000 b85e 	b.w	8000608 <HAL_IncTick>

0800054c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000550:	f7ff fffc 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480b      	ldr	r0, [pc, #44]	@ (8000584 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000556:	490c      	ldr	r1, [pc, #48]	@ (8000588 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <LoopFillZerobss+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a09      	ldr	r2, [pc, #36]	@ (8000590 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800056c:	4c09      	ldr	r4, [pc, #36]	@ (8000594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057a:	f000 fdf3 	bl	8001164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff ff1f 	bl	80003c0 <main>
  bx lr
 8000582:	4770      	bx	lr
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800058c:	08001210 	.word	0x08001210
  ldr r2, =_sbss
 8000590:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000594:	20000094 	.word	0x20000094

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800059e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a2:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <HAL_InitTick+0x3c>)
{
 80005a4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a6:	7811      	ldrb	r1, [r2, #0]
 80005a8:	4a0c      	ldr	r2, [pc, #48]	@ (80005dc <HAL_InitTick+0x40>)
 80005aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ae:	6812      	ldr	r2, [r2, #0]
 80005b0:	fbb2 f0f3 	udiv	r0, r2, r3
 80005b4:	f000 f89a 	bl	80006ec <HAL_SYSTICK_Config>
 80005b8:	b908      	cbnz	r0, 80005be <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ba:	2d0f      	cmp	r5, #15
 80005bc:	d901      	bls.n	80005c2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80005be:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005c0:	bd38      	pop	{r3, r4, r5, pc}
 80005c2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005cc:	f000 f852 	bl	8000674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
}
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
 80005d8:	20000020 	.word	0x20000020
 80005dc:	2000001c 	.word	0x2000001c
 80005e0:	20000024 	.word	0x20000024

080005e4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	4a07      	ldr	r2, [pc, #28]	@ (8000604 <HAL_Init+0x20>)
{
 80005e6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	f043 0310 	orr.w	r3, r3, #16
 80005f0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f2:	f000 f82d 	bl	8000650 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f6:	200f      	movs	r0, #15
 80005f8:	f7ff ffd0 	bl	800059c <HAL_InitTick>
  HAL_MspInit();
 80005fc:	f7ff ff5c 	bl	80004b8 <HAL_MspInit>
}
 8000600:	2000      	movs	r0, #0
 8000602:	bd08      	pop	{r3, pc}
 8000604:	40022000 	.word	0x40022000

08000608 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000608:	4a03      	ldr	r2, [pc, #12]	@ (8000618 <HAL_IncTick+0x10>)
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <HAL_IncTick+0x14>)
 800060c:	6811      	ldr	r1, [r2, #0]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	440b      	add	r3, r1
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000090 	.word	0x20000090
 800061c:	20000020 	.word	0x20000020

08000620 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000620:	4b01      	ldr	r3, [pc, #4]	@ (8000628 <HAL_GetTick+0x8>)
 8000622:	6818      	ldr	r0, [r3, #0]
}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000090 	.word	0x20000090

0800062c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800062c:	b538      	push	{r3, r4, r5, lr}
 800062e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000630:	f7ff fff6 	bl	8000620 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000634:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000636:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000638:	d002      	beq.n	8000640 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	4b04      	ldr	r3, [pc, #16]	@ (800064c <HAL_Delay+0x20>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000640:	f7ff ffee 	bl	8000620 <HAL_GetTick>
 8000644:	1b40      	subs	r0, r0, r5
 8000646:	42a0      	cmp	r0, r4
 8000648:	d3fa      	bcc.n	8000640 <HAL_Delay+0x14>
  {
  }
}
 800064a:	bd38      	pop	{r3, r4, r5, pc}
 800064c:	20000020 	.word	0x20000020

08000650 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000650:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4906      	ldr	r1, [pc, #24]	@ (8000670 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000656:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800065a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800066c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000676:	b500      	push	{lr}
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067e:	f1c3 0e07 	rsb	lr, r3, #7
 8000682:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068a:	bf28      	it	cs
 800068c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	f1bc 0f06 	cmp.w	ip, #6
 8000694:	d91c      	bls.n	80006d0 <HAL_NVIC_SetPriority+0x5c>
 8000696:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800069e:	fa03 f30c 	lsl.w	r3, r3, ip
 80006a2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006aa:	fa03 f30e 	lsl.w	r3, r3, lr
 80006ae:	ea21 0303 	bic.w	r3, r1, r3
 80006b2:	fa03 f30c 	lsl.w	r3, r3, ip
 80006b6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80006ba:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80006be:	db0a      	blt.n	80006d6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80006c4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80006c8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80006d0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	4694      	mov	ip, r2
 80006d4:	e7e7      	b.n	80006a6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <HAL_NVIC_SetPriority+0x74>)
 80006d8:	f000 000f 	and.w	r0, r0, #15
 80006dc:	4402      	add	r2, r0
 80006de:	7613      	strb	r3, [r2, #24]
 80006e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	e000ecfc 	.word	0xe000ecfc

080006ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	3801      	subs	r0, #1
 80006ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006f2:	d301      	bcc.n	80006f8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006f6:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	2107      	movs	r1, #7
{
 8000704:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	4c04      	ldr	r4, [pc, #16]	@ (8000718 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800070e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	619a      	str	r2, [r3, #24]
}
 8000712:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000714:	6119      	str	r1, [r3, #16]
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000720:	680d      	ldr	r5, [r1, #0]
{
 8000722:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000724:	2d00      	cmp	r5, #0
 8000726:	f000 80c3 	beq.w	80008b0 <HAL_GPIO_Init+0x194>
 800072a:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800072c:	4e80      	ldr	r6, [pc, #512]	@ (8000930 <HAL_GPIO_Init+0x214>)
  uint32_t config = 0x00u;
 800072e:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000730:	4613      	mov	r3, r2
      switch (GPIO_Init->Mode)
 8000732:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 8000934 <HAL_GPIO_Init+0x218>
 8000736:	4f80      	ldr	r7, [pc, #512]	@ (8000938 <HAL_GPIO_Init+0x21c>)
 8000738:	e006      	b.n	8000748 <HAL_GPIO_Init+0x2c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 800073a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800073c:	fa35 f403 	lsrs.w	r4, r5, r3
 8000740:	f102 0204 	add.w	r2, r2, #4
 8000744:	f000 80b4 	beq.w	80008b0 <HAL_GPIO_Init+0x194>
    ioposition = (0x01uL << position);
 8000748:	2401      	movs	r4, #1
 800074a:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 800074c:	ea34 0e05 	bics.w	lr, r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000750:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8000754:	d1f1      	bne.n	800073a <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8000756:	684d      	ldr	r5, [r1, #4]
 8000758:	2d12      	cmp	r5, #18
 800075a:	f200 80ac 	bhi.w	80008b6 <HAL_GPIO_Init+0x19a>
 800075e:	2d12      	cmp	r5, #18
 8000760:	d81a      	bhi.n	8000798 <HAL_GPIO_Init+0x7c>
 8000762:	e8df f005 	tbb	[pc, r5]
 8000766:	c5b3      	.short	0xc5b3
 8000768:	1919ccc1 	.word	0x1919ccc1
 800076c:	19191919 	.word	0x19191919
 8000770:	19191919 	.word	0x19191919
 8000774:	bd191919 	.word	0xbd191919
 8000778:	c8          	.byte	0xc8
 8000779:	00          	.byte	0x00
 800077a:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 800093c <HAL_GPIO_Init+0x220>
 800077e:	4575      	cmp	r5, lr
 8000780:	f000 80a4 	beq.w	80008cc <HAL_GPIO_Init+0x1b0>
 8000784:	f50e 2e70 	add.w	lr, lr, #983040	@ 0xf0000
 8000788:	4575      	cmp	r5, lr
 800078a:	f000 809f 	beq.w	80008cc <HAL_GPIO_Init+0x1b0>
 800078e:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8000792:	4575      	cmp	r5, lr
 8000794:	f000 809a 	beq.w	80008cc <HAL_GPIO_Init+0x1b0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000798:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 800079c:	bf9c      	itt	ls
 800079e:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007a0:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007a2:	f04f 050f 	mov.w	r5, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007a6:	bf84      	itt	hi
 80007a8:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007ac:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007b0:	f8de 4000 	ldr.w	r4, [lr]
 80007b4:	fa0a f90b 	lsl.w	r9, sl, fp
 80007b8:	fa05 fb0b 	lsl.w	fp, r5, fp
 80007bc:	ea24 040b 	bic.w	r4, r4, fp
 80007c0:	ea44 0409 	orr.w	r4, r4, r9
 80007c4:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007c8:	684c      	ldr	r4, [r1, #4]
 80007ca:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 80007ce:	f000 8085 	beq.w	80008dc <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007d2:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007d6:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	f04e 0e01 	orr.w	lr, lr, #1
 80007de:	f8c6 e018 	str.w	lr, [r6, #24]
 80007e2:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007e6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007ea:	f00e 0e01 	and.w	lr, lr, #1
 80007ee:	f8cd e004 	str.w	lr, [sp, #4]
 80007f2:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80007f6:	f023 0e03 	bic.w	lr, r3, #3
 80007fa:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 80007fe:	f50e 3e80 	add.w	lr, lr, #65536	@ 0x10000
 8000802:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000806:	fa05 f509 	lsl.w	r5, r5, r9
 800080a:	ea2b 0505 	bic.w	r5, fp, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800080e:	f8df b130 	ldr.w	fp, [pc, #304]	@ 8000940 <HAL_GPIO_Init+0x224>
 8000812:	4558      	cmp	r0, fp
 8000814:	d013      	beq.n	800083e <HAL_GPIO_Init+0x122>
 8000816:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 800081a:	4558      	cmp	r0, fp
 800081c:	d079      	beq.n	8000912 <HAL_GPIO_Init+0x1f6>
 800081e:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8000944 <HAL_GPIO_Init+0x228>
 8000822:	4558      	cmp	r0, fp
 8000824:	d06e      	beq.n	8000904 <HAL_GPIO_Init+0x1e8>
 8000826:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8000948 <HAL_GPIO_Init+0x22c>
 800082a:	4558      	cmp	r0, fp
 800082c:	bf0c      	ite	eq
 800082e:	f04f 0b03 	moveq.w	fp, #3
 8000832:	f04f 0b04 	movne.w	fp, #4
 8000836:	fa0b f909 	lsl.w	r9, fp, r9
 800083a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800083e:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000842:	f8df e108 	ldr.w	lr, [pc, #264]	@ 800094c <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000846:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800084a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800084e:	bf14      	ite	ne
 8000850:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000854:	ea25 050c 	biceq.w	r5, r5, ip
 8000858:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800085c:	f8df e0ec 	ldr.w	lr, [pc, #236]	@ 800094c <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000860:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000864:	f8de 500c 	ldr.w	r5, [lr, #12]
 8000868:	bf14      	ite	ne
 800086a:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800086e:	ea25 050c 	biceq.w	r5, r5, ip
 8000872:	f8ce 500c 	str.w	r5, [lr, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000876:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 800094c <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800087a:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800087e:	f8de 5004 	ldr.w	r5, [lr, #4]
 8000882:	bf14      	ite	ne
 8000884:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000888:	ea25 050c 	biceq.w	r5, r5, ip
 800088c:	f8ce 5004 	str.w	r5, [lr, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000890:	4d2e      	ldr	r5, [pc, #184]	@ (800094c <HAL_GPIO_Init+0x230>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000892:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000896:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000898:	d01d      	beq.n	80008d6 <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->IMR, iocurrent);
 800089a:	ea44 040c 	orr.w	r4, r4, ip
 800089e:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a0:	680d      	ldr	r5, [r1, #0]
	position++;
 80008a2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a4:	fa35 f403 	lsrs.w	r4, r5, r3
 80008a8:	f102 0204 	add.w	r2, r2, #4
 80008ac:	f47f af4c 	bne.w	8000748 <HAL_GPIO_Init+0x2c>
  }
}
 80008b0:	b003      	add	sp, #12
 80008b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80008b6:	4545      	cmp	r5, r8
 80008b8:	d008      	beq.n	80008cc <HAL_GPIO_Init+0x1b0>
 80008ba:	f67f af5e 	bls.w	800077a <HAL_GPIO_Init+0x5e>
 80008be:	42bd      	cmp	r5, r7
 80008c0:	d004      	beq.n	80008cc <HAL_GPIO_Init+0x1b0>
 80008c2:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 8000950 <HAL_GPIO_Init+0x234>
 80008c6:	4575      	cmp	r5, lr
 80008c8:	f47f af66 	bne.w	8000798 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008cc:	688d      	ldr	r5, [r1, #8]
 80008ce:	bb3d      	cbnz	r5, 8000920 <HAL_GPIO_Init+0x204>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008d0:	f04f 0a04 	mov.w	sl, #4
 80008d4:	e760      	b.n	8000798 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008d6:	ea24 040c 	bic.w	r4, r4, ip
 80008da:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008dc:	680d      	ldr	r5, [r1, #0]
 80008de:	e72c      	b.n	800073a <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008e0:	68cc      	ldr	r4, [r1, #12]
 80008e2:	f104 0a04 	add.w	sl, r4, #4
          break;
 80008e6:	e757      	b.n	8000798 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e8:	68cc      	ldr	r4, [r1, #12]
 80008ea:	f104 0a08 	add.w	sl, r4, #8
          break;
 80008ee:	e753      	b.n	8000798 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f0:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80008f4:	e750      	b.n	8000798 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f6:	68cc      	ldr	r4, [r1, #12]
 80008f8:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80008fc:	e74c      	b.n	8000798 <HAL_GPIO_Init+0x7c>
      switch (GPIO_Init->Mode)
 80008fe:	f04f 0a00 	mov.w	sl, #0
 8000902:	e749      	b.n	8000798 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000904:	f04f 0b02 	mov.w	fp, #2
 8000908:	fa0b f909 	lsl.w	r9, fp, r9
 800090c:	ea45 0509 	orr.w	r5, r5, r9
 8000910:	e795      	b.n	800083e <HAL_GPIO_Init+0x122>
 8000912:	f04f 0b01 	mov.w	fp, #1
 8000916:	fa0b f909 	lsl.w	r9, fp, r9
 800091a:	ea45 0509 	orr.w	r5, r5, r9
 800091e:	e78e      	b.n	800083e <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000920:	2d01      	cmp	r5, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000922:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000926:	bf0c      	ite	eq
 8000928:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 800092a:	6144      	strne	r4, [r0, #20]
 800092c:	e734      	b.n	8000798 <HAL_GPIO_Init+0x7c>
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000
 8000934:	10220000 	.word	0x10220000
 8000938:	10310000 	.word	0x10310000
 800093c:	10120000 	.word	0x10120000
 8000940:	40010800 	.word	0x40010800
 8000944:	40011000 	.word	0x40011000
 8000948:	40011400 	.word	0x40011400
 800094c:	40010400 	.word	0x40010400
 8000950:	10320000 	.word	0x10320000

08000954 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000954:	b902      	cbnz	r2, 8000958 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000956:	0409      	lsls	r1, r1, #16
 8000958:	6101      	str	r1, [r0, #16]
  }
}
 800095a:	4770      	bx	lr

0800095c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800095c:	2800      	cmp	r0, #0
 800095e:	f000 81e4 	beq.w	8000d2a <HAL_RCC_OscConfig+0x3ce>
{
 8000962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000966:	6803      	ldr	r3, [r0, #0]
 8000968:	4604      	mov	r4, r0
 800096a:	07dd      	lsls	r5, r3, #31
{
 800096c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800096e:	d535      	bpl.n	80009dc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000970:	4999      	ldr	r1, [pc, #612]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 8000972:	684a      	ldr	r2, [r1, #4]
 8000974:	f002 020c 	and.w	r2, r2, #12
 8000978:	2a04      	cmp	r2, #4
 800097a:	f000 80ed 	beq.w	8000b58 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800097e:	684a      	ldr	r2, [r1, #4]
 8000980:	f002 020c 	and.w	r2, r2, #12
 8000984:	2a08      	cmp	r2, #8
 8000986:	f000 80e3 	beq.w	8000b50 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800098a:	6863      	ldr	r3, [r4, #4]
 800098c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000990:	d010      	beq.n	80009b4 <HAL_RCC_OscConfig+0x58>
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 810a 	beq.w	8000bac <HAL_RCC_OscConfig+0x250>
 8000998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800099c:	f000 8180 	beq.w	8000ca0 <HAL_RCC_OscConfig+0x344>
 80009a0:	4b8d      	ldr	r3, [pc, #564]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80009b0:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009b2:	e004      	b.n	80009be <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b4:	4a88      	ldr	r2, [pc, #544]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 80009b6:	6813      	ldr	r3, [r2, #0]
 80009b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009bc:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009be:	f7ff fe2f 	bl	8000620 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009c2:	4e85      	ldr	r6, [pc, #532]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 80009c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009c6:	e005      	b.n	80009d4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009c8:	f7ff fe2a 	bl	8000620 <HAL_GetTick>
 80009cc:	1b40      	subs	r0, r0, r5
 80009ce:	2864      	cmp	r0, #100	@ 0x64
 80009d0:	f200 80e8 	bhi.w	8000ba4 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d4:	6833      	ldr	r3, [r6, #0]
 80009d6:	039a      	lsls	r2, r3, #14
 80009d8:	d5f6      	bpl.n	80009c8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	079f      	lsls	r7, r3, #30
 80009de:	d528      	bpl.n	8000a32 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009e0:	4a7d      	ldr	r2, [pc, #500]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 80009e2:	6851      	ldr	r1, [r2, #4]
 80009e4:	f011 0f0c 	tst.w	r1, #12
 80009e8:	f000 8096 	beq.w	8000b18 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009ec:	6851      	ldr	r1, [r2, #4]
 80009ee:	f001 010c 	and.w	r1, r1, #12
 80009f2:	2908      	cmp	r1, #8
 80009f4:	f000 808c 	beq.w	8000b10 <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009f8:	6923      	ldr	r3, [r4, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8116 	beq.w	8000c2c <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a00:	2201      	movs	r2, #1
 8000a02:	4b76      	ldr	r3, [pc, #472]	@ (8000bdc <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a04:	4e74      	ldr	r6, [pc, #464]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 8000a06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a08:	f7ff fe0a 	bl	8000620 <HAL_GetTick>
 8000a0c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a0e:	e005      	b.n	8000a1c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a10:	f7ff fe06 	bl	8000620 <HAL_GetTick>
 8000a14:	1b40      	subs	r0, r0, r5
 8000a16:	2802      	cmp	r0, #2
 8000a18:	f200 80c4 	bhi.w	8000ba4 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a1c:	6833      	ldr	r3, [r6, #0]
 8000a1e:	0798      	lsls	r0, r3, #30
 8000a20:	d5f6      	bpl.n	8000a10 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a22:	6833      	ldr	r3, [r6, #0]
 8000a24:	6962      	ldr	r2, [r4, #20]
 8000a26:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000a2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a2e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	071a      	lsls	r2, r3, #28
 8000a34:	d429      	bmi.n	8000a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a36:	075d      	lsls	r5, r3, #29
 8000a38:	d54b      	bpl.n	8000ad2 <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3a:	4b67      	ldr	r3, [pc, #412]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 8000a3c:	69da      	ldr	r2, [r3, #28]
 8000a3e:	00d0      	lsls	r0, r2, #3
 8000a40:	f100 8084 	bmi.w	8000b4c <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000a44:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a4c:	61da      	str	r2, [r3, #28]
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a58:	4e61      	ldr	r6, [pc, #388]	@ (8000be0 <HAL_RCC_OscConfig+0x284>)
 8000a5a:	6833      	ldr	r3, [r6, #0]
 8000a5c:	05d9      	lsls	r1, r3, #23
 8000a5e:	f140 8091 	bpl.w	8000b84 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a62:	68e3      	ldr	r3, [r4, #12]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	f000 80f2 	beq.w	8000c4e <HAL_RCC_OscConfig+0x2f2>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 80be 	beq.w	8000bec <HAL_RCC_OscConfig+0x290>
 8000a70:	2b05      	cmp	r3, #5
 8000a72:	4b59      	ldr	r3, [pc, #356]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 8000a74:	6a1a      	ldr	r2, [r3, #32]
 8000a76:	f000 8120 	beq.w	8000cba <HAL_RCC_OscConfig+0x35e>
 8000a7a:	f022 0201 	bic.w	r2, r2, #1
 8000a7e:	621a      	str	r2, [r3, #32]
 8000a80:	6a1a      	ldr	r2, [r3, #32]
 8000a82:	f022 0204 	bic.w	r2, r2, #4
 8000a86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a88:	e0e6      	b.n	8000c58 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a8a:	69a3      	ldr	r3, [r4, #24]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d04c      	beq.n	8000b2a <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 8000a90:	2201      	movs	r2, #1
 8000a92:	4b52      	ldr	r3, [pc, #328]	@ (8000bdc <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a94:	4e50      	ldr	r6, [pc, #320]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 8000a96:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000a9a:	f7ff fdc1 	bl	8000620 <HAL_GetTick>
 8000a9e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa0:	e004      	b.n	8000aac <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aa2:	f7ff fdbd 	bl	8000620 <HAL_GetTick>
 8000aa6:	1b40      	subs	r0, r0, r5
 8000aa8:	2802      	cmp	r0, #2
 8000aaa:	d87b      	bhi.n	8000ba4 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aac:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8000aae:	079b      	lsls	r3, r3, #30
 8000ab0:	d5f7      	bpl.n	8000aa2 <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8000be4 <HAL_RCC_OscConfig+0x288>)
 8000ab4:	4a4c      	ldr	r2, [pc, #304]	@ (8000be8 <HAL_RCC_OscConfig+0x28c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8000abc:	0a5b      	lsrs	r3, r3, #9
 8000abe:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000ac0:	bf00      	nop
  }
  while (Delay --);
 8000ac2:	9b01      	ldr	r3, [sp, #4]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	9201      	str	r2, [sp, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1f9      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	075d      	lsls	r5, r3, #29
 8000ad0:	d4b3      	bmi.n	8000a3a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ad2:	69e3      	ldr	r3, [r4, #28]
 8000ad4:	b1c3      	cbz	r3, 8000b08 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ad6:	4d40      	ldr	r5, [pc, #256]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 8000ad8:	686a      	ldr	r2, [r5, #4]
 8000ada:	f002 020c 	and.w	r2, r2, #12
 8000ade:	2a08      	cmp	r2, #8
 8000ae0:	f000 80cd 	beq.w	8000c7e <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8000ae4:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ae6:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bdc <HAL_RCC_OscConfig+0x280>)
 8000aea:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aec:	f000 80ed 	beq.w	8000cca <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8000af0:	f7ff fd96 	bl	8000620 <HAL_GetTick>
 8000af4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000af6:	e004      	b.n	8000b02 <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000af8:	f7ff fd92 	bl	8000620 <HAL_GetTick>
 8000afc:	1b00      	subs	r0, r0, r4
 8000afe:	2802      	cmp	r0, #2
 8000b00:	d850      	bhi.n	8000ba4 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b02:	682b      	ldr	r3, [r5, #0]
 8000b04:	019b      	lsls	r3, r3, #6
 8000b06:	d4f7      	bmi.n	8000af8 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 8000b08:	2000      	movs	r0, #0
}
 8000b0a:	b002      	add	sp, #8
 8000b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b10:	6852      	ldr	r2, [r2, #4]
 8000b12:	03d6      	lsls	r6, r2, #15
 8000b14:	f53f af70 	bmi.w	80009f8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b18:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	0795      	lsls	r5, r2, #30
 8000b1e:	d525      	bpl.n	8000b6c <HAL_RCC_OscConfig+0x210>
 8000b20:	6922      	ldr	r2, [r4, #16]
 8000b22:	2a01      	cmp	r2, #1
 8000b24:	d022      	beq.n	8000b6c <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 8000b26:	2001      	movs	r0, #1
 8000b28:	e7ef      	b.n	8000b0a <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 8000b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000bdc <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b2c:	4e2a      	ldr	r6, [pc, #168]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8000b2e:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000b32:	f7ff fd75 	bl	8000620 <HAL_GetTick>
 8000b36:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b38:	e004      	b.n	8000b44 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b3a:	f7ff fd71 	bl	8000620 <HAL_GetTick>
 8000b3e:	1b40      	subs	r0, r0, r5
 8000b40:	2802      	cmp	r0, #2
 8000b42:	d82f      	bhi.n	8000ba4 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b44:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8000b46:	079f      	lsls	r7, r3, #30
 8000b48:	d4f7      	bmi.n	8000b3a <HAL_RCC_OscConfig+0x1de>
 8000b4a:	e7bf      	b.n	8000acc <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	e783      	b.n	8000a58 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b50:	684a      	ldr	r2, [r1, #4]
 8000b52:	03d0      	lsls	r0, r2, #15
 8000b54:	f57f af19 	bpl.w	800098a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b58:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	0391      	lsls	r1, r2, #14
 8000b5e:	f57f af3d 	bpl.w	80009dc <HAL_RCC_OscConfig+0x80>
 8000b62:	6862      	ldr	r2, [r4, #4]
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f47f af39 	bne.w	80009dc <HAL_RCC_OscConfig+0x80>
 8000b6a:	e7dc      	b.n	8000b26 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6c:	491a      	ldr	r1, [pc, #104]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 8000b6e:	6960      	ldr	r0, [r4, #20]
 8000b70:	680a      	ldr	r2, [r1, #0]
 8000b72:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8000b76:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000b7a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b7c:	071a      	lsls	r2, r3, #28
 8000b7e:	f57f af5a 	bpl.w	8000a36 <HAL_RCC_OscConfig+0xda>
 8000b82:	e782      	b.n	8000a8a <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b84:	6833      	ldr	r3, [r6, #0]
 8000b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b8c:	f7ff fd48 	bl	8000620 <HAL_GetTick>
 8000b90:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b92:	6833      	ldr	r3, [r6, #0]
 8000b94:	05da      	lsls	r2, r3, #23
 8000b96:	f53f af64 	bmi.w	8000a62 <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b9a:	f7ff fd41 	bl	8000620 <HAL_GetTick>
 8000b9e:	1bc0      	subs	r0, r0, r7
 8000ba0:	2864      	cmp	r0, #100	@ 0x64
 8000ba2:	d9f6      	bls.n	8000b92 <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8000ba4:	2003      	movs	r0, #3
}
 8000ba6:	b002      	add	sp, #8
 8000ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bac:	4d0a      	ldr	r5, [pc, #40]	@ (8000bd8 <HAL_RCC_OscConfig+0x27c>)
 8000bae:	682b      	ldr	r3, [r5, #0]
 8000bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bb4:	602b      	str	r3, [r5, #0]
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fd2f 	bl	8000620 <HAL_GetTick>
 8000bc2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc4:	e004      	b.n	8000bd0 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fd2b 	bl	8000620 <HAL_GetTick>
 8000bca:	1b80      	subs	r0, r0, r6
 8000bcc:	2864      	cmp	r0, #100	@ 0x64
 8000bce:	d8e9      	bhi.n	8000ba4 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	039b      	lsls	r3, r3, #14
 8000bd4:	d4f7      	bmi.n	8000bc6 <HAL_RCC_OscConfig+0x26a>
 8000bd6:	e700      	b.n	80009da <HAL_RCC_OscConfig+0x7e>
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	42420000 	.word	0x42420000
 8000be0:	40007000 	.word	0x40007000
 8000be4:	2000001c 	.word	0x2000001c
 8000be8:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bec:	4e50      	ldr	r6, [pc, #320]	@ (8000d30 <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bee:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf2:	6a33      	ldr	r3, [r6, #32]
 8000bf4:	f023 0301 	bic.w	r3, r3, #1
 8000bf8:	6233      	str	r3, [r6, #32]
 8000bfa:	6a33      	ldr	r3, [r6, #32]
 8000bfc:	f023 0304 	bic.w	r3, r3, #4
 8000c00:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000c02:	f7ff fd0d 	bl	8000620 <HAL_GetTick>
 8000c06:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c08:	e004      	b.n	8000c14 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c0a:	f7ff fd09 	bl	8000620 <HAL_GetTick>
 8000c0e:	1bc0      	subs	r0, r0, r7
 8000c10:	4540      	cmp	r0, r8
 8000c12:	d8c7      	bhi.n	8000ba4 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c14:	6a33      	ldr	r3, [r6, #32]
 8000c16:	0798      	lsls	r0, r3, #30
 8000c18:	d4f7      	bmi.n	8000c0a <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	f43f af59 	beq.w	8000ad2 <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c20:	4a43      	ldr	r2, [pc, #268]	@ (8000d30 <HAL_RCC_OscConfig+0x3d4>)
 8000c22:	69d3      	ldr	r3, [r2, #28]
 8000c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	e752      	b.n	8000ad2 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8000c2c:	4a41      	ldr	r2, [pc, #260]	@ (8000d34 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c2e:	4e40      	ldr	r6, [pc, #256]	@ (8000d30 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8000c30:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c32:	f7ff fcf5 	bl	8000620 <HAL_GetTick>
 8000c36:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c38:	e004      	b.n	8000c44 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c3a:	f7ff fcf1 	bl	8000620 <HAL_GetTick>
 8000c3e:	1b40      	subs	r0, r0, r5
 8000c40:	2802      	cmp	r0, #2
 8000c42:	d8af      	bhi.n	8000ba4 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c44:	6833      	ldr	r3, [r6, #0]
 8000c46:	0799      	lsls	r1, r3, #30
 8000c48:	d4f7      	bmi.n	8000c3a <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	e6f1      	b.n	8000a32 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c4e:	4a38      	ldr	r2, [pc, #224]	@ (8000d30 <HAL_RCC_OscConfig+0x3d4>)
 8000c50:	6a13      	ldr	r3, [r2, #32]
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000c58:	f7ff fce2 	bl	8000620 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c5c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000c60:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c62:	4f33      	ldr	r7, [pc, #204]	@ (8000d30 <HAL_RCC_OscConfig+0x3d4>)
 8000c64:	e004      	b.n	8000c70 <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c66:	f7ff fcdb 	bl	8000620 <HAL_GetTick>
 8000c6a:	1b80      	subs	r0, r0, r6
 8000c6c:	4540      	cmp	r0, r8
 8000c6e:	d899      	bhi.n	8000ba4 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	079b      	lsls	r3, r3, #30
 8000c74:	d5f7      	bpl.n	8000c66 <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f43f af2b 	beq.w	8000ad2 <HAL_RCC_OscConfig+0x176>
 8000c7c:	e7d0      	b.n	8000c20 <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	f43f af51 	beq.w	8000b26 <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8000c84:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c86:	6a22      	ldr	r2, [r4, #32]
 8000c88:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8000c8c:	4291      	cmp	r1, r2
 8000c8e:	f47f af4a 	bne.w	8000b26 <HAL_RCC_OscConfig+0x1ca>
 8000c92:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c94:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c98:	1a18      	subs	r0, r3, r0
 8000c9a:	bf18      	it	ne
 8000c9c:	2001      	movne	r0, #1
 8000c9e:	e734      	b.n	8000b0a <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ca4:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000cb6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb8:	e681      	b.n	80009be <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cba:	f042 0204 	orr.w	r2, r2, #4
 8000cbe:	621a      	str	r2, [r3, #32]
 8000cc0:	6a1a      	ldr	r2, [r3, #32]
 8000cc2:	f042 0201 	orr.w	r2, r2, #1
 8000cc6:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cc8:	e7c6      	b.n	8000c58 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 8000cca:	f7ff fca9 	bl	8000620 <HAL_GetTick>
 8000cce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd0:	e005      	b.n	8000cde <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd2:	f7ff fca5 	bl	8000620 <HAL_GetTick>
 8000cd6:	1b80      	subs	r0, r0, r6
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	f63f af63 	bhi.w	8000ba4 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	0199      	lsls	r1, r3, #6
 8000ce2:	d4f6      	bmi.n	8000cd2 <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ce4:	6a23      	ldr	r3, [r4, #32]
 8000ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cea:	d105      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cec:	686a      	ldr	r2, [r5, #4]
 8000cee:	68a1      	ldr	r1, [r4, #8]
 8000cf0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cf8:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8000d30 <HAL_RCC_OscConfig+0x3d4>)
 8000cfc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000cfe:	686a      	ldr	r2, [r5, #4]
 8000d00:	430b      	orrs	r3, r1
 8000d02:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000d06:	490b      	ldr	r1, [pc, #44]	@ (8000d34 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d0c:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fc87 	bl	8000620 <HAL_GetTick>
 8000d12:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d14:	e005      	b.n	8000d22 <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d16:	f7ff fc83 	bl	8000620 <HAL_GetTick>
 8000d1a:	1b00      	subs	r0, r0, r4
 8000d1c:	2802      	cmp	r0, #2
 8000d1e:	f63f af41 	bhi.w	8000ba4 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	019a      	lsls	r2, r3, #6
 8000d26:	d5f6      	bpl.n	8000d16 <HAL_RCC_OscConfig+0x3ba>
 8000d28:	e6ee      	b.n	8000b08 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	42420000 	.word	0x42420000

08000d38 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	f000 80a1 	beq.w	8000e80 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d3e:	4a56      	ldr	r2, [pc, #344]	@ (8000e98 <HAL_RCC_ClockConfig+0x160>)
{
 8000d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d44:	6813      	ldr	r3, [r2, #0]
 8000d46:	4604      	mov	r4, r0
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	460d      	mov	r5, r1
 8000d50:	d20c      	bcs.n	8000d6c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	f023 0307 	bic.w	r3, r3, #7
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d5c:	6813      	ldr	r3, [r2, #0]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d002      	beq.n	8000d6c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8000d66:	2001      	movs	r0, #1
}
 8000d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	079e      	lsls	r6, r3, #30
 8000d70:	d514      	bpl.n	8000d9c <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d72:	0758      	lsls	r0, r3, #29
 8000d74:	d504      	bpl.n	8000d80 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d76:	4949      	ldr	r1, [pc, #292]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000d78:	684a      	ldr	r2, [r1, #4]
 8000d7a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8000d7e:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d80:	0719      	lsls	r1, r3, #28
 8000d82:	d504      	bpl.n	8000d8e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d84:	4945      	ldr	r1, [pc, #276]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000d86:	684a      	ldr	r2, [r1, #4]
 8000d88:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8000d8c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d8e:	4943      	ldr	r1, [pc, #268]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000d90:	68a0      	ldr	r0, [r4, #8]
 8000d92:	684a      	ldr	r2, [r1, #4]
 8000d94:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000d98:	4302      	orrs	r2, r0
 8000d9a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d9c:	07da      	lsls	r2, r3, #31
 8000d9e:	d520      	bpl.n	8000de2 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da0:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	4b3e      	ldr	r3, [pc, #248]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da8:	d06c      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000daa:	2a02      	cmp	r2, #2
 8000dac:	d065      	beq.n	8000e7a <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dae:	079e      	lsls	r6, r3, #30
 8000db0:	d5d9      	bpl.n	8000d66 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000db2:	4e3a      	ldr	r6, [pc, #232]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db4:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000db8:	6873      	ldr	r3, [r6, #4]
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000dc2:	f7ff fc2d 	bl	8000620 <HAL_GetTick>
 8000dc6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dc8:	e004      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dca:	f7ff fc29 	bl	8000620 <HAL_GetTick>
 8000dce:	1bc0      	subs	r0, r0, r7
 8000dd0:	4540      	cmp	r0, r8
 8000dd2:	d85a      	bhi.n	8000e8a <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dd4:	6873      	ldr	r3, [r6, #4]
 8000dd6:	6862      	ldr	r2, [r4, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000de0:	d1f3      	bne.n	8000dca <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000de2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e98 <HAL_RCC_ClockConfig+0x160>)
 8000de4:	6813      	ldr	r3, [r2, #0]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	42ab      	cmp	r3, r5
 8000dec:	d909      	bls.n	8000e02 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	432b      	orrs	r3, r5
 8000df6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000df8:	6813      	ldr	r3, [r2, #0]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	42ab      	cmp	r3, r5
 8000e00:	d1b1      	bne.n	8000d66 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e02:	6823      	ldr	r3, [r4, #0]
 8000e04:	0758      	lsls	r0, r3, #29
 8000e06:	d506      	bpl.n	8000e16 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e08:	4924      	ldr	r1, [pc, #144]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000e0a:	68e0      	ldr	r0, [r4, #12]
 8000e0c:	684a      	ldr	r2, [r1, #4]
 8000e0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000e12:	4302      	orrs	r2, r0
 8000e14:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e16:	0719      	lsls	r1, r3, #28
 8000e18:	d507      	bpl.n	8000e2a <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e1a:	4a20      	ldr	r2, [pc, #128]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000e1c:	6921      	ldr	r1, [r4, #16]
 8000e1e:	6853      	ldr	r3, [r2, #4]
 8000e20:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000e24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e28:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8000e2a:	491c      	ldr	r1, [pc, #112]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000e2c:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e2e:	f002 030c 	and.w	r3, r2, #12
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d010      	beq.n	8000e58 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e38:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000e3a:	481a      	ldr	r0, [pc, #104]	@ (8000ea4 <HAL_RCC_ClockConfig+0x16c>)
 8000e3c:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8000e3e:	491a      	ldr	r1, [pc, #104]	@ (8000ea8 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e40:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000e44:	5c80      	ldrb	r0, [r0, r2]
 8000e46:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <HAL_RCC_ClockConfig+0x174>)
 8000e48:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8000e4a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e4c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8000e4e:	f7ff fba5 	bl	800059c <HAL_InitTick>
  return HAL_OK;
 8000e52:	2000      	movs	r0, #0
}
 8000e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e58:	4815      	ldr	r0, [pc, #84]	@ (8000eb0 <HAL_RCC_ClockConfig+0x178>)
 8000e5a:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e5e:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e60:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e62:	d514      	bpl.n	8000e8e <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e64:	480e      	ldr	r0, [pc, #56]	@ (8000ea0 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e66:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e68:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e6c:	4911      	ldr	r1, [pc, #68]	@ (8000eb4 <HAL_RCC_ClockConfig+0x17c>)
 8000e6e:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8000e72:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e78:	e7de      	b.n	8000e38 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e7a:	019f      	lsls	r7, r3, #6
 8000e7c:	d499      	bmi.n	8000db2 <HAL_RCC_ClockConfig+0x7a>
 8000e7e:	e772      	b.n	8000d66 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8000e80:	2001      	movs	r0, #1
}
 8000e82:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e84:	039b      	lsls	r3, r3, #14
 8000e86:	d494      	bmi.n	8000db2 <HAL_RCC_ClockConfig+0x7a>
 8000e88:	e76d      	b.n	8000d66 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	e76c      	b.n	8000d68 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_RCC_ClockConfig+0x180>)
 8000e90:	fb02 f303 	mul.w	r3, r2, r3
 8000e94:	e7d0      	b.n	8000e38 <HAL_RCC_ClockConfig+0x100>
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	007a1200 	.word	0x007a1200
 8000ea4:	080011e4 	.word	0x080011e4
 8000ea8:	20000024 	.word	0x20000024
 8000eac:	2000001c 	.word	0x2000001c
 8000eb0:	080011f8 	.word	0x080011f8
 8000eb4:	080011f4 	.word	0x080011f4
 8000eb8:	003d0900 	.word	0x003d0900

08000ebc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d068      	beq.n	8000f92 <HAL_TIM_Base_Init+0xd6>
{
 8000ec0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ec2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d04a      	beq.n	8000f66 <HAL_TIM_Base_Init+0xaa>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000ed0:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8000ed4:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ed6:	4e30      	ldr	r6, [pc, #192]	@ (8000f98 <HAL_TIM_Base_Init+0xdc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8000ed8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000edc:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ede:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ee0:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 8000ee2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ee4:	d044      	beq.n	8000f70 <HAL_TIM_Base_Init+0xb4>
 8000ee6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8000eea:	d00e      	beq.n	8000f0a <HAL_TIM_Base_Init+0x4e>
 8000eec:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8000ef0:	42b2      	cmp	r2, r6
 8000ef2:	d00a      	beq.n	8000f0a <HAL_TIM_Base_Init+0x4e>
 8000ef4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8000ef8:	42b2      	cmp	r2, r6
 8000efa:	d006      	beq.n	8000f0a <HAL_TIM_Base_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f00:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8000f02:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f04:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000f06:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f08:	e00d      	b.n	8000f26 <HAL_TIM_Base_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000f0a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f10:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f12:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f18:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f1e:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8000f20:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f22:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000f24:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f26:	2301      	movs	r3, #1
 8000f28:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8000f2a:	6913      	ldr	r3, [r2, #16]
 8000f2c:	07db      	lsls	r3, r3, #31
 8000f2e:	d503      	bpl.n	8000f38 <HAL_TIM_Base_Init+0x7c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8000f30:	6913      	ldr	r3, [r2, #16]
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f3e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8000f42:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8000f46:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8000f4a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f4e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f56:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8000f5a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8000f5e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8000f62:	2000      	movs	r0, #0
}
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8000f66:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f6a:	f7ff fac7 	bl	80004fc <HAL_TIM_Base_MspInit>
 8000f6e:	e7af      	b.n	8000ed0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8000f70:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f76:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f78:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f7e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000f80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f84:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8000f86:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f88:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000f8a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8000f8c:	6963      	ldr	r3, [r4, #20]
 8000f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f90:	e7c9      	b.n	8000f26 <HAL_TIM_Base_Init+0x6a>
    return HAL_ERROR;
 8000f92:	2001      	movs	r0, #1
}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40012c00 	.word	0x40012c00

08000f9c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000f9c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d071      	beq.n	8001088 <HAL_TIM_ConfigClockSource+0xec>
 8000fa4:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8000fa6:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8000fa8:	2001      	movs	r0, #1
{
 8000faa:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8000fac:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 8000fae:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8000fb2:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000fb6:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000fbc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000fc0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8000fc2:	680b      	ldr	r3, [r1, #0]
 8000fc4:	2b60      	cmp	r3, #96	@ 0x60
 8000fc6:	d061      	beq.n	800108c <HAL_TIM_ConfigClockSource+0xf0>
 8000fc8:	d824      	bhi.n	8001014 <HAL_TIM_ConfigClockSource+0x78>
 8000fca:	2b40      	cmp	r3, #64	@ 0x40
 8000fcc:	d077      	beq.n	80010be <HAL_TIM_ConfigClockSource+0x122>
 8000fce:	d94a      	bls.n	8001066 <HAL_TIM_ConfigClockSource+0xca>
 8000fd0:	2b50      	cmp	r3, #80	@ 0x50
 8000fd2:	d117      	bne.n	8001004 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8000fd4:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8000fd6:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000fd8:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fda:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8000fde:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fe0:	6a23      	ldr	r3, [r4, #32]
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fe8:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fee:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000ff2:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8000ff4:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000ff6:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000ffc:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001000:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001004:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8001006:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001008:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800100c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8001010:	bc30      	pop	{r4, r5}
 8001012:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001018:	d0f3      	beq.n	8001002 <HAL_TIM_ConfigClockSource+0x66>
 800101a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800101e:	d110      	bne.n	8001042 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001020:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001024:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001026:	432b      	orrs	r3, r5
 8001028:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800102a:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800102e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001032:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001034:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001036:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001038:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800103a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103e:	60a3      	str	r3, [r4, #8]
      break;
 8001040:	e7e0      	b.n	8001004 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8001042:	2b70      	cmp	r3, #112	@ 0x70
 8001044:	d1de      	bne.n	8001004 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001046:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800104a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800104c:	432b      	orrs	r3, r5
 800104e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001050:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001054:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001058:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800105a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800105c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800105e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001062:	60a3      	str	r3, [r4, #8]
      break;
 8001064:	e7cd      	b.n	8001002 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001066:	2b20      	cmp	r3, #32
 8001068:	d002      	beq.n	8001070 <HAL_TIM_ConfigClockSource+0xd4>
 800106a:	d909      	bls.n	8001080 <HAL_TIM_ConfigClockSource+0xe4>
 800106c:	2b30      	cmp	r3, #48	@ 0x30
 800106e:	d1c9      	bne.n	8001004 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8001070:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001072:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001076:	430b      	orrs	r3, r1
 8001078:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800107c:	60a3      	str	r3, [r4, #8]
}
 800107e:	e7c0      	b.n	8001002 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001080:	f033 0110 	bics.w	r1, r3, #16
 8001084:	d1be      	bne.n	8001004 <HAL_TIM_ConfigClockSource+0x68>
 8001086:	e7f3      	b.n	8001070 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8001088:	2002      	movs	r0, #2
}
 800108a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800108c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800108e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001090:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001092:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001094:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001098:	f021 0110 	bic.w	r1, r1, #16
 800109c:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800109e:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 80010a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80010a4:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80010a8:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80010ac:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80010ae:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80010b0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80010b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80010b6:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80010ba:	60a3      	str	r3, [r4, #8]
}
 80010bc:	e7a1      	b.n	8001002 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 80010be:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80010c0:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80010c2:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80010c4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80010c8:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010ca:	6a23      	ldr	r3, [r4, #32]
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010d2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80010d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010d8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80010dc:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80010de:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80010e0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80010e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80010e6:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80010ea:	60a3      	str	r3, [r4, #8]
}
 80010ec:	e789      	b.n	8001002 <HAL_TIM_ConfigClockSource+0x66>
 80010ee:	bf00      	nop

080010f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80010f0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80010f4:	2a01      	cmp	r2, #1
 80010f6:	d027      	beq.n	8001148 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80010f8:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010fa:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80010fc:	681a      	ldr	r2, [r3, #0]
{
 80010fe:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001100:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001104:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001106:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001108:	4d10      	ldr	r5, [pc, #64]	@ (800114c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800110a:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800110e:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001110:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8001112:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8001114:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001116:	d009      	beq.n	800112c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001118:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800111c:	d006      	beq.n	800112c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800111e:	480c      	ldr	r0, [pc, #48]	@ (8001150 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001120:	4282      	cmp	r2, r0
 8001122:	d003      	beq.n	800112c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001124:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001128:	4282      	cmp	r2, r0
 800112a:	d104      	bne.n	8001136 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800112c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800112e:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001132:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001134:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001136:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8001138:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800113e:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001142:	4610      	mov	r0, r2
}
 8001144:	bc30      	pop	{r4, r5}
 8001146:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001148:	2002      	movs	r0, #2
}
 800114a:	4770      	bx	lr
 800114c:	40012c00 	.word	0x40012c00
 8001150:	40000400 	.word	0x40000400

08001154 <memset>:
 8001154:	4603      	mov	r3, r0
 8001156:	4402      	add	r2, r0
 8001158:	4293      	cmp	r3, r2
 800115a:	d100      	bne.n	800115e <memset+0xa>
 800115c:	4770      	bx	lr
 800115e:	f803 1b01 	strb.w	r1, [r3], #1
 8001162:	e7f9      	b.n	8001158 <memset+0x4>

08001164 <__libc_init_array>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	2600      	movs	r6, #0
 8001168:	4d0c      	ldr	r5, [pc, #48]	@ (800119c <__libc_init_array+0x38>)
 800116a:	4c0d      	ldr	r4, [pc, #52]	@ (80011a0 <__libc_init_array+0x3c>)
 800116c:	1b64      	subs	r4, r4, r5
 800116e:	10a4      	asrs	r4, r4, #2
 8001170:	42a6      	cmp	r6, r4
 8001172:	d109      	bne.n	8001188 <__libc_init_array+0x24>
 8001174:	f000 f81a 	bl	80011ac <_init>
 8001178:	2600      	movs	r6, #0
 800117a:	4d0a      	ldr	r5, [pc, #40]	@ (80011a4 <__libc_init_array+0x40>)
 800117c:	4c0a      	ldr	r4, [pc, #40]	@ (80011a8 <__libc_init_array+0x44>)
 800117e:	1b64      	subs	r4, r4, r5
 8001180:	10a4      	asrs	r4, r4, #2
 8001182:	42a6      	cmp	r6, r4
 8001184:	d105      	bne.n	8001192 <__libc_init_array+0x2e>
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	f855 3b04 	ldr.w	r3, [r5], #4
 800118c:	4798      	blx	r3
 800118e:	3601      	adds	r6, #1
 8001190:	e7ee      	b.n	8001170 <__libc_init_array+0xc>
 8001192:	f855 3b04 	ldr.w	r3, [r5], #4
 8001196:	4798      	blx	r3
 8001198:	3601      	adds	r6, #1
 800119a:	e7f2      	b.n	8001182 <__libc_init_array+0x1e>
 800119c:	08001208 	.word	0x08001208
 80011a0:	08001208 	.word	0x08001208
 80011a4:	08001208 	.word	0x08001208
 80011a8:	0800120c 	.word	0x0800120c

080011ac <_init>:
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	bf00      	nop
 80011b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b2:	bc08      	pop	{r3}
 80011b4:	469e      	mov	lr, r3
 80011b6:	4770      	bx	lr

080011b8 <_fini>:
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ba:	bf00      	nop
 80011bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011be:	bc08      	pop	{r3}
 80011c0:	469e      	mov	lr, r3
 80011c2:	4770      	bx	lr
