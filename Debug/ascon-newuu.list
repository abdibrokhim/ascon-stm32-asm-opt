
ascon-newuu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000234c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002458  08002458  00003458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800251c  0800251c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800251c  0800251c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800251c  0800251c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800251c  0800251c  0000351c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002520  08002520  00003520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002524  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08002530  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002530  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eed  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1d  00000000  00000000  00014f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0002652b  00000000  00000000  00016c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  0003d170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a3d  00000000  00000000  0003da40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ea6  00000000  00000000  0003f47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001524b  00000000  00000000  00055323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088137  00000000  00000000  0006a56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f26a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001970  00000000  00000000  000f26e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000f4058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002440 	.word	0x08002440

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002440 	.word	0x08002440

0800014c <GOST_Crypt_32_E_Cicle_Opt>:
@param *DATA - Указатель на данные для зашифрования в формате GOST_Data_Part
@param *subst_table - Указатель на оптимизированную таблицу подстановки
@param GOST_Key - 32хбитная часть ключа(СК).
*/
void GOST_Crypt_32_E_Cicle_Opt(uint32_t *n1, uint32_t *n2, GOST_Subst_Table Table, uint32_t *GOST_Key)
{
 800014c:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = (data + key) & 0xffffffff;
 800014e:	681d      	ldr	r5, [r3, #0]
    // Unroll the first 24 rounds for better performance
    uint32_t tmp;
    
    // Round 1-8 (K0-K7)
    tmp = *n1;
 8000150:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000152:	eb04 0c05 	add.w	ip, r4, r5
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000156:	eb02 651c 	add.w	r5, r2, ip, lsr #24
 800015a:	f895 6300 	ldrb.w	r6, [r5, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 800015e:	fa5f f58c 	uxtb.w	r5, ip
 8000162:	5d55      	ldrb	r5, [r2, r5]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000164:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000168:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800016c:	4416      	add	r6, r2
 800016e:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000172:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000176:	4494      	add	ip, r2
 8000178:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800017c:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000180:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8000184:	680e      	ldr	r6, [r1, #0]
 8000186:	ea86 5675 	eor.w	r6, r6, r5, ror #21
 800018a:	6006      	str	r6, [r0, #0]
    *n2 = tmp;
 800018c:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800018e:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8000190:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000192:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000196:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800019a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800019e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80001a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80001a6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80001aa:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80001ae:	4416      	add	r6, r2
 80001b0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80001b4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80001b8:	4494      	add	ip, r2
 80001ba:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80001be:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80001c2:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 80001c6:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80001ca:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80001cc:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80001ce:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 80001d0:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80001d2:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80001d6:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80001da:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80001de:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80001e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80001e6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80001ea:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80001ee:	4416      	add	r6, r2
 80001f0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80001f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80001f8:	4494      	add	ip, r2
 80001fa:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80001fe:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000202:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8000206:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800020a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800020c:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 800020e:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000210:	68de      	ldr	r6, [r3, #12]
 8000212:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000216:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800021a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800021e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000222:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000226:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800022a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800022e:	4416      	add	r6, r2
 8000230:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000234:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000238:	4494      	add	ip, r2
 800023a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800023e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000242:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000246:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 800024a:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800024c:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800024e:	691e      	ldr	r6, [r3, #16]

    tmp = *n1;
 8000250:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000252:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000256:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800025a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800025e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000262:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000266:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800026a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800026e:	4416      	add	r6, r2
 8000270:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000274:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000278:	4494      	add	ip, r2
 800027a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800027e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000282:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000286:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800028a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800028c:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800028e:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000290:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000292:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000296:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800029a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800029e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80002a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80002a6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80002aa:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80002ae:	4416      	add	r6, r2
 80002b0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80002b4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80002b8:	4494      	add	ip, r2
 80002ba:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80002be:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80002c2:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 80002c6:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80002ca:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80002cc:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80002ce:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 80002d0:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80002d2:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80002d6:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80002da:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80002de:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80002e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80002e6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80002ea:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80002ee:	4416      	add	r6, r2
 80002f0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80002f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80002f8:	4494      	add	ip, r2
 80002fa:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80002fe:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000302:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000306:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800030a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800030c:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 800030e:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000310:	69de      	ldr	r6, [r3, #28]
 8000312:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000316:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800031a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800031e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000322:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000326:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800032a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800032e:	4416      	add	r6, r2
 8000330:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000334:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000338:	4494      	add	ip, r2
 800033a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800033e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000342:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000346:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 800034a:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800034c:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800034e:	681e      	ldr	r6, [r3, #0]

    // Round 9-16 (K0-K7)
    tmp = *n1;
 8000350:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000352:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000356:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800035a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800035e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000362:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000366:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800036a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800036e:	4416      	add	r6, r2
 8000370:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000374:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000378:	4494      	add	ip, r2
 800037a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800037e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000382:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8000386:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800038a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800038c:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800038e:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8000390:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000392:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000396:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800039a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800039e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80003a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80003a6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80003aa:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80003ae:	4416      	add	r6, r2
 80003b0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80003b4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80003b8:	4494      	add	ip, r2
 80003ba:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80003be:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80003c2:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 80003c6:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80003ca:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80003cc:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80003ce:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 80003d0:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80003d2:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80003d6:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80003da:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80003de:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80003e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80003e6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80003ea:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80003ee:	4416      	add	r6, r2
 80003f0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80003f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80003f8:	4494      	add	ip, r2
 80003fa:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80003fe:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000402:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8000406:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800040a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800040c:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 800040e:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000410:	68de      	ldr	r6, [r3, #12]
 8000412:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000416:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800041a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800041e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000422:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000426:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800042a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800042e:	4416      	add	r6, r2
 8000430:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000434:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000438:	4494      	add	ip, r2
 800043a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800043e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000442:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000446:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 800044a:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800044c:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800044e:	691e      	ldr	r6, [r3, #16]

    tmp = *n1;
 8000450:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000452:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000456:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800045a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800045e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000462:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000466:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800046a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800046e:	4416      	add	r6, r2
 8000470:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000474:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000478:	4494      	add	ip, r2
 800047a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800047e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000482:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000486:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800048a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800048c:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800048e:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000490:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000492:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000496:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800049a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800049e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80004a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80004a6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80004aa:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80004ae:	4416      	add	r6, r2
 80004b0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80004b4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80004b8:	4494      	add	ip, r2
 80004ba:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80004be:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80004c2:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 80004c6:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80004ca:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80004cc:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80004ce:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 80004d0:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80004d2:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80004d6:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80004da:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80004de:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80004e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80004e6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80004ea:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80004ee:	4416      	add	r6, r2
 80004f0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80004f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80004f8:	4494      	add	ip, r2
 80004fa:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80004fe:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000502:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000506:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800050a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800050c:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 800050e:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000510:	69de      	ldr	r6, [r3, #28]
 8000512:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000516:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800051a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800051e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000522:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000526:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800052a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800052e:	4416      	add	r6, r2
 8000530:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000534:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000538:	4494      	add	ip, r2
 800053a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800053e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000542:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000546:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 800054a:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800054c:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800054e:	681e      	ldr	r6, [r3, #0]

    // Round 17-24 (K0-K7)
    tmp = *n1;
 8000550:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000552:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000556:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800055a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800055e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000562:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000566:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800056a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800056e:	4416      	add	r6, r2
 8000570:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000574:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000578:	4494      	add	ip, r2
 800057a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800057e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000582:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8000586:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800058a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800058c:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800058e:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8000590:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000592:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000596:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800059a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800059e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80005a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80005a6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80005aa:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80005ae:	4416      	add	r6, r2
 80005b0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80005b4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80005b8:	4494      	add	ip, r2
 80005ba:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80005be:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80005c2:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 80005c6:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80005ca:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80005cc:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80005ce:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 80005d0:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80005d2:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80005d6:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80005da:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80005de:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80005e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80005e6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80005ea:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80005ee:	4416      	add	r6, r2
 80005f0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80005f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80005f8:	4494      	add	ip, r2
 80005fa:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80005fe:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000602:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8000606:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800060a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800060c:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 800060e:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000610:	68de      	ldr	r6, [r3, #12]
 8000612:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000616:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800061a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800061e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000622:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000626:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800062a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800062e:	4416      	add	r6, r2
 8000630:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000634:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000638:	4494      	add	ip, r2
 800063a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800063e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000642:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000646:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 800064a:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800064c:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800064e:	691e      	ldr	r6, [r3, #16]

    tmp = *n1;
 8000650:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000652:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000656:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800065a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800065e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000662:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000666:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800066a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800066e:	4416      	add	r6, r2
 8000670:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000674:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000678:	4494      	add	ip, r2
 800067a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800067e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000682:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000686:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800068a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800068c:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800068e:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000690:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000692:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000696:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800069a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800069e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80006a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80006a6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80006aa:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80006ae:	4416      	add	r6, r2
 80006b0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80006b4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80006b8:	4494      	add	ip, r2
 80006ba:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80006be:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80006c2:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 80006c6:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80006ca:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80006cc:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80006ce:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 80006d0:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80006d2:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80006d6:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80006da:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80006de:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80006e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80006e6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80006ea:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80006ee:	4416      	add	r6, r2
 80006f0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80006f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80006f8:	4494      	add	ip, r2
 80006fa:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80006fe:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000702:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000706:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800070a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800070c:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 800070e:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000710:	69de      	ldr	r6, [r3, #28]
 8000712:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000716:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800071a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800071e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000722:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000726:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800072a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800072e:	4416      	add	r6, r2
 8000730:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000734:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000738:	4494      	add	ip, r2
 800073a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800073e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000742:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000746:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 800074a:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800074c:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800074e:	69de      	ldr	r6, [r3, #28]

    // Last 8 rounds (K7-K0)
    tmp = *n1;
 8000750:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000752:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000756:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800075a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800075e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000762:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000766:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800076a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800076e:	4416      	add	r6, r2
 8000770:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000774:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000778:	4494      	add	ip, r2
 800077a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800077e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000782:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000786:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800078a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800078c:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800078e:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8000790:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000792:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000796:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800079a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800079e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80007a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80007a6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80007aa:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80007ae:	4416      	add	r6, r2
 80007b0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80007b4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80007b8:	4494      	add	ip, r2
 80007ba:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80007be:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80007c2:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 80007c6:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80007ca:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80007cc:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80007ce:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 80007d0:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80007d2:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80007d6:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80007da:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80007de:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80007e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80007e6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80007ea:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80007ee:	4416      	add	r6, r2
 80007f0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80007f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80007f8:	4494      	add	ip, r2
 80007fa:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80007fe:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000802:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 8000806:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800080a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800080c:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 800080e:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000810:	691e      	ldr	r6, [r3, #16]
 8000812:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000816:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800081a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800081e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000822:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000826:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800082a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800082e:	4416      	add	r6, r2
 8000830:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000834:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000838:	4494      	add	ip, r2
 800083a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800083e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000842:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000846:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 800084a:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800084c:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800084e:	68de      	ldr	r6, [r3, #12]

    tmp = *n1;
 8000850:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000852:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000856:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800085a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800085e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000862:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000866:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800086a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 800086e:	4416      	add	r6, r2
 8000870:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000874:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000878:	4494      	add	ip, r2
 800087a:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800087e:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000882:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000886:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800088a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800088c:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 800088e:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8000890:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000892:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000896:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800089a:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800089e:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80008a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80008a6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80008aa:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80008ae:	4416      	add	r6, r2
 80008b0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80008b4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80008b8:	4494      	add	ip, r2
 80008ba:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80008be:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80008c2:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 80008c6:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80008ca:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80008cc:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80008ce:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 80008d0:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80008d2:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80008d6:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80008da:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80008de:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80008e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80008e6:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80008ea:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80008ee:	4416      	add	r6, r2
 80008f0:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80008f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80008f8:	4494      	add	ip, r2
 80008fa:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80008fe:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000902:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 8000906:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800090a:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 800090c:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 800090e:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	442b      	add	r3, r5
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000914:	eb02 6613 	add.w	r6, r2, r3, lsr #24
    result = Table[(result & 0xff)] | 
 8000918:	fa5f fc83 	uxtb.w	ip, r3
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800091c:	f3c3 2e07 	ubfx	lr, r3, #8, #8
    result = Table[(result & 0xff)] | 
 8000920:	f812 c00c 	ldrb.w	ip, [r2, ip]
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000924:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000928:	4496      	add	lr, r2
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800092a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800092e:	441a      	add	r2, r3
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000930:	f89e 3100 	ldrb.w	r3, [lr, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000934:	ea4c 6c06 	orr.w	ip, ip, r6, lsl #24
 8000938:	f892 2200 	ldrb.w	r2, [r2, #512]	@ 0x200
 800093c:	ea4c 2303 	orr.w	r3, ip, r3, lsl #8
 8000940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 1);
 8000944:	ea84 5473 	eor.w	r4, r4, r3, ror #21
 8000948:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800094a:	600d      	str	r5, [r1, #0]
}
 800094c:	bd70      	pop	{r4, r5, r6, pc}
 800094e:	bf00      	nop

08000950 <GOST_Crypt_32_D_Cicle_Opt>:
@param *DATA - Указатель на данные для зашифрования в формате GOST_Data_Part
@param *subst_table - Указатель на оптимизированную таблицу подстановки
@param GOST_Key - 32хбитная часть ключа(СК).
*/
void GOST_Crypt_32_D_Cicle_Opt(uint32_t *n1, uint32_t *n2, GOST_Subst_Table Table, uint32_t *GOST_Key)
{
 8000950:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = (data + key) & 0xffffffff;
 8000952:	681d      	ldr	r5, [r3, #0]
    // Unroll the 32 rounds for better performance
    uint32_t tmp;
    
    // First 8 rounds (K0-K7)
    tmp = *n1;
 8000954:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000956:	eb04 0c05 	add.w	ip, r4, r5
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800095a:	eb02 651c 	add.w	r5, r2, ip, lsr #24
 800095e:	f895 6300 	ldrb.w	r6, [r5, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000962:	fa5f f58c 	uxtb.w	r5, ip
 8000966:	5d55      	ldrb	r5, [r2, r5]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000968:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800096c:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000970:	4416      	add	r6, r2
 8000972:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000976:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800097a:	4494      	add	ip, r2
 800097c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8000980:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000984:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8000988:	680e      	ldr	r6, [r1, #0]
 800098a:	ea86 5675 	eor.w	r6, r6, r5, ror #21
 800098e:	6006      	str	r6, [r0, #0]
    *n2 = tmp;
 8000990:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000992:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8000994:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000996:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800099a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800099e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80009a2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80009a6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80009aa:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80009ae:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80009b2:	4416      	add	r6, r2
 80009b4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80009b8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80009bc:	4494      	add	ip, r2
 80009be:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80009c2:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80009c6:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 80009ca:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80009ce:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80009d0:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80009d2:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 80009d4:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80009d6:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80009da:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80009de:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80009e2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80009e6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80009ea:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80009ee:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80009f2:	4416      	add	r6, r2
 80009f4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80009f8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80009fc:	4494      	add	ip, r2
 80009fe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000a02:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000a06:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8000a0a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000a0e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000a10:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000a12:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000a14:	68de      	ldr	r6, [r3, #12]
 8000a16:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000a1a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000a1e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000a22:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000a26:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000a2a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000a2e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000a32:	4416      	add	r6, r2
 8000a34:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000a38:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000a3c:	4494      	add	ip, r2
 8000a3e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000a42:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000a46:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000a4a:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000a4e:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000a50:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000a52:	691e      	ldr	r6, [r3, #16]

    tmp = *n1;
 8000a54:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000a56:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000a5a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000a5e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000a62:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000a66:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000a6a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000a6e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000a72:	4416      	add	r6, r2
 8000a74:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000a78:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000a7c:	4494      	add	ip, r2
 8000a7e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000a82:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000a86:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000a8a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000a8e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000a90:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000a92:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000a94:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000a96:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000a9a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000a9e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000aa2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000aa6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000aaa:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000aae:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000ab2:	4416      	add	r6, r2
 8000ab4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000ab8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000abc:	4494      	add	ip, r2
 8000abe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000ac2:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000ac6:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 8000aca:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000ace:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000ad0:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000ad2:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8000ad4:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000ad6:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ada:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000ade:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ae2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000ae6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000aea:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000aee:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000af2:	4416      	add	r6, r2
 8000af4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000af8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000afc:	4494      	add	ip, r2
 8000afe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000b02:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000b06:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000b0a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000b0e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000b10:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000b12:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000b14:	69de      	ldr	r6, [r3, #28]
 8000b16:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000b1a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000b1e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000b22:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000b26:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000b2a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000b2e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000b32:	4416      	add	r6, r2
 8000b34:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000b38:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000b3c:	4494      	add	ip, r2
 8000b3e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000b42:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000b46:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000b4a:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000b4e:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000b50:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000b52:	69de      	ldr	r6, [r3, #28]

    // Remaining 24 rounds (K7-K0 repeated three times)
    // Round 9-16 (K7-K0)
    tmp = *n1;
 8000b54:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000b56:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000b5a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000b5e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000b62:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000b66:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000b6a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000b6e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000b72:	4416      	add	r6, r2
 8000b74:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000b78:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000b7c:	4494      	add	ip, r2
 8000b7e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000b82:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000b86:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000b8a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000b8e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000b90:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000b92:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8000b94:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000b96:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000b9a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000b9e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ba2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000ba6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000baa:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000bae:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000bb2:	4416      	add	r6, r2
 8000bb4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000bb8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000bbc:	4494      	add	ip, r2
 8000bbe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000bc2:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000bc6:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000bca:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000bce:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000bd0:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000bd2:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000bd4:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000bd6:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000bda:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000bde:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000be2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000be6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000bea:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000bee:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000bf2:	4416      	add	r6, r2
 8000bf4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000bf8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000bfc:	4494      	add	ip, r2
 8000bfe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000c02:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000c06:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 8000c0a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000c0e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000c10:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000c12:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c14:	691e      	ldr	r6, [r3, #16]
 8000c16:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c1a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000c1e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c22:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000c26:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c2a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000c2e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000c32:	4416      	add	r6, r2
 8000c34:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c38:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000c3c:	4494      	add	ip, r2
 8000c3e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000c42:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000c46:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000c4a:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000c4e:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000c50:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c52:	68de      	ldr	r6, [r3, #12]

    tmp = *n1;
 8000c54:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c56:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c5a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000c5e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c62:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000c66:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c6a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000c6e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000c72:	4416      	add	r6, r2
 8000c74:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000c78:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000c7c:	4494      	add	ip, r2
 8000c7e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000c82:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000c86:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000c8a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000c8e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000c90:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c92:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8000c94:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000c96:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000c9a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000c9e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ca2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000ca6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000caa:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000cae:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000cb2:	4416      	add	r6, r2
 8000cb4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000cb8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000cbc:	4494      	add	ip, r2
 8000cbe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000cc2:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000cc6:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8000cca:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000cce:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000cd0:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000cd2:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8000cd4:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000cd6:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000cda:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000cde:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ce2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000ce6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000cea:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000cee:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000cf2:	4416      	add	r6, r2
 8000cf4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000cf8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000cfc:	4494      	add	ip, r2
 8000cfe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000d02:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000d06:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 8000d0a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000d0e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000d10:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000d12:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d14:	681e      	ldr	r6, [r3, #0]
 8000d16:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d1a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000d1e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d22:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000d26:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d2a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000d2e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000d32:	4416      	add	r6, r2
 8000d34:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d38:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000d3c:	4494      	add	ip, r2
 8000d3e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000d42:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000d46:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8000d4a:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000d4e:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000d50:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d52:	69de      	ldr	r6, [r3, #28]

    // Round 17-24 (K7-K0)
    tmp = *n1;
 8000d54:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d56:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d5a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000d5e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d62:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000d66:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d6a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000d6e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000d72:	4416      	add	r6, r2
 8000d74:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000d78:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000d7c:	4494      	add	ip, r2
 8000d7e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000d82:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000d86:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000d8a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000d8e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000d90:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d92:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8000d94:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000d96:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000d9a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000d9e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000da2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000da6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000daa:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000dae:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000db2:	4416      	add	r6, r2
 8000db4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000db8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000dbc:	4494      	add	ip, r2
 8000dbe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000dc2:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000dc6:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000dca:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000dce:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000dd0:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000dd2:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000dd4:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000dd6:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000dda:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000dde:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000de2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000de6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000dea:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000dee:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000df2:	4416      	add	r6, r2
 8000df4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000df8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000dfc:	4494      	add	ip, r2
 8000dfe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000e02:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000e06:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 8000e0a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000e0e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000e10:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000e12:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e14:	691e      	ldr	r6, [r3, #16]
 8000e16:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e1a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000e1e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e22:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000e26:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e2a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000e2e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000e32:	4416      	add	r6, r2
 8000e34:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e38:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000e3c:	4494      	add	ip, r2
 8000e3e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000e42:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000e46:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 8000e4a:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000e4e:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000e50:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e52:	68de      	ldr	r6, [r3, #12]

    tmp = *n1;
 8000e54:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e56:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e5a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000e5e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e62:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000e66:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e6a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000e6e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000e72:	4416      	add	r6, r2
 8000e74:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000e78:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000e7c:	4494      	add	ip, r2
 8000e7e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000e82:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000e86:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 8000e8a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000e8e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000e90:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e92:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8000e94:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000e96:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000e9a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000e9e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ea2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000ea6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000eaa:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000eae:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000eb2:	4416      	add	r6, r2
 8000eb4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000eb8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000ebc:	4494      	add	ip, r2
 8000ebe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000ec2:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000ec6:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 8000eca:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000ece:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000ed0:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000ed2:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 8000ed4:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000ed6:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000eda:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000ede:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000ee2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000ee6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000eea:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000eee:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000ef2:	4416      	add	r6, r2
 8000ef4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000ef8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000efc:	4494      	add	ip, r2
 8000efe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000f02:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000f06:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 8000f0a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000f0e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000f10:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8000f12:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f14:	681e      	ldr	r6, [r3, #0]
 8000f16:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f1a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000f1e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f22:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000f26:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f2a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000f2e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000f32:	4416      	add	r6, r2
 8000f34:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f38:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000f3c:	4494      	add	ip, r2
 8000f3e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000f42:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000f46:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 0);
 8000f4a:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000f4e:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000f50:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f52:	69de      	ldr	r6, [r3, #28]

    // Round 25-32 (K7-K0)
    tmp = *n1;
 8000f54:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f56:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f5a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000f5e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f62:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000f66:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f6a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000f6e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000f72:	4416      	add	r6, r2
 8000f74:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000f78:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000f7c:	4494      	add	ip, r2
 8000f7e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000f82:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000f86:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[7], 0);
 8000f8a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 8000f8e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8000f90:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f92:	699e      	ldr	r6, [r3, #24]

    tmp = *n1;
 8000f94:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000f96:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000f9a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000f9e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000fa2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000fa6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000faa:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000fae:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000fb2:	4416      	add	r6, r2
 8000fb4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000fb8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000fbc:	4494      	add	ip, r2
 8000fbe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8000fc2:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8000fc6:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[6], 0);
 8000fca:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 8000fce:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8000fd0:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000fd2:	695e      	ldr	r6, [r3, #20]

    tmp = *n1;
 8000fd4:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8000fd6:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000fda:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 8000fde:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8000fe2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8000fe6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000fea:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8000fee:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8000ff2:	4416      	add	r6, r2
 8000ff4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8000ff8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8000ffc:	4494      	add	ip, r2
 8000ffe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001002:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001006:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[5], 0);
 800100a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800100e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001010:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8001012:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001014:	691e      	ldr	r6, [r3, #16]
 8001016:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800101a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800101e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001022:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001026:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800102a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800102e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001032:	4416      	add	r6, r2
 8001034:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001038:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800103c:	4494      	add	ip, r2
 800103e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001042:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001046:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[4], 0);
 800104a:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 800104e:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 8001050:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001052:	68de      	ldr	r6, [r3, #12]

    tmp = *n1;
 8001054:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001056:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800105a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800105e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001062:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 8001066:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800106a:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800106e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8001072:	4416      	add	r6, r2
 8001074:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001078:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800107c:	4494      	add	ip, r2
 800107e:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001082:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001086:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[3], 0);
 800108a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800108e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001090:	600c      	str	r4, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001092:	689e      	ldr	r6, [r3, #8]

    tmp = *n1;
 8001094:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001096:	eb05 0c06 	add.w	ip, r5, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 800109a:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 800109e:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80010a2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80010a6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80010aa:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80010ae:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80010b2:	4416      	add	r6, r2
 80010b4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80010b8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80010bc:	4494      	add	ip, r2
 80010be:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 80010c2:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 80010c6:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[2], 0);
 80010ca:	ea84 547c 	eor.w	r4, r4, ip, ror #21
 80010ce:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 80010d0:	600d      	str	r5, [r1, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80010d2:	685e      	ldr	r6, [r3, #4]

    tmp = *n1;
 80010d4:	6804      	ldr	r4, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 80010d6:	eb04 0c06 	add.w	ip, r4, r6
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80010da:	eb02 661c 	add.w	r6, r2, ip, lsr #24
    result = Table[(result & 0xff)] | 
 80010de:	fa5f fe8c 	uxtb.w	lr, ip
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 80010e2:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
    result = Table[(result & 0xff)] | 
 80010e6:	f812 e00e 	ldrb.w	lr, [r2, lr]
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80010ea:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 80010ee:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80010f2:	4416      	add	r6, r2
 80010f4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 80010f8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80010fc:	4494      	add	ip, r2
 80010fe:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 8001102:	f89c 6200 	ldrb.w	r6, [ip, #512]	@ 0x200
 8001106:	ea4e 4c06 	orr.w	ip, lr, r6, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[1], 0);
 800110a:	ea85 557c 	eor.w	r5, r5, ip, ror #21
 800110e:	6005      	str	r5, [r0, #0]
    *n2 = tmp;
 8001110:	600c      	str	r4, [r1, #0]

    tmp = *n1;
 8001112:	6805      	ldr	r5, [r0, #0]
    uint32_t result = (data + key) & 0xffffffff;
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	442b      	add	r3, r5
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001118:	eb02 6613 	add.w	r6, r2, r3, lsr #24
    result = Table[(result & 0xff)] | 
 800111c:	fa5f fc83 	uxtb.w	ip, r3
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001120:	f3c3 2e07 	ubfx	lr, r3, #8, #8
    result = Table[(result & 0xff)] | 
 8001124:	f812 c00c 	ldrb.w	ip, [r2, ip]
             (Table[768 + ((result >> 24) & 0xff)] << 24);
 8001128:	f896 6300 	ldrb.w	r6, [r6, #768]	@ 0x300
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 800112c:	4496      	add	lr, r2
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 800112e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001132:	441a      	add	r2, r3
             (Table[256 + ((result >> 8) & 0xff)] << 8) |
 8001134:	f89e 3100 	ldrb.w	r3, [lr, #256]	@ 0x100
             (Table[512 + ((result >> 16) & 0xff)] << 16) |
 8001138:	ea4c 6c06 	orr.w	ip, ip, r6, lsl #24
 800113c:	f892 2200 	ldrb.w	r2, [r2, #512]	@ 0x200
 8001140:	ea4c 2303 	orr.w	r3, ip, r3, lsl #8
 8001144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    *n1 = *n2 ^ GOST_Crypt_Step_Opt(*n1, Table, GOST_Key[0], 1);
 8001148:	ea84 5473 	eor.w	r4, r4, r3, ror #21
 800114c:	6004      	str	r4, [r0, #0]
    *n2 = tmp;
 800114e:	600d      	str	r5, [r1, #0]
}
 8001150:	bd70      	pop	{r4, r5, r6, pc}
 8001152:	bf00      	nop

08001154 <GOST_Encrypt_SR_Opt>:
@param Mode - Если _GOST_Mode_Encrypt шифрования, _GOST_Mode_Decrypt - расшифрование
@param *subst_table - Указатель на оптимизированную таблицу подстановки
@param *GOST_Key - Указатель на 256 битный массив ключа(СК).
*/
int GOST_Encrypt_SR_Opt(uint8_t *Data, uint32_t Size, uint8_t Mode, GOST_Subst_Table Table, uint8_t *GOST_Key_start)
{
 8001154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001158:	b08f      	sub	sp, #60	@ 0x3c
 800115a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800115c:	461e      	mov	r6, r3
 800115e:	68a3      	ldr	r3, [r4, #8]
 8001160:	6825      	ldr	r5, [r4, #0]
 8001162:	ba1b      	rev	r3, r3
    GOST_Data_Part Temp;
    uint32_t n;
    
    // Prepare the key in the correct byte order
    for (int i = 0; i < 8; i++) {
        GOST_Key[i] = _GOST_SWAP32(((uint32_t *)GOST_Key_start)[i]);
 8001164:	9308      	str	r3, [sp, #32]
 8001166:	68e3      	ldr	r3, [r4, #12]
 8001168:	ba2d      	rev	r5, r5
 800116a:	ba1b      	rev	r3, r3
 800116c:	9309      	str	r3, [sp, #36]	@ 0x24
 800116e:	6923      	ldr	r3, [r4, #16]
 8001170:	9506      	str	r5, [sp, #24]
 8001172:	ba1b      	rev	r3, r3
 8001174:	930a      	str	r3, [sp, #40]	@ 0x28
 8001176:	6963      	ldr	r3, [r4, #20]
 8001178:	6865      	ldr	r5, [r4, #4]
 800117a:	ba1b      	rev	r3, r3
{
 800117c:	4692      	mov	sl, r2
 800117e:	ba2d      	rev	r5, r5
        GOST_Key[i] = _GOST_SWAP32(((uint32_t *)GOST_Key_start)[i]);
 8001180:	930b      	str	r3, [sp, #44]	@ 0x2c
    }
    
    // Process full blocks
    for (n = 0; n < Size / 8; n++) {
 8001182:	ea5f 0cd1 	movs.w	ip, r1, lsr #3
 8001186:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800118a:	ba12      	rev	r2, r2
 800118c:	ba1b      	rev	r3, r3
{
 800118e:	468b      	mov	fp, r1
 8001190:	4681      	mov	r9, r0
        GOST_Key[i] = _GOST_SWAP32(((uint32_t *)GOST_Key_start)[i]);
 8001192:	9507      	str	r5, [sp, #28]
 8001194:	920c      	str	r2, [sp, #48]	@ 0x30
 8001196:	930d      	str	r3, [sp, #52]	@ 0x34
    for (n = 0; n < Size / 8; n++) {
 8001198:	d015      	beq.n	80011c6 <GOST_Encrypt_SR_Opt+0x72>
 800119a:	f1ba 0f01 	cmp.w	sl, #1
 800119e:	d065      	beq.n	800126c <GOST_Encrypt_SR_Opt+0x118>
 80011a0:	f1ba 0f00 	cmp.w	sl, #0
 80011a4:	d035      	beq.n	8001212 <GOST_Encrypt_SR_Opt+0xbe>
 80011a6:	4603      	mov	r3, r0
 80011a8:	1d02      	adds	r2, r0, #4
 80011aa:	eb00 07cc 	add.w	r7, r0, ip, lsl #3
        // Load data directly from the data pointer into GOST_Data_Part structure
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 80011ae:	6859      	ldr	r1, [r3, #4]
    for (n = 0; n < Size / 8; n++) {
 80011b0:	3308      	adds	r3, #8
 80011b2:	42bb      	cmp	r3, r7
 80011b4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80011b8:	f102 0208 	add.w	r2, r2, #8
 80011bc:	d1f7      	bne.n	80011ae <GOST_Encrypt_SR_Opt+0x5a>
 80011be:	ba00      	rev	r0, r0
 80011c0:	ba09      	rev	r1, r1
 80011c2:	9003      	str	r0, [sp, #12]
 80011c4:	9102      	str	r1, [sp, #8]
        ((uint32_t *)(Data + n * 8))[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
    }
    
    // Handle any remaining partial block (less than 8 bytes)
    uint32_t remain = Size % 8;
    if (remain > 0) {
 80011c6:	f01b 0b07 	ands.w	fp, fp, #7
 80011ca:	d01e      	beq.n	800120a <GOST_Encrypt_SR_Opt+0xb6>
        uint8_t block[8] = {0};
 80011cc:	2300      	movs	r3, #0
 80011ce:	eb09 09cc 	add.w	r9, r9, ip, lsl #3
        // Copy the remaining bytes to a temp buffer
        for (uint32_t i = 0; i < remain; i++) {
            block[i] = Data[n * 8 + i];
 80011d2:	465a      	mov	r2, fp
 80011d4:	4649      	mov	r1, r9
 80011d6:	a804      	add	r0, sp, #16
        uint8_t block[8] = {0};
 80011d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
            block[i] = Data[n * 8 + i];
 80011dc:	f001 f922 	bl	8002424 <memcpy>
        }
        
        // Process the final partial block
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)block)[0]);
 80011e0:	9a04      	ldr	r2, [sp, #16]
 80011e2:	9b05      	ldr	r3, [sp, #20]
 80011e4:	ba12      	rev	r2, r2
 80011e6:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)block)[1]);
        
        if (Mode == _GOST_Mode_Encrypt) {
 80011e8:	f1ba 0f01 	cmp.w	sl, #1
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)block)[0]);
 80011ec:	9203      	str	r2, [sp, #12]
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)block)[1]);
 80011ee:	9302      	str	r3, [sp, #8]
        if (Mode == _GOST_Mode_Encrypt) {
 80011f0:	d033      	beq.n	800125a <GOST_Encrypt_SR_Opt+0x106>
            GOST_Crypt_32_E_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
        } else if (Mode == _GOST_Mode_Decrypt) {
 80011f2:	f1ba 0f00 	cmp.w	sl, #0
 80011f6:	d05d      	beq.n	80012b4 <GOST_Encrypt_SR_Opt+0x160>
            GOST_Crypt_32_D_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
        }
        
        ((uint32_t *)block)[0] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N1_Half]);
 80011f8:	ba15      	rev	r5, r2
 80011fa:	ba1b      	rev	r3, r3
        ((uint32_t *)block)[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
        
        // Copy the encrypted/decrypted data back to the original buffer
        for (uint32_t i = 0; i < remain; i++) {
            Data[n * 8 + i] = block[i];
 80011fc:	465a      	mov	r2, fp
 80011fe:	4648      	mov	r0, r9
 8001200:	a904      	add	r1, sp, #16
        ((uint32_t *)block)[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
 8001202:	e9cd 5304 	strd	r5, r3, [sp, #16]
            Data[n * 8 + i] = block[i];
 8001206:	f001 f90d 	bl	8002424 <memcpy>
        }
    }
    
    return 0;
}
 800120a:	2000      	movs	r0, #0
 800120c:	b00f      	add	sp, #60	@ 0x3c
 800120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001212:	4604      	mov	r4, r0
 8001214:	1d05      	adds	r5, r0, #4
 8001216:	eb00 08cc 	add.w	r8, r0, ip, lsl #3
 800121a:	af06      	add	r7, sp, #24
 800121c:	a902      	add	r1, sp, #8
 800121e:	a803      	add	r0, sp, #12
 8001220:	f8cd c004 	str.w	ip, [sp, #4]
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 8001224:	f855 3c04 	ldr.w	r3, [r5, #-4]
            GOST_Crypt_32_D_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001228:	4632      	mov	r2, r6
 800122a:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 800122c:	9303      	str	r3, [sp, #12]
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[1]);
 800122e:	6863      	ldr	r3, [r4, #4]
    for (n = 0; n < Size / 8; n++) {
 8001230:	3408      	adds	r4, #8
 8001232:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[1]);
 8001234:	9302      	str	r3, [sp, #8]
            GOST_Crypt_32_D_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001236:	463b      	mov	r3, r7
 8001238:	f7ff fb8a 	bl	8000950 <GOST_Crypt_32_D_Cicle_Opt>
 800123c:	9b02      	ldr	r3, [sp, #8]
        ((uint32_t *)(Data + n * 8))[0] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N1_Half]);
 800123e:	9a03      	ldr	r2, [sp, #12]
 8001240:	ba1b      	rev	r3, r3
 8001242:	ba12      	rev	r2, r2
 8001244:	f845 2c04 	str.w	r2, [r5, #-4]
        ((uint32_t *)(Data + n * 8))[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
 8001248:	f844 3c04 	str.w	r3, [r4, #-4]
    for (n = 0; n < Size / 8; n++) {
 800124c:	4544      	cmp	r4, r8
 800124e:	f105 0508 	add.w	r5, r5, #8
 8001252:	d1e7      	bne.n	8001224 <GOST_Encrypt_SR_Opt+0xd0>
 8001254:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001258:	e7b5      	b.n	80011c6 <GOST_Encrypt_SR_Opt+0x72>
            GOST_Crypt_32_E_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 800125a:	4632      	mov	r2, r6
 800125c:	ab06      	add	r3, sp, #24
 800125e:	a902      	add	r1, sp, #8
 8001260:	a803      	add	r0, sp, #12
 8001262:	f7fe ff73 	bl	800014c <GOST_Crypt_32_E_Cicle_Opt>
 8001266:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800126a:	e7c5      	b.n	80011f8 <GOST_Encrypt_SR_Opt+0xa4>
 800126c:	4604      	mov	r4, r0
 800126e:	1d05      	adds	r5, r0, #4
 8001270:	eb00 08cc 	add.w	r8, r0, ip, lsl #3
 8001274:	af06      	add	r7, sp, #24
 8001276:	a902      	add	r1, sp, #8
 8001278:	a803      	add	r0, sp, #12
 800127a:	f8cd c004 	str.w	ip, [sp, #4]
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 800127e:	f855 3c04 	ldr.w	r3, [r5, #-4]
            GOST_Crypt_32_E_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001282:	4632      	mov	r2, r6
 8001284:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N1_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[0]);
 8001286:	9303      	str	r3, [sp, #12]
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[1]);
 8001288:	6863      	ldr	r3, [r4, #4]
    for (n = 0; n < Size / 8; n++) {
 800128a:	3408      	adds	r4, #8
 800128c:	ba1b      	rev	r3, r3
        Temp.half[_GOST_Data_Part_N2_Half] = _GOST_SWAP32(((uint32_t *)(Data + n * 8))[1]);
 800128e:	9302      	str	r3, [sp, #8]
            GOST_Crypt_32_E_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 8001290:	463b      	mov	r3, r7
 8001292:	f7fe ff5b 	bl	800014c <GOST_Crypt_32_E_Cicle_Opt>
 8001296:	9b02      	ldr	r3, [sp, #8]
        ((uint32_t *)(Data + n * 8))[0] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N1_Half]);
 8001298:	9a03      	ldr	r2, [sp, #12]
 800129a:	ba1b      	rev	r3, r3
 800129c:	ba12      	rev	r2, r2
 800129e:	f845 2c04 	str.w	r2, [r5, #-4]
        ((uint32_t *)(Data + n * 8))[1] = _GOST_SWAP32(Temp.half[_GOST_Data_Part_N2_Half]);
 80012a2:	f844 3c04 	str.w	r3, [r4, #-4]
    for (n = 0; n < Size / 8; n++) {
 80012a6:	4544      	cmp	r4, r8
 80012a8:	f105 0508 	add.w	r5, r5, #8
 80012ac:	d1e7      	bne.n	800127e <GOST_Encrypt_SR_Opt+0x12a>
 80012ae:	f8dd c004 	ldr.w	ip, [sp, #4]
 80012b2:	e788      	b.n	80011c6 <GOST_Encrypt_SR_Opt+0x72>
            GOST_Crypt_32_D_Cicle_Opt(&Temp.half[_GOST_Data_Part_N1_Half], &Temp.half[_GOST_Data_Part_N2_Half], Table, GOST_Key);
 80012b4:	4632      	mov	r2, r6
 80012b6:	ab06      	add	r3, sp, #24
 80012b8:	a902      	add	r1, sp, #8
 80012ba:	a803      	add	r0, sp, #12
 80012bc:	f7ff fb48 	bl	8000950 <GOST_Crypt_32_D_Cicle_Opt>
 80012c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80012c4:	e798      	b.n	80011f8 <GOST_Encrypt_SR_Opt+0xa4>
 80012c6:	bf00      	nop

080012c8 <gost_main>:
// }



/* GOST test function */
int gost_main() {
 80012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012cc:	f2ad 4dcc 	subw	sp, sp, #1228	@ 0x4cc
    // Define the 256-bit key (32 bytes)
    uint8_t key[32] = {
 80012d0:	ae0a      	add	r6, sp, #40	@ 0x28
 80012d2:	4635      	mov	r5, r6
 80012d4:	4c4e      	ldr	r4, [pc, #312]	@ (8001410 <gost_main+0x148>)
 80012d6:	f10d 0a67 	add.w	sl, sp, #103	@ 0x67
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    };

    // Define a sample S-box (128 bytes, 8 rows of 16 nibbles)
    // Note: Replace with the actual GOST S-box for correct operation
    uint8_t sbox[128] = {
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	f104 0110 	add.w	r1, r4, #16
 80012ec:	a812      	add	r0, sp, #72	@ 0x48
 80012ee:	f001 f899 	bl	8002424 <memcpy>
    0x0C, 0x06, 0x05, 0x02, 0x0B, 0x00, 0x09, 0x0D, 0x03, 0x0E, 0x07, 0x0A, 0x0F, 0x04, 0x01, 0x08
    };

    // Create optimized substitution table
    GOST_Subst_Table subst_table;
    for(int i = 0; i < 4; i++){
 80012f2:	aa32      	add	r2, sp, #200	@ 0xc8
    uint8_t sbox[128] = {
 80012f4:	2000      	movs	r0, #0
 80012f6:	4613      	mov	r3, r2
 80012f8:	4602      	mov	r2, r0
 80012fa:	4618      	mov	r0, r3
        for(int j = 0; j < 16; j++)
        for(int k = 0; k < 16; k++){
            // Calculate linear index into the table
            int idx = i * 256 + j * 16 + k;
            // Calculate substitution value from original S-box
            subst_table[idx] = sbox[i*32 + j + 16]*16 + sbox[i*32 + k];
 80012fc:	4601      	mov	r1, r0
 80012fe:	f85a bc1f 	ldr.w	fp, [sl, #-31]
 8001302:	f85a 9c1b 	ldr.w	r9, [sl, #-27]
 8001306:	f00b 337f 	and.w	r3, fp, #2139062143	@ 0x7f7f7f7f
 800130a:	f85a 8c17 	ldr.w	r8, [sl, #-23]
 800130e:	f85a ec13 	ldr.w	lr, [sl, #-19]
 8001312:	9305      	str	r3, [sp, #20]
 8001314:	f009 337f 	and.w	r3, r9, #2139062143	@ 0x7f7f7f7f
 8001318:	9304      	str	r3, [sp, #16]
 800131a:	e9cd 2006 	strd	r2, r0, [sp, #24]
 800131e:	f008 337f 	and.w	r3, r8, #2139062143	@ 0x7f7f7f7f
 8001322:	9303      	str	r3, [sp, #12]
 8001324:	f00e 337f 	and.w	r3, lr, #2139062143	@ 0x7f7f7f7f
 8001328:	f1aa 0c10 	sub.w	ip, sl, #16
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2300      	movs	r3, #0
 8001330:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8001334:	9d05      	ldr	r5, [sp, #20]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f362 0307 	bfi	r3, r2, #0, #8
 800133e:	f362 230f 	bfi	r3, r2, #8, #8
 8001342:	f362 4317 	bfi	r3, r2, #16, #8
 8001346:	f362 631f 	bfi	r3, r2, #24, #8
 800134a:	f003 327f 	and.w	r2, r3, #2139062143	@ 0x7f7f7f7f
 800134e:	ea8b 0703 	eor.w	r7, fp, r3
 8001352:	4415      	add	r5, r2
 8001354:	f007 3780 	and.w	r7, r7, #2155905152	@ 0x80808080
        for(int j = 0; j < 16; j++)
 8001358:	3110      	adds	r1, #16
            subst_table[idx] = sbox[i*32 + j + 16]*16 + sbox[i*32 + k];
 800135a:	407d      	eors	r5, r7
 800135c:	f841 5c10 	str.w	r5, [r1, #-16]
 8001360:	9d04      	ldr	r5, [sp, #16]
 8001362:	ea89 0403 	eor.w	r4, r9, r3
 8001366:	4415      	add	r5, r2
 8001368:	f004 3480 	and.w	r4, r4, #2155905152	@ 0x80808080
 800136c:	406c      	eors	r4, r5
 800136e:	f841 4c0c 	str.w	r4, [r1, #-12]
 8001372:	9c03      	ldr	r4, [sp, #12]
 8001374:	ea88 0003 	eor.w	r0, r8, r3
 8001378:	4414      	add	r4, r2
 800137a:	f000 3080 	and.w	r0, r0, #2155905152	@ 0x80808080
 800137e:	4060      	eors	r0, r4
 8001380:	f841 0c08 	str.w	r0, [r1, #-8]
 8001384:	9802      	ldr	r0, [sp, #8]
 8001386:	ea8e 0303 	eor.w	r3, lr, r3
 800138a:	f003 3380 	and.w	r3, r3, #2155905152	@ 0x80808080
 800138e:	4402      	add	r2, r0
 8001390:	4053      	eors	r3, r2
        for(int j = 0; j < 16; j++)
 8001392:	45e2      	cmp	sl, ip
            subst_table[idx] = sbox[i*32 + j + 16]*16 + sbox[i*32 + k];
 8001394:	f841 3c04 	str.w	r3, [r1, #-4]
        for(int j = 0; j < 16; j++)
 8001398:	d1c9      	bne.n	800132e <gost_main+0x66>
    for(int i = 0; i < 4; i++){
 800139a:	e9dd 2006 	ldrd	r2, r0, [sp, #24]
 800139e:	3210      	adds	r2, #16
 80013a0:	2a40      	cmp	r2, #64	@ 0x40
 80013a2:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 80013a6:	f10a 0a20 	add.w	sl, sl, #32
 80013aa:	d1a7      	bne.n	80012fc <gost_main+0x34>
        }
    }

    // Define plaintext (64-bit block, 8 bytes)
    uint8_t plaintext[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80013ac:	2200      	movs	r2, #0
    int result = 0;

    // Measure performance: Encrypt multiple times
    uint32_t iterations = 20000;
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 80013ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b2:	4818      	ldr	r0, [pc, #96]	@ (8001414 <gost_main+0x14c>)
    uint8_t plaintext[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80013b4:	e9cd 2208 	strd	r2, r2, [sp, #32]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 80013b8:	f000 fc0a 	bl	8001bd0 <HAL_GPIO_WritePin>
    HAL_Delay(5000);                          // Wait 5 seconds
 80013bc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80013c0:	f000 f988 	bl	80016d4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ca:	4812      	ldr	r0, [pc, #72]	@ (8001414 <gost_main+0x14c>)
 80013cc:	f000 fc00 	bl	8001bd0 <HAL_GPIO_WritePin>
 80013d0:	f644 6420 	movw	r4, #20000	@ 0x4e20

    // uint32_t start_time = HAL_GetTick();
    for (uint32_t i = 0; i < iterations; i++) {
        // Use the optimized encryption function with precomputed tables
        GOST_Encrypt_SR_Opt(plaintext, 8, _GOST_Mode_Encrypt, subst_table, key);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2108      	movs	r1, #8
 80013d8:	ab32      	add	r3, sp, #200	@ 0xc8
 80013da:	a808      	add	r0, sp, #32
 80013dc:	9600      	str	r6, [sp, #0]
 80013de:	f7ff feb9 	bl	8001154 <GOST_Encrypt_SR_Opt>
    for (uint32_t i = 0; i < iterations; i++) {
 80013e2:	3c01      	subs	r4, #1
 80013e4:	d1f6      	bne.n	80013d4 <gost_main+0x10c>
    }
    // uint32_t end_time = HAL_GetTick();
    // uint32_t elapsed = end_time - start_time;
    
    // Indicate test result via LED
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 80013e6:	4622      	mov	r2, r4
 80013e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ec:	4809      	ldr	r0, [pc, #36]	@ (8001414 <gost_main+0x14c>)
 80013ee:	f000 fbef 	bl	8001bd0 <HAL_GPIO_WritePin>
    HAL_Delay(5000); // Wait 5 seconds
 80013f2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80013f6:	f000 f96d 	bl	80016d4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // LED OFF
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <gost_main+0x14c>)
 8001402:	f000 fbe5 	bl	8001bd0 <HAL_GPIO_WritePin>

    return result;
}
 8001406:	4620      	mov	r0, r4
 8001408:	f20d 4dcc 	addw	sp, sp, #1228	@ 0x4cc
 800140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001410:	08002458 	.word	0x08002458
 8001414:	40011000 	.word	0x40011000

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b530      	push	{r4, r5, lr}
 800141a:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141c:	2224      	movs	r2, #36	@ 0x24
 800141e:	2100      	movs	r1, #0
 8001420:	a807      	add	r0, sp, #28
 8001422:	f000 ffd3 	bl	80023cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001426:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800142a:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001430:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001438:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f000 fbca 	bl	8001bd8 <HAL_RCC_OscConfig>
 8001444:	b108      	cbz	r0, 800144a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001446:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144a:	4601      	mov	r1, r0
 800144c:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800144e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001454:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001458:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800145a:	f000 fdab 	bl	8001fb4 <HAL_RCC_ClockConfig>
 800145e:	b108      	cbz	r0, 8001464 <SystemClock_Config+0x4c>
 8001460:	b672      	cpsid	i
  while (1)
 8001462:	e7fe      	b.n	8001462 <SystemClock_Config+0x4a>
}
 8001464:	b011      	add	sp, #68	@ 0x44
 8001466:	bd30      	pop	{r4, r5, pc}

08001468 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	2400      	movs	r4, #0
{
 800146a:	b500      	push	{lr}
 800146c:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 800146e:	f000 f90d 	bl	800168c <HAL_Init>
  SystemClock_Config();
 8001472:	f7ff ffd1 	bl	8001418 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800147a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <main+0xe8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001480:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001486:	4833      	ldr	r0, [pc, #204]	@ (8001554 <main+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	f042 0210 	orr.w	r2, r2, #16
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8001490:	4d31      	ldr	r5, [pc, #196]	@ (8001558 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	f002 0210 	and.w	r2, r2, #16
 8001496:	9200      	str	r2, [sp, #0]
 8001498:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	699a      	ldr	r2, [r3, #24]
 800149c:	f042 0204 	orr.w	r2, r2, #4
 80014a0:	619a      	str	r2, [r3, #24]
 80014a2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014a4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014ae:	f000 fb8f 	bl	8001bd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	e9cd 1204 	strd	r1, r2, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	4825      	ldr	r0, [pc, #148]	@ (8001554 <main+0xec>)
 80014c0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f000 f97d 	bl	80017c4 <HAL_GPIO_Init>
  htim1.Init.Period = 65535;
 80014ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim1.Instance = TIM1;
 80014ce:	4a23      	ldr	r2, [pc, #140]	@ (800155c <main+0xf4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d0:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014d6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 80014de:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Instance = TIM1;
 80014e2:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = 65535;
 80014e4:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e6:	9402      	str	r4, [sp, #8]
  htim1.Init.RepetitionCounter = 0;
 80014e8:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	9403      	str	r4, [sp, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ec:	f000 fe24 	bl	8002138 <HAL_TIM_Base_Init>
 80014f0:	b108      	cbz	r0, 80014f6 <main+0x8e>
 80014f2:	b672      	cpsid	i
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <main+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014fa:	4628      	mov	r0, r5
 80014fc:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001500:	f000 fe88 	bl	8002214 <HAL_TIM_ConfigClockSource>
 8001504:	b108      	cbz	r0, 800150a <main+0xa2>
 8001506:	b672      	cpsid	i
  while (1)
 8001508:	e7fe      	b.n	8001508 <main+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2200      	movs	r2, #0
 800150c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800150e:	4628      	mov	r0, r5
 8001510:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001516:	f000 ff27 	bl	8002368 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	b108      	cbz	r0, 8001520 <main+0xb8>
 800151c:	b672      	cpsid	i
  while (1)
 800151e:	e7fe      	b.n	800151e <main+0xb6>
  gost_main();
 8001520:	f7ff fed2 	bl	80012c8 <gost_main>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001524:	4c0b      	ldr	r4, [pc, #44]	@ (8001554 <main+0xec>)
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152c:	4620      	mov	r0, r4
 800152e:	f000 fb4f 	bl	8001bd0 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 8001532:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001536:	f000 f8cd 	bl	80016d4 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800153a:	4620      	mov	r0, r4
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001542:	f000 fb45 	bl	8001bd0 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 8001546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154a:	f000 f8c3 	bl	80016d4 <HAL_Delay>
  while (1)
 800154e:	e7ea      	b.n	8001526 <main+0xbe>
 8001550:	40021000 	.word	0x40021000
 8001554:	40011000 	.word	0x40011000
 8001558:	20000030 	.word	0x20000030
 800155c:	40012c00 	.word	0x40012c00

08001560 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001560:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_MspInit+0x3c>)
{
 8001562:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001564:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001566:	490e      	ldr	r1, [pc, #56]	@ (80015a0 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001568:	f042 0201 	orr.w	r2, r2, #1
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	f002 0201 	and.w	r2, r2, #1
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	69da      	ldr	r2, [r3, #28]
 800157a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800157e:	61da      	str	r2, [r3, #28]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800158a:	684b      	ldr	r3, [r1, #4]
 800158c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001590:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001594:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	b002      	add	sp, #8
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000

080015a4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_TIM_Base_MspInit+0x28>)
 80015a6:	6802      	ldr	r2, [r0, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d000      	beq.n	80015ae <HAL_TIM_Base_MspInit+0xa>
 80015ac:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ae:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80015b2:	699a      	ldr	r2, [r3, #24]
{
 80015b4:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80015c6:	b002      	add	sp, #8
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40012c00 	.word	0x40012c00

080015d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler>
 80015d2:	bf00      	nop

080015d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <HardFault_Handler>
 80015d6:	bf00      	nop

080015d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler>
 80015da:	bf00      	nop

080015dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <BusFault_Handler>
 80015de:	bf00      	nop

080015e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler>
 80015e2:	bf00      	nop

080015e4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop

080015f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f0:	f000 b85e 	b.w	80016b0 <HAL_IncTick>

080015f4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f8:	f7ff fffc 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480b      	ldr	r0, [pc, #44]	@ (800162c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015fe:	490c      	ldr	r1, [pc, #48]	@ (8001630 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001600:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001614:	4c09      	ldr	r4, [pc, #36]	@ (800163c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f000 fedb 	bl	80023dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7ff ff1f 	bl	8001468 <main>
  bx lr
 800162a:	4770      	bx	lr
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001634:	08002524 	.word	0x08002524
  ldr r2, =_sbss
 8001638:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800163c:	2000007c 	.word	0x2000007c

08001640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>
	...

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164a:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <HAL_InitTick+0x3c>)
{
 800164c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164e:	7811      	ldrb	r1, [r2, #0]
 8001650:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <HAL_InitTick+0x40>)
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	fbb2 f0f3 	udiv	r0, r2, r3
 800165c:	f000 f89a 	bl	8001794 <HAL_SYSTICK_Config>
 8001660:	b908      	cbnz	r0, 8001666 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	2d0f      	cmp	r5, #15
 8001664:	d901      	bls.n	800166a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001668:	bd38      	pop	{r3, r4, r5, pc}
 800166a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	4602      	mov	r2, r0
 800166e:	4629      	mov	r1, r5
 8001670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001674:	f000 f852 	bl	800171c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <HAL_InitTick+0x44>)
 800167a:	4620      	mov	r0, r4
 800167c:	601d      	str	r5, [r3, #0]
}
 800167e:	bd38      	pop	{r3, r4, r5, pc}
 8001680:	20000004 	.word	0x20000004
 8001684:	20000000 	.word	0x20000000
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4a07      	ldr	r2, [pc, #28]	@ (80016ac <HAL_Init+0x20>)
{
 800168e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001692:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	f000 f82d 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff ffd0 	bl	8001644 <HAL_InitTick>
  HAL_MspInit();
 80016a4:	f7ff ff5c 	bl	8001560 <HAL_MspInit>
}
 80016a8:	2000      	movs	r0, #0
 80016aa:	bd08      	pop	{r3, pc}
 80016ac:	40022000 	.word	0x40022000

080016b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016b0:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <HAL_IncTick+0x10>)
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <HAL_IncTick+0x14>)
 80016b4:	6811      	ldr	r1, [r2, #0]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	440b      	add	r3, r1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000078 	.word	0x20000078
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016c8:	4b01      	ldr	r3, [pc, #4]	@ (80016d0 <HAL_GetTick+0x8>)
 80016ca:	6818      	ldr	r0, [r3, #0]
}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000078 	.word	0x20000078

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b538      	push	{r3, r4, r5, lr}
 80016d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff fff6 	bl	80016c8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016dc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80016de:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80016e0:	d002      	beq.n	80016e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <HAL_Delay+0x20>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	1b40      	subs	r0, r0, r5
 80016ee:	42a0      	cmp	r0, r4
 80016f0:	d3fa      	bcc.n	80016e8 <HAL_Delay+0x14>
  {
  }
}
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f8:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4906      	ldr	r1, [pc, #24]	@ (8001718 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016fe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001702:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001714:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171e:	b500      	push	{lr}
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001726:	f1c3 0e07 	rsb	lr, r3, #7
 800172a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001732:	bf28      	it	cs
 8001734:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001738:	f1bc 0f06 	cmp.w	ip, #6
 800173c:	d91c      	bls.n	8001778 <HAL_NVIC_SetPriority+0x5c>
 800173e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001746:	fa03 f30c 	lsl.w	r3, r3, ip
 800174a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001752:	fa03 f30e 	lsl.w	r3, r3, lr
 8001756:	ea21 0303 	bic.w	r3, r1, r3
 800175a:	fa03 f30c 	lsl.w	r3, r3, ip
 800175e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001762:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001766:	db0a      	blt.n	800177e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800176c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001770:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001774:	f85d fb04 	ldr.w	pc, [sp], #4
 8001778:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	4694      	mov	ip, r2
 800177c:	e7e7      	b.n	800174e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <HAL_NVIC_SetPriority+0x74>)
 8001780:	f000 000f 	and.w	r0, r0, #15
 8001784:	4402      	add	r2, r0
 8001786:	7613      	strb	r3, [r2, #24]
 8001788:	f85d fb04 	ldr.w	pc, [sp], #4
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	e000ecfc 	.word	0xe000ecfc

08001794 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	3801      	subs	r0, #1
 8001796:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800179a:	d301      	bcc.n	80017a0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800179e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	2107      	movs	r1, #7
{
 80017ac:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	4c04      	ldr	r4, [pc, #16]	@ (80017c0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017bc:	6119      	str	r1, [r3, #16]
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	680c      	ldr	r4, [r1, #0]
{
 80017ca:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017cc:	2c00      	cmp	r4, #0
 80017ce:	f000 80ad 	beq.w	800192c <HAL_GPIO_Init+0x168>
 80017d2:	4bb3      	ldr	r3, [pc, #716]	@ (8001aa0 <HAL_GPIO_Init+0x2dc>)
 80017d4:	4298      	cmp	r0, r3
 80017d6:	f000 80d7 	beq.w	8001988 <HAL_GPIO_Init+0x1c4>
 80017da:	2200      	movs	r2, #0
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017dc:	1d03      	adds	r3, r0, #4
 80017de:	9301      	str	r3, [sp, #4]
    ioposition = (0x01uL << position);
 80017e0:	2501      	movs	r5, #1
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e2:	270f      	movs	r7, #15
  uint32_t config = 0x00u;
 80017e4:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80017e6:	4613      	mov	r3, r2
 80017e8:	4683      	mov	fp, r0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ea:	f8df 82b8 	ldr.w	r8, [pc, #696]	@ 8001aa4 <HAL_GPIO_Init+0x2e0>
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x3a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80017f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	fa34 f003 	lsrs.w	r0, r4, r3
 80017f6:	f102 0204 	add.w	r2, r2, #4
 80017fa:	f000 8097 	beq.w	800192c <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 80017fe:	fa05 f003 	lsl.w	r0, r5, r3
    if (iocurrent == ioposition)
 8001802:	ea30 0c04 	bics.w	ip, r0, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	ea00 0604 	and.w	r6, r0, r4
    if (iocurrent == ioposition)
 800180a:	d1f1      	bne.n	80017f0 <HAL_GPIO_Init+0x2c>
      switch (GPIO_Init->Mode)
 800180c:	684c      	ldr	r4, [r1, #4]
 800180e:	2c12      	cmp	r4, #18
 8001810:	f200 80a0 	bhi.w	8001954 <HAL_GPIO_Init+0x190>
 8001814:	2c12      	cmp	r4, #18
 8001816:	d816      	bhi.n	8001846 <HAL_GPIO_Init+0x82>
 8001818:	e8df f014 	tbh	[pc, r4, lsl #1]
 800181c:	001300af 	.word	0x001300af
 8001820:	01950098 	.word	0x01950098
 8001824:	00150015 	.word	0x00150015
 8001828:	00150015 	.word	0x00150015
 800182c:	00150015 	.word	0x00150015
 8001830:	00150015 	.word	0x00150015
 8001834:	00150015 	.word	0x00150015
 8001838:	00150015 	.word	0x00150015
 800183c:	00940015 	.word	0x00940015
 8001840:	0090      	.short	0x0090
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001842:	f8d1 a00c 	ldr.w	sl, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001846:	2eff      	cmp	r6, #255	@ 0xff
 8001848:	bf99      	ittee	ls
 800184a:	465c      	movls	r4, fp
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800184c:	4694      	movls	ip, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800184e:	9c01      	ldrhi	r4, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001850:	f1a2 0c20 	subhi.w	ip, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001854:	6820      	ldr	r0, [r4, #0]
 8001856:	fa07 fe0c 	lsl.w	lr, r7, ip
 800185a:	ea20 000e 	bic.w	r0, r0, lr
 800185e:	fa0a fc0c 	lsl.w	ip, sl, ip
 8001862:	ea40 000c 	orr.w	r0, r0, ip
 8001866:	6020      	str	r0, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001868:	684c      	ldr	r4, [r1, #4]
 800186a:	00e0      	lsls	r0, r4, #3
 800186c:	d564      	bpl.n	8001938 <HAL_GPIO_Init+0x174>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800186e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8001872:	f023 0c03 	bic.w	ip, r3, #3
 8001876:	f040 0001 	orr.w	r0, r0, #1
 800187a:	f8c8 0018 	str.w	r0, [r8, #24]
 800187e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8001882:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8001886:	f000 0001 	and.w	r0, r0, #1
 800188a:	9003      	str	r0, [sp, #12]
 800188c:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001890:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001894:	9803      	ldr	r0, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001896:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800189a:	f8dc 0008 	ldr.w	r0, [ip, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189e:	fa07 fe09 	lsl.w	lr, r7, r9
 80018a2:	ea20 0e0e 	bic.w	lr, r0, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a6:	4880      	ldr	r0, [pc, #512]	@ (8001aa8 <HAL_GPIO_Init+0x2e4>)
 80018a8:	4583      	cmp	fp, r0
 80018aa:	f000 812c 	beq.w	8001b06 <HAL_GPIO_Init+0x342>
 80018ae:	487f      	ldr	r0, [pc, #508]	@ (8001aac <HAL_GPIO_Init+0x2e8>)
 80018b0:	4583      	cmp	fp, r0
 80018b2:	f000 8139 	beq.w	8001b28 <HAL_GPIO_Init+0x364>
 80018b6:	487e      	ldr	r0, [pc, #504]	@ (8001ab0 <HAL_GPIO_Init+0x2ec>)
 80018b8:	4583      	cmp	fp, r0
 80018ba:	bf0c      	ite	eq
 80018bc:	2003      	moveq	r0, #3
 80018be:	2004      	movne	r0, #4
 80018c0:	fa00 f009 	lsl.w	r0, r0, r9
 80018c4:	ea40 000e 	orr.w	r0, r0, lr
        AFIO->EXTICR[position >> 2u] = temp;
 80018c8:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80018cc:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8001ab4 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d0:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d4:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80018d8:	bf14      	ite	ne
 80018da:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018dc:	43b0      	biceq	r0, r6
 80018de:	f8cc 0008 	str.w	r0, [ip, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e2:	f8df c1d0 	ldr.w	ip, [pc, #464]	@ 8001ab4 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e6:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ea:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80018ee:	bf14      	ite	ne
 80018f0:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f2:	43b0      	biceq	r0, r6
 80018f4:	f8cc 000c 	str.w	r0, [ip, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80018f8:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8001ab4 <HAL_GPIO_Init+0x2f0>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fc:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001900:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8001904:	bf14      	ite	ne
 8001906:	4330      	orrne	r0, r6
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001908:	43b0      	biceq	r0, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190a:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800190e:	4c69      	ldr	r4, [pc, #420]	@ (8001ab4 <HAL_GPIO_Init+0x2f0>)
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001910:	f8cc 0004 	str.w	r0, [ip, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001914:	6820      	ldr	r0, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001916:	d00c      	beq.n	8001932 <HAL_GPIO_Init+0x16e>
          SET_BIT(EXTI->IMR, iocurrent);
 8001918:	4330      	orrs	r0, r6
 800191a:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191c:	680c      	ldr	r4, [r1, #0]
	position++;
 800191e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001920:	fa34 f003 	lsrs.w	r0, r4, r3
 8001924:	f102 0204 	add.w	r2, r2, #4
 8001928:	f47f af69 	bne.w	80017fe <HAL_GPIO_Init+0x3a>
  }
}
 800192c:	b005      	add	sp, #20
 800192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001932:	ea20 0006 	bic.w	r0, r0, r6
 8001936:	6020      	str	r0, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	680c      	ldr	r4, [r1, #0]
 800193a:	e759      	b.n	80017f0 <HAL_GPIO_Init+0x2c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193c:	68c8      	ldr	r0, [r1, #12]
 800193e:	f100 0a0c 	add.w	sl, r0, #12
          break;
 8001942:	e780      	b.n	8001846 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001944:	68c8      	ldr	r0, [r1, #12]
 8001946:	f100 0a04 	add.w	sl, r0, #4
          break;
 800194a:	e77c      	b.n	8001846 <HAL_GPIO_Init+0x82>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194c:	68c8      	ldr	r0, [r1, #12]
 800194e:	f100 0a08 	add.w	sl, r0, #8
          break;
 8001952:	e778      	b.n	8001846 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8001954:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8001ab8 <HAL_GPIO_Init+0x2f4>
 8001958:	4564      	cmp	r4, ip
 800195a:	d00e      	beq.n	800197a <HAL_GPIO_Init+0x1b6>
 800195c:	f200 80d9 	bhi.w	8001b12 <HAL_GPIO_Init+0x34e>
 8001960:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8001964:	4564      	cmp	r4, ip
 8001966:	d008      	beq.n	800197a <HAL_GPIO_Init+0x1b6>
 8001968:	f50c 2c70 	add.w	ip, ip, #983040	@ 0xf0000
 800196c:	4564      	cmp	r4, ip
 800196e:	d004      	beq.n	800197a <HAL_GPIO_Init+0x1b6>
 8001970:	f5ac 1c80 	sub.w	ip, ip, #1048576	@ 0x100000
 8001974:	4564      	cmp	r4, ip
 8001976:	f47f af66 	bne.w	8001846 <HAL_GPIO_Init+0x82>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	688c      	ldr	r4, [r1, #8]
 800197c:	2c00      	cmp	r4, #0
 800197e:	f040 80d9 	bne.w	8001b34 <HAL_GPIO_Init+0x370>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	f04f 0a04 	mov.w	sl, #4
 8001986:	e75e      	b.n	8001846 <HAL_GPIO_Init+0x82>
  uint32_t config = 0x00u;
 8001988:	f04f 0900 	mov.w	r9, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198c:	f06f 051f 	mvn.w	r5, #31
    ioposition = (0x01uL << position);
 8001990:	2701      	movs	r7, #1
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001992:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8001996:	464b      	mov	r3, r9
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001998:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8001aa4 <HAL_GPIO_Init+0x2e0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800199c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8001abc <HAL_GPIO_Init+0x2f8>
 80019a0:	e005      	b.n	80019ae <HAL_GPIO_Init+0x1ea>
	position++;
 80019a2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a4:	fa34 f203 	lsrs.w	r2, r4, r3
 80019a8:	f105 0504 	add.w	r5, r5, #4
 80019ac:	d0be      	beq.n	800192c <HAL_GPIO_Init+0x168>
    ioposition = (0x01uL << position);
 80019ae:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent == ioposition)
 80019b2:	ea32 0a04 	bics.w	sl, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b6:	ea04 0602 	and.w	r6, r4, r2
    if (iocurrent == ioposition)
 80019ba:	d1f2      	bne.n	80019a2 <HAL_GPIO_Init+0x1de>
      switch (GPIO_Init->Mode)
 80019bc:	684c      	ldr	r4, [r1, #4]
 80019be:	2c12      	cmp	r4, #18
 80019c0:	f200 80c4 	bhi.w	8001b4c <HAL_GPIO_Init+0x388>
 80019c4:	2c12      	cmp	r4, #18
 80019c6:	d816      	bhi.n	80019f6 <HAL_GPIO_Init+0x232>
 80019c8:	e8df f014 	tbh	[pc, r4, lsl #1]
 80019cc:	001300d2 	.word	0x001300d2
 80019d0:	00f400df 	.word	0x00f400df
 80019d4:	00150015 	.word	0x00150015
 80019d8:	00150015 	.word	0x00150015
 80019dc:	00150015 	.word	0x00150015
 80019e0:	00150015 	.word	0x00150015
 80019e4:	00150015 	.word	0x00150015
 80019e8:	00150015 	.word	0x00150015
 80019ec:	00e30015 	.word	0x00e30015
 80019f0:	00db      	.short	0x00db
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019f2:	f8d1 900c 	ldr.w	r9, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f6:	2eff      	cmp	r6, #255	@ 0xff
 80019f8:	d962      	bls.n	8001ac0 <HAL_GPIO_Init+0x2fc>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fa:	46aa      	mov	sl, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019fc:	4644      	mov	r4, r8
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	fa0e fb0a 	lsl.w	fp, lr, sl
 8001a04:	ea22 020b 	bic.w	r2, r2, fp
 8001a08:	fa09 fa0a 	lsl.w	sl, r9, sl
 8001a0c:	ea42 020a 	orr.w	r2, r2, sl
 8001a10:	6022      	str	r2, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a12:	684a      	ldr	r2, [r1, #4]
 8001a14:	00d4      	lsls	r4, r2, #3
 8001a16:	d557      	bpl.n	8001ac8 <HAL_GPIO_Init+0x304>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a18:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1c:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a20:	f044 0401 	orr.w	r4, r4, #1
 8001a24:	f8cc 4018 	str.w	r4, [ip, #24]
 8001a28:	f8dc 4018 	ldr.w	r4, [ip, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a30:	f004 0401 	and.w	r4, r4, #1
 8001a34:	9403      	str	r4, [sp, #12]
 8001a36:	9c03      	ldr	r4, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 8001a38:	f023 0403 	bic.w	r4, r3, #3
 8001a3c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8001a40:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8001a44:	f8d4 b008 	ldr.w	fp, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a48:	fa0e fa0a 	lsl.w	sl, lr, sl
 8001a4c:	ea2b 0a0a 	bic.w	sl, fp, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8001a50:	f8c4 a008 	str.w	sl, [r4, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a54:	02d4      	lsls	r4, r2, #11
 8001a56:	d539      	bpl.n	8001acc <HAL_GPIO_Init+0x308>
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8001ab4 <HAL_GPIO_Init+0x2f0>
 8001a5c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8001a60:	4334      	orrs	r4, r6
 8001a62:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a66:	0294      	lsls	r4, r2, #10
 8001a68:	d53a      	bpl.n	8001ae0 <HAL_GPIO_Init+0x31c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a6a:	f8df a048 	ldr.w	sl, [pc, #72]	@ 8001ab4 <HAL_GPIO_Init+0x2f0>
 8001a6e:	f8da 400c 	ldr.w	r4, [sl, #12]
 8001a72:	4334      	orrs	r4, r6
 8001a74:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a78:	0394      	lsls	r4, r2, #14
 8001a7a:	d53b      	bpl.n	8001af4 <HAL_GPIO_Init+0x330>
          SET_BIT(EXTI->EMR, iocurrent);
 8001a7c:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001ab4 <HAL_GPIO_Init+0x2f0>
 8001a80:	f8da 4004 	ldr.w	r4, [sl, #4]
 8001a84:	4334      	orrs	r4, r6
 8001a86:	f8ca 4004 	str.w	r4, [sl, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001a8a:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab4 <HAL_GPIO_Init+0x2f0>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001a90:	6822      	ldr	r2, [r4, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a92:	bf0c      	ite	eq
 8001a94:	43b2      	biceq	r2, r6
          SET_BIT(EXTI->IMR, iocurrent);
 8001a96:	4332      	orrne	r2, r6
 8001a98:	6022      	str	r2, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9a:	680c      	ldr	r4, [r1, #0]
 8001a9c:	e781      	b.n	80019a2 <HAL_GPIO_Init+0x1de>
 8001a9e:	bf00      	nop
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	40010400 	.word	0x40010400
 8001ab8:	10220000 	.word	0x10220000
 8001abc:	40010804 	.word	0x40010804
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001ac6:	e79a      	b.n	80019fe <HAL_GPIO_Init+0x23a>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac8:	680c      	ldr	r4, [r1, #0]
 8001aca:	e76a      	b.n	80019a2 <HAL_GPIO_Init+0x1de>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001acc:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8001bc0 <HAL_GPIO_Init+0x3fc>
 8001ad0:	f8da 4008 	ldr.w	r4, [sl, #8]
 8001ad4:	ea24 0406 	bic.w	r4, r4, r6
 8001ad8:	f8ca 4008 	str.w	r4, [sl, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001adc:	0294      	lsls	r4, r2, #10
 8001ade:	d4c4      	bmi.n	8001a6a <HAL_GPIO_Init+0x2a6>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae0:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8001bc0 <HAL_GPIO_Init+0x3fc>
 8001ae4:	f8da 400c 	ldr.w	r4, [sl, #12]
 8001ae8:	ea24 0406 	bic.w	r4, r4, r6
 8001aec:	f8ca 400c 	str.w	r4, [sl, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	0394      	lsls	r4, r2, #14
 8001af2:	d4c3      	bmi.n	8001a7c <HAL_GPIO_Init+0x2b8>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af4:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001bc0 <HAL_GPIO_Init+0x3fc>
 8001af8:	f8da 4004 	ldr.w	r4, [sl, #4]
 8001afc:	ea24 0406 	bic.w	r4, r4, r6
 8001b00:	f8ca 4004 	str.w	r4, [sl, #4]
 8001b04:	e7c1      	b.n	8001a8a <HAL_GPIO_Init+0x2c6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b06:	2001      	movs	r0, #1
 8001b08:	fa00 f009 	lsl.w	r0, r0, r9
 8001b0c:	ea40 000e 	orr.w	r0, r0, lr
 8001b10:	e6da      	b.n	80018c8 <HAL_GPIO_Init+0x104>
      switch (GPIO_Init->Mode)
 8001b12:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8001bc4 <HAL_GPIO_Init+0x400>
 8001b16:	4564      	cmp	r4, ip
 8001b18:	f43f af2f 	beq.w	800197a <HAL_GPIO_Init+0x1b6>
 8001b1c:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
 8001b20:	4564      	cmp	r4, ip
 8001b22:	f47f ae90 	bne.w	8001846 <HAL_GPIO_Init+0x82>
 8001b26:	e728      	b.n	800197a <HAL_GPIO_Init+0x1b6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b28:	2002      	movs	r0, #2
 8001b2a:	fa00 f009 	lsl.w	r0, r0, r9
 8001b2e:	ea40 000e 	orr.w	r0, r0, lr
 8001b32:	e6c9      	b.n	80018c8 <HAL_GPIO_Init+0x104>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b34:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b36:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001b3a:	bf0c      	ite	eq
 8001b3c:	f8cb 0010 	streq.w	r0, [fp, #16]
            GPIOx->BRR = ioposition;
 8001b40:	f8cb 0014 	strne.w	r0, [fp, #20]
 8001b44:	e67f      	b.n	8001846 <HAL_GPIO_Init+0x82>
      switch (GPIO_Init->Mode)
 8001b46:	f04f 0a00 	mov.w	sl, #0
 8001b4a:	e67c      	b.n	8001846 <HAL_GPIO_Init+0x82>
 8001b4c:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8001bc8 <HAL_GPIO_Init+0x404>
 8001b50:	4554      	cmp	r4, sl
 8001b52:	d00d      	beq.n	8001b70 <HAL_GPIO_Init+0x3ac>
 8001b54:	d821      	bhi.n	8001b9a <HAL_GPIO_Init+0x3d6>
 8001b56:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8001b5a:	4554      	cmp	r4, sl
 8001b5c:	d008      	beq.n	8001b70 <HAL_GPIO_Init+0x3ac>
 8001b5e:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 8001b62:	4554      	cmp	r4, sl
 8001b64:	d004      	beq.n	8001b70 <HAL_GPIO_Init+0x3ac>
 8001b66:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8001b6a:	4554      	cmp	r4, sl
 8001b6c:	f47f af43 	bne.w	80019f6 <HAL_GPIO_Init+0x232>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b70:	688c      	ldr	r4, [r1, #8]
 8001b72:	b1e4      	cbz	r4, 8001bae <HAL_GPIO_Init+0x3ea>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b74:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001b76:	4c15      	ldr	r4, [pc, #84]	@ (8001bcc <HAL_GPIO_Init+0x408>)
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b78:	d01f      	beq.n	8001bba <HAL_GPIO_Init+0x3f6>
            GPIOx->BRR = ioposition;
 8001b7a:	6162      	str	r2, [r4, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	f04f 0908 	mov.w	r9, #8
 8001b80:	e739      	b.n	80019f6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b82:	68ca      	ldr	r2, [r1, #12]
 8001b84:	f102 090c 	add.w	r9, r2, #12
          break;
 8001b88:	e735      	b.n	80019f6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b8a:	68ca      	ldr	r2, [r1, #12]
 8001b8c:	f102 0908 	add.w	r9, r2, #8
          break;
 8001b90:	e731      	b.n	80019f6 <HAL_GPIO_Init+0x232>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b92:	68ca      	ldr	r2, [r1, #12]
 8001b94:	f102 0904 	add.w	r9, r2, #4
          break;
 8001b98:	e72d      	b.n	80019f6 <HAL_GPIO_Init+0x232>
      switch (GPIO_Init->Mode)
 8001b9a:	f8df a028 	ldr.w	sl, [pc, #40]	@ 8001bc4 <HAL_GPIO_Init+0x400>
 8001b9e:	4554      	cmp	r4, sl
 8001ba0:	d0e6      	beq.n	8001b70 <HAL_GPIO_Init+0x3ac>
 8001ba2:	f50a 3a80 	add.w	sl, sl, #65536	@ 0x10000
 8001ba6:	4554      	cmp	r4, sl
 8001ba8:	f47f af25 	bne.w	80019f6 <HAL_GPIO_Init+0x232>
 8001bac:	e7e0      	b.n	8001b70 <HAL_GPIO_Init+0x3ac>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bae:	f04f 0904 	mov.w	r9, #4
 8001bb2:	e720      	b.n	80019f6 <HAL_GPIO_Init+0x232>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb4:	f04f 0900 	mov.w	r9, #0
 8001bb8:	e71d      	b.n	80019f6 <HAL_GPIO_Init+0x232>
            GPIOx->BSRR = ioposition;
 8001bba:	6122      	str	r2, [r4, #16]
 8001bbc:	e7de      	b.n	8001b7c <HAL_GPIO_Init+0x3b8>
 8001bbe:	bf00      	nop
 8001bc0:	40010400 	.word	0x40010400
 8001bc4:	10310000 	.word	0x10310000
 8001bc8:	10220000 	.word	0x10220000
 8001bcc:	40010800 	.word	0x40010800

08001bd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	b902      	cbnz	r2, 8001bd4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd2:	0409      	lsls	r1, r1, #16
 8001bd4:	6101      	str	r1, [r0, #16]
  }
}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	f000 81e4 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x3ce>
{
 8001bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	6803      	ldr	r3, [r0, #0]
 8001be4:	4604      	mov	r4, r0
 8001be6:	07dd      	lsls	r5, r3, #31
{
 8001be8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bea:	d535      	bpl.n	8001c58 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4999      	ldr	r1, [pc, #612]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	684a      	ldr	r2, [r1, #4]
 8001bf0:	f002 020c 	and.w	r2, r2, #12
 8001bf4:	2a04      	cmp	r2, #4
 8001bf6:	f000 80ed 	beq.w	8001dd4 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfa:	684a      	ldr	r2, [r1, #4]
 8001bfc:	f002 020c 	and.w	r2, r2, #12
 8001c00:	2a08      	cmp	r2, #8
 8001c02:	f000 80e3 	beq.w	8001dcc <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c06:	6863      	ldr	r3, [r4, #4]
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCC_OscConfig+0x58>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 810a 	beq.w	8001e28 <HAL_RCC_OscConfig+0x250>
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c18:	f000 8180 	beq.w	8001f1c <HAL_RCC_OscConfig+0x344>
 8001c1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c2c:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2e:	e004      	b.n	8001c3a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	4a88      	ldr	r2, [pc, #544]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001c32:	6813      	ldr	r3, [r2, #0]
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fd45 	bl	80016c8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4e85      	ldr	r6, [pc, #532]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8001c40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e005      	b.n	8001c50 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fd40 	bl	80016c8 <HAL_GetTick>
 8001c48:	1b40      	subs	r0, r0, r5
 8001c4a:	2864      	cmp	r0, #100	@ 0x64
 8001c4c:	f200 80e8 	bhi.w	8001e20 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c50:	6833      	ldr	r3, [r6, #0]
 8001c52:	039a      	lsls	r2, r3, #14
 8001c54:	d5f6      	bpl.n	8001c44 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	079f      	lsls	r7, r3, #30
 8001c5a:	d528      	bpl.n	8001cae <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5c:	4a7d      	ldr	r2, [pc, #500]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	6851      	ldr	r1, [r2, #4]
 8001c60:	f011 0f0c 	tst.w	r1, #12
 8001c64:	f000 8096 	beq.w	8001d94 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c68:	6851      	ldr	r1, [r2, #4]
 8001c6a:	f001 010c 	and.w	r1, r1, #12
 8001c6e:	2908      	cmp	r1, #8
 8001c70:	f000 808c 	beq.w	8001d8c <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c74:	6923      	ldr	r3, [r4, #16]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8116 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4b76      	ldr	r3, [pc, #472]	@ (8001e58 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	4e74      	ldr	r6, [pc, #464]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 8001c82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c84:	f7ff fd20 	bl	80016c8 <HAL_GetTick>
 8001c88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fd1c 	bl	80016c8 <HAL_GetTick>
 8001c90:	1b40      	subs	r0, r0, r5
 8001c92:	2802      	cmp	r0, #2
 8001c94:	f200 80c4 	bhi.w	8001e20 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	6833      	ldr	r3, [r6, #0]
 8001c9a:	0798      	lsls	r0, r3, #30
 8001c9c:	d5f6      	bpl.n	8001c8c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	6833      	ldr	r3, [r6, #0]
 8001ca0:	6962      	ldr	r2, [r4, #20]
 8001ca2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001ca6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001caa:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	071a      	lsls	r2, r3, #28
 8001cb0:	d429      	bmi.n	8001d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb2:	075d      	lsls	r5, r3, #29
 8001cb4:	d54b      	bpl.n	8001d4e <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b67      	ldr	r3, [pc, #412]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	00d0      	lsls	r0, r2, #3
 8001cbc:	f100 8084 	bmi.w	8001dc8 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001cc0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001cc8:	61da      	str	r2, [r3, #28]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4e61      	ldr	r6, [pc, #388]	@ (8001e5c <HAL_RCC_OscConfig+0x284>)
 8001cd6:	6833      	ldr	r3, [r6, #0]
 8001cd8:	05d9      	lsls	r1, r3, #23
 8001cda:	f140 8091 	bpl.w	8001e00 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	68e3      	ldr	r3, [r4, #12]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	f000 80f2 	beq.w	8001eca <HAL_RCC_OscConfig+0x2f2>
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80be 	beq.w	8001e68 <HAL_RCC_OscConfig+0x290>
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	4b59      	ldr	r3, [pc, #356]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	f000 8120 	beq.w	8001f36 <HAL_RCC_OscConfig+0x35e>
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	621a      	str	r2, [r3, #32]
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	f022 0204 	bic.w	r2, r2, #4
 8001d02:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d04:	e0e6      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d06:	69a3      	ldr	r3, [r4, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d04c      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4b52      	ldr	r3, [pc, #328]	@ (8001e58 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d10:	4e50      	ldr	r6, [pc, #320]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 8001d12:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001d16:	f7ff fcd7 	bl	80016c8 <HAL_GetTick>
 8001d1a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1c:	e004      	b.n	8001d28 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fcd3 	bl	80016c8 <HAL_GetTick>
 8001d22:	1b40      	subs	r0, r0, r5
 8001d24:	2802      	cmp	r0, #2
 8001d26:	d87b      	bhi.n	8001e20 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d28:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001d2a:	079b      	lsls	r3, r3, #30
 8001d2c:	d5f7      	bpl.n	8001d1e <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e60 <HAL_RCC_OscConfig+0x288>)
 8001d30:	4a4c      	ldr	r2, [pc, #304]	@ (8001e64 <HAL_RCC_OscConfig+0x28c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	0a5b      	lsrs	r3, r3, #9
 8001d3a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001d3c:	bf00      	nop
  }
  while (Delay --);
 8001d3e:	9b01      	ldr	r3, [sp, #4]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	9201      	str	r2, [sp, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f9      	bne.n	8001d3c <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	075d      	lsls	r5, r3, #29
 8001d4c:	d4b3      	bmi.n	8001cb6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4e:	69e3      	ldr	r3, [r4, #28]
 8001d50:	b1c3      	cbz	r3, 8001d84 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d52:	4d40      	ldr	r5, [pc, #256]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	686a      	ldr	r2, [r5, #4]
 8001d56:	f002 020c 	and.w	r2, r2, #12
 8001d5a:	2a08      	cmp	r2, #8
 8001d5c:	f000 80cd 	beq.w	8001efa <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001d60:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d62:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001d64:	4b3c      	ldr	r3, [pc, #240]	@ (8001e58 <HAL_RCC_OscConfig+0x280>)
 8001d66:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d68:	f000 80ed 	beq.w	8001f46 <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fcac 	bl	80016c8 <HAL_GetTick>
 8001d70:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	e004      	b.n	8001d7e <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff fca8 	bl	80016c8 <HAL_GetTick>
 8001d78:	1b00      	subs	r0, r0, r4
 8001d7a:	2802      	cmp	r0, #2
 8001d7c:	d850      	bhi.n	8001e20 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	d4f7      	bmi.n	8001d74 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 8001d84:	2000      	movs	r0, #0
}
 8001d86:	b002      	add	sp, #8
 8001d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8c:	6852      	ldr	r2, [r2, #4]
 8001d8e:	03d6      	lsls	r6, r2, #15
 8001d90:	f53f af70 	bmi.w	8001c74 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d94:	4a2f      	ldr	r2, [pc, #188]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	0795      	lsls	r5, r2, #30
 8001d9a:	d525      	bpl.n	8001de8 <HAL_RCC_OscConfig+0x210>
 8001d9c:	6922      	ldr	r2, [r4, #16]
 8001d9e:	2a01      	cmp	r2, #1
 8001da0:	d022      	beq.n	8001de8 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 8001da2:	2001      	movs	r0, #1
 8001da4:	e7ef      	b.n	8001d86 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 8001da6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e58 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4e2a      	ldr	r6, [pc, #168]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8001daa:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001dae:	f7ff fc8b 	bl	80016c8 <HAL_GetTick>
 8001db2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	e004      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db6:	f7ff fc87 	bl	80016c8 <HAL_GetTick>
 8001dba:	1b40      	subs	r0, r0, r5
 8001dbc:	2802      	cmp	r0, #2
 8001dbe:	d82f      	bhi.n	8001e20 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001dc2:	079f      	lsls	r7, r3, #30
 8001dc4:	d4f7      	bmi.n	8001db6 <HAL_RCC_OscConfig+0x1de>
 8001dc6:	e7bf      	b.n	8001d48 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8001dc8:	2500      	movs	r5, #0
 8001dca:	e783      	b.n	8001cd4 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dcc:	684a      	ldr	r2, [r1, #4]
 8001dce:	03d0      	lsls	r0, r2, #15
 8001dd0:	f57f af19 	bpl.w	8001c06 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	0391      	lsls	r1, r2, #14
 8001dda:	f57f af3d 	bpl.w	8001c58 <HAL_RCC_OscConfig+0x80>
 8001dde:	6862      	ldr	r2, [r4, #4]
 8001de0:	2a00      	cmp	r2, #0
 8001de2:	f47f af39 	bne.w	8001c58 <HAL_RCC_OscConfig+0x80>
 8001de6:	e7dc      	b.n	8001da2 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	491a      	ldr	r1, [pc, #104]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	6960      	ldr	r0, [r4, #20]
 8001dec:	680a      	ldr	r2, [r1, #0]
 8001dee:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001df2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001df6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df8:	071a      	lsls	r2, r3, #28
 8001dfa:	f57f af5a 	bpl.w	8001cb2 <HAL_RCC_OscConfig+0xda>
 8001dfe:	e782      	b.n	8001d06 <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e00:	6833      	ldr	r3, [r6, #0]
 8001e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e06:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e08:	f7ff fc5e 	bl	80016c8 <HAL_GetTick>
 8001e0c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	6833      	ldr	r3, [r6, #0]
 8001e10:	05da      	lsls	r2, r3, #23
 8001e12:	f53f af64 	bmi.w	8001cde <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff fc57 	bl	80016c8 <HAL_GetTick>
 8001e1a:	1bc0      	subs	r0, r0, r7
 8001e1c:	2864      	cmp	r0, #100	@ 0x64
 8001e1e:	d9f6      	bls.n	8001e0e <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8001e20:	2003      	movs	r0, #3
}
 8001e22:	b002      	add	sp, #8
 8001e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	4d0a      	ldr	r5, [pc, #40]	@ (8001e54 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	682b      	ldr	r3, [r5, #0]
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	682b      	ldr	r3, [r5, #0]
 8001e34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e3a:	f7ff fc45 	bl	80016c8 <HAL_GetTick>
 8001e3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e40:	e004      	b.n	8001e4c <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e42:	f7ff fc41 	bl	80016c8 <HAL_GetTick>
 8001e46:	1b80      	subs	r0, r0, r6
 8001e48:	2864      	cmp	r0, #100	@ 0x64
 8001e4a:	d8e9      	bhi.n	8001e20 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	039b      	lsls	r3, r3, #14
 8001e50:	d4f7      	bmi.n	8001e42 <HAL_RCC_OscConfig+0x26a>
 8001e52:	e700      	b.n	8001c56 <HAL_RCC_OscConfig+0x7e>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	42420000 	.word	0x42420000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	20000000 	.word	0x20000000
 8001e64:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e68:	4e50      	ldr	r6, [pc, #320]	@ (8001fac <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6e:	6a33      	ldr	r3, [r6, #32]
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6233      	str	r3, [r6, #32]
 8001e76:	6a33      	ldr	r3, [r6, #32]
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fc23 	bl	80016c8 <HAL_GetTick>
 8001e82:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	e004      	b.n	8001e90 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff fc1f 	bl	80016c8 <HAL_GetTick>
 8001e8a:	1bc0      	subs	r0, r0, r7
 8001e8c:	4540      	cmp	r0, r8
 8001e8e:	d8c7      	bhi.n	8001e20 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	6a33      	ldr	r3, [r6, #32]
 8001e92:	0798      	lsls	r0, r3, #30
 8001e94:	d4f7      	bmi.n	8001e86 <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 8001e96:	2d00      	cmp	r5, #0
 8001e98:	f43f af59 	beq.w	8001d4e <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4a43      	ldr	r2, [pc, #268]	@ (8001fac <HAL_RCC_OscConfig+0x3d4>)
 8001e9e:	69d3      	ldr	r3, [r2, #28]
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	e752      	b.n	8001d4e <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8001ea8:	4a41      	ldr	r2, [pc, #260]	@ (8001fb0 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4e40      	ldr	r6, [pc, #256]	@ (8001fac <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8001eac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001eae:	f7ff fc0b 	bl	80016c8 <HAL_GetTick>
 8001eb2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb4:	e004      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fc07 	bl	80016c8 <HAL_GetTick>
 8001eba:	1b40      	subs	r0, r0, r5
 8001ebc:	2802      	cmp	r0, #2
 8001ebe:	d8af      	bhi.n	8001e20 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec0:	6833      	ldr	r3, [r6, #0]
 8001ec2:	0799      	lsls	r1, r3, #30
 8001ec4:	d4f7      	bmi.n	8001eb6 <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	e6f1      	b.n	8001cae <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eca:	4a38      	ldr	r2, [pc, #224]	@ (8001fac <HAL_RCC_OscConfig+0x3d4>)
 8001ecc:	6a13      	ldr	r3, [r2, #32]
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fbf8 	bl	80016c8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001edc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ede:	4f33      	ldr	r7, [pc, #204]	@ (8001fac <HAL_RCC_OscConfig+0x3d4>)
 8001ee0:	e004      	b.n	8001eec <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fbf1 	bl	80016c8 <HAL_GetTick>
 8001ee6:	1b80      	subs	r0, r0, r6
 8001ee8:	4540      	cmp	r0, r8
 8001eea:	d899      	bhi.n	8001e20 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	079b      	lsls	r3, r3, #30
 8001ef0:	d5f7      	bpl.n	8001ee2 <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 8001ef2:	2d00      	cmp	r5, #0
 8001ef4:	f43f af2b 	beq.w	8001d4e <HAL_RCC_OscConfig+0x176>
 8001ef8:	e7d0      	b.n	8001e9c <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f43f af51 	beq.w	8001da2 <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8001f00:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	6a22      	ldr	r2, [r4, #32]
 8001f04:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8001f08:	4291      	cmp	r1, r2
 8001f0a:	f47f af4a 	bne.w	8001da2 <HAL_RCC_OscConfig+0x1ca>
 8001f0e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f10:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f14:	1a18      	subs	r0, r3, r0
 8001f16:	bf18      	it	ne
 8001f18:	2001      	movne	r0, #1
 8001f1a:	e734      	b.n	8001d86 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f20:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f32:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	e681      	b.n	8001c3a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f36:	f042 0204 	orr.w	r2, r2, #4
 8001f3a:	621a      	str	r2, [r3, #32]
 8001f3c:	6a1a      	ldr	r2, [r3, #32]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f44:	e7c6      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 8001f46:	f7ff fbbf 	bl	80016c8 <HAL_GetTick>
 8001f4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	e005      	b.n	8001f5a <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff fbbb 	bl	80016c8 <HAL_GetTick>
 8001f52:	1b80      	subs	r0, r0, r6
 8001f54:	2802      	cmp	r0, #2
 8001f56:	f63f af63 	bhi.w	8001e20 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	0199      	lsls	r1, r3, #6
 8001f5e:	d4f6      	bmi.n	8001f4e <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f60:	6a23      	ldr	r3, [r4, #32]
 8001f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f68:	686a      	ldr	r2, [r5, #4]
 8001f6a:	68a1      	ldr	r1, [r4, #8]
 8001f6c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001f70:	430a      	orrs	r2, r1
 8001f72:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f74:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f76:	4d0d      	ldr	r5, [pc, #52]	@ (8001fac <HAL_RCC_OscConfig+0x3d4>)
 8001f78:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001f7a:	686a      	ldr	r2, [r5, #4]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001f82:	490b      	ldr	r1, [pc, #44]	@ (8001fb0 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4313      	orrs	r3, r2
 8001f86:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f88:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fb9d 	bl	80016c8 <HAL_GetTick>
 8001f8e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f90:	e005      	b.n	8001f9e <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff fb99 	bl	80016c8 <HAL_GetTick>
 8001f96:	1b00      	subs	r0, r0, r4
 8001f98:	2802      	cmp	r0, #2
 8001f9a:	f63f af41 	bhi.w	8001e20 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	019a      	lsls	r2, r3, #6
 8001fa2:	d5f6      	bpl.n	8001f92 <HAL_RCC_OscConfig+0x3ba>
 8001fa4:	e6ee      	b.n	8001d84 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 8001fa6:	2001      	movs	r0, #1
}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	42420000 	.word	0x42420000

08001fb4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	f000 80a1 	beq.w	80020fc <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fba:	4a56      	ldr	r2, [pc, #344]	@ (8002114 <HAL_RCC_ClockConfig+0x160>)
{
 8001fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	460d      	mov	r5, r1
 8001fcc:	d20c      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	6813      	ldr	r3, [r2, #0]
 8001fd0:	f023 0307 	bic.w	r3, r3, #7
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd8:	6813      	ldr	r3, [r2, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	428b      	cmp	r3, r1
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001fe2:	2001      	movs	r0, #1
}
 8001fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	079e      	lsls	r6, r3, #30
 8001fec:	d514      	bpl.n	8002018 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	0758      	lsls	r0, r3, #29
 8001ff0:	d504      	bpl.n	8001ffc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff2:	4949      	ldr	r1, [pc, #292]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
 8001ff4:	684a      	ldr	r2, [r1, #4]
 8001ff6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001ffa:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	0719      	lsls	r1, r3, #28
 8001ffe:	d504      	bpl.n	800200a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002000:	4945      	ldr	r1, [pc, #276]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
 8002002:	684a      	ldr	r2, [r1, #4]
 8002004:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8002008:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200a:	4943      	ldr	r1, [pc, #268]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
 800200c:	68a0      	ldr	r0, [r4, #8]
 800200e:	684a      	ldr	r2, [r1, #4]
 8002010:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002014:	4302      	orrs	r2, r0
 8002016:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002018:	07da      	lsls	r2, r3, #31
 800201a:	d520      	bpl.n	800205e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b3e      	ldr	r3, [pc, #248]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002020:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002024:	d06c      	beq.n	8002100 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	2a02      	cmp	r2, #2
 8002028:	d065      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	079e      	lsls	r6, r3, #30
 800202c:	d5d9      	bpl.n	8001fe2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4e3a      	ldr	r6, [pc, #232]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002034:	6873      	ldr	r3, [r6, #4]
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	4313      	orrs	r3, r2
 800203c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800203e:	f7ff fb43 	bl	80016c8 <HAL_GetTick>
 8002042:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002044:	e004      	b.n	8002050 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7ff fb3f 	bl	80016c8 <HAL_GetTick>
 800204a:	1bc0      	subs	r0, r0, r7
 800204c:	4540      	cmp	r0, r8
 800204e:	d85a      	bhi.n	8002106 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002050:	6873      	ldr	r3, [r6, #4]
 8002052:	6862      	ldr	r2, [r4, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800205c:	d1f3      	bne.n	8002046 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205e:	4a2d      	ldr	r2, [pc, #180]	@ (8002114 <HAL_RCC_ClockConfig+0x160>)
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	42ab      	cmp	r3, r5
 8002068:	d909      	bls.n	800207e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	6813      	ldr	r3, [r2, #0]
 800206c:	f023 0307 	bic.w	r3, r3, #7
 8002070:	432b      	orrs	r3, r5
 8002072:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002074:	6813      	ldr	r3, [r2, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	42ab      	cmp	r3, r5
 800207c:	d1b1      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	0758      	lsls	r0, r3, #29
 8002082:	d506      	bpl.n	8002092 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4924      	ldr	r1, [pc, #144]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
 8002086:	68e0      	ldr	r0, [r4, #12]
 8002088:	684a      	ldr	r2, [r1, #4]
 800208a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800208e:	4302      	orrs	r2, r0
 8002090:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	0719      	lsls	r1, r3, #28
 8002094:	d507      	bpl.n	80020a6 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002096:	4a20      	ldr	r2, [pc, #128]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
 8002098:	6921      	ldr	r1, [r4, #16]
 800209a:	6853      	ldr	r3, [r2, #4]
 800209c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80020a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020a4:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 80020a6:	491c      	ldr	r1, [pc, #112]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
 80020a8:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80020aa:	f002 030c 	and.w	r3, r2, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d010      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b4:	4a18      	ldr	r2, [pc, #96]	@ (8002118 <HAL_RCC_ClockConfig+0x164>)
 80020b6:	481a      	ldr	r0, [pc, #104]	@ (8002120 <HAL_RCC_ClockConfig+0x16c>)
 80020b8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80020ba:	491a      	ldr	r1, [pc, #104]	@ (8002124 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020bc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80020c0:	5c80      	ldrb	r0, [r0, r2]
 80020c2:	4a19      	ldr	r2, [pc, #100]	@ (8002128 <HAL_RCC_ClockConfig+0x174>)
 80020c4:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80020c6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020c8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80020ca:	f7ff fabb 	bl	8001644 <HAL_InitTick>
  return HAL_OK;
 80020ce:	2000      	movs	r0, #0
}
 80020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020d4:	4815      	ldr	r0, [pc, #84]	@ (800212c <HAL_RCC_ClockConfig+0x178>)
 80020d6:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020da:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020dc:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020de:	d514      	bpl.n	800210a <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e0:	480e      	ldr	r0, [pc, #56]	@ (800211c <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e2:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e4:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e8:	4911      	ldr	r1, [pc, #68]	@ (8002130 <HAL_RCC_ClockConfig+0x17c>)
 80020ea:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80020ee:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020f4:	e7de      	b.n	80020b4 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	019f      	lsls	r7, r3, #6
 80020f8:	d499      	bmi.n	800202e <HAL_RCC_ClockConfig+0x7a>
 80020fa:	e772      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
}
 80020fe:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002100:	039b      	lsls	r3, r3, #14
 8002102:	d494      	bmi.n	800202e <HAL_RCC_ClockConfig+0x7a>
 8002104:	e76d      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002106:	2003      	movs	r0, #3
 8002108:	e76c      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <HAL_RCC_ClockConfig+0x180>)
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	e7d0      	b.n	80020b4 <HAL_RCC_ClockConfig+0x100>
 8002112:	bf00      	nop
 8002114:	40022000 	.word	0x40022000
 8002118:	40021000 	.word	0x40021000
 800211c:	007a1200 	.word	0x007a1200
 8002120:	080024f8 	.word	0x080024f8
 8002124:	20000008 	.word	0x20000008
 8002128:	20000000 	.word	0x20000000
 800212c:	0800250c 	.word	0x0800250c
 8002130:	08002508 	.word	0x08002508
 8002134:	003d0900 	.word	0x003d0900

08002138 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	2800      	cmp	r0, #0
 800213a:	d066      	beq.n	800220a <HAL_TIM_Base_Init+0xd2>
{
 800213c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002142:	4604      	mov	r4, r0
 8002144:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002148:	2b00      	cmp	r3, #0
 800214a:	d059      	beq.n	8002200 <HAL_TIM_Base_Init+0xc8>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800214e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002150:	4e2f      	ldr	r6, [pc, #188]	@ (8002210 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002152:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002156:	42b2      	cmp	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002158:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800215a:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800215c:	6861      	ldr	r1, [r4, #4]
  tmpcr1 = TIMx->CR1;
 800215e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	d030      	beq.n	80021c4 <HAL_TIM_Base_Init+0x8c>
 8002162:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002166:	d02d      	beq.n	80021c4 <HAL_TIM_Base_Init+0x8c>
 8002168:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800216c:	42b2      	cmp	r2, r6
 800216e:	d03e      	beq.n	80021ee <HAL_TIM_Base_Init+0xb6>
 8002170:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002174:	42b2      	cmp	r2, r6
 8002176:	d03a      	beq.n	80021ee <HAL_TIM_Base_Init+0xb6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800217c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800217e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002180:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002182:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002184:	2301      	movs	r3, #1
 8002186:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002188:	6913      	ldr	r3, [r2, #16]
 800218a:	07db      	lsls	r3, r3, #31
 800218c:	d503      	bpl.n	8002196 <HAL_TIM_Base_Init+0x5e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800218e:	6913      	ldr	r3, [r2, #16]
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002196:	2301      	movs	r3, #1
 8002198:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80021a0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80021a4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80021a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021b4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80021b8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80021c0:	2000      	movs	r0, #0
}
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80021c4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80021ca:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021cc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021d8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80021da:	6013      	str	r3, [r2, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <HAL_TIM_Base_Init+0xd8>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021de:	62d0      	str	r0, [r2, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e0:	429a      	cmp	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80021e2:	bf08      	it	eq
 80021e4:	6963      	ldreq	r3, [r4, #20]
  TIMx->PSC = Structure->Prescaler;
 80021e6:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80021e8:	bf08      	it	eq
 80021ea:	6313      	streq	r3, [r2, #48]	@ 0x30
 80021ec:	e7ca      	b.n	8002184 <HAL_TIM_Base_Init+0x4c>
    tmpcr1 |= Structure->CounterMode;
 80021ee:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80021f4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fc:	4333      	orrs	r3, r6
 80021fe:	e7bb      	b.n	8002178 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8002200:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002204:	f7ff f9ce 	bl	80015a4 <HAL_TIM_Base_MspInit>
 8002208:	e7a0      	b.n	800214c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800220a:	2001      	movs	r0, #1
}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00

08002214 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002214:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002218:	2a01      	cmp	r2, #1
 800221a:	d06e      	beq.n	80022fa <HAL_TIM_ConfigClockSource+0xe6>
 800221c:	4603      	mov	r3, r0
{
 800221e:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002220:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002222:	2402      	movs	r4, #2
  tmpsmcr = htim->Instance->SMCR;
 8002224:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(htim);
 8002226:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800222a:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800222e:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002230:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8002234:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002238:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800223a:	680c      	ldr	r4, [r1, #0]
 800223c:	2c60      	cmp	r4, #96	@ 0x60
 800223e:	d076      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x11a>
 8002240:	d811      	bhi.n	8002266 <HAL_TIM_ConfigClockSource+0x52>
 8002242:	2c40      	cmp	r4, #64	@ 0x40
 8002244:	d05b      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xea>
 8002246:	d82e      	bhi.n	80022a6 <HAL_TIM_ConfigClockSource+0x92>
 8002248:	2c20      	cmp	r4, #32
 800224a:	d004      	beq.n	8002256 <HAL_TIM_ConfigClockSource+0x42>
 800224c:	f200 8088 	bhi.w	8002360 <HAL_TIM_ConfigClockSource+0x14c>
 8002250:	f034 0110 	bics.w	r1, r4, #16
 8002254:	d11f      	bne.n	8002296 <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002256:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002258:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800225c:	4321      	orrs	r1, r4
 800225e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002262:	6091      	str	r1, [r2, #8]
}
 8002264:	e016      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8002266:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800226a:	d013      	beq.n	8002294 <HAL_TIM_ConfigClockSource+0x80>
 800226c:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8002270:	d033      	beq.n	80022da <HAL_TIM_ConfigClockSource+0xc6>
 8002272:	2c70      	cmp	r4, #112	@ 0x70
 8002274:	d10f      	bne.n	8002296 <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002276:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800227a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800227c:	4328      	orrs	r0, r5
 800227e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002280:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002284:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002288:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228a:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800228c:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800228e:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002292:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002296:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002298:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800229a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80022a2:	bc30      	pop	{r4, r5}
 80022a4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80022a6:	2c50      	cmp	r4, #80	@ 0x50
 80022a8:	d1f5      	bne.n	8002296 <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 80022aa:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80022ac:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80022ae:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80022b4:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b6:	6a11      	ldr	r1, [r2, #32]
 80022b8:	f021 0101 	bic.w	r1, r1, #1
 80022bc:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022be:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022c0:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c4:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80022c8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80022ca:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80022cc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80022ce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022d2:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80022d6:	6091      	str	r1, [r2, #8]
}
 80022d8:	e7dc      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022da:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80022de:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022e0:	4328      	orrs	r0, r5
 80022e2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e4:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022e8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80022ec:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 80022ee:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022f0:	6891      	ldr	r1, [r2, #8]
 80022f2:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80022f6:	6091      	str	r1, [r2, #8]
      break;
 80022f8:	e7cc      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 80022fa:	2002      	movs	r0, #2
}
 80022fc:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 80022fe:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002300:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002302:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002304:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002308:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800230a:	6a11      	ldr	r1, [r2, #32]
 800230c:	f021 0101 	bic.w	r1, r1, #1
 8002310:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002312:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002314:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002318:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800231c:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800231e:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002320:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002322:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002326:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800232a:	6091      	str	r1, [r2, #8]
}
 800232c:	e7b2      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 800232e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002330:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002332:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002334:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002338:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800233c:	6a10      	ldr	r0, [r2, #32]
 800233e:	f020 0010 	bic.w	r0, r0, #16
 8002342:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002344:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002346:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800234a:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800234e:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8002350:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002352:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002354:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002358:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800235c:	6091      	str	r1, [r2, #8]
}
 800235e:	e799      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8002360:	2c30      	cmp	r4, #48	@ 0x30
 8002362:	f43f af78 	beq.w	8002256 <HAL_TIM_ConfigClockSource+0x42>
 8002366:	e796      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x82>

08002368 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002368:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800236c:	2a01      	cmp	r2, #1
 800236e:	d027      	beq.n	80023c0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002370:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002372:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002374:	681a      	ldr	r2, [r3, #0]
{
 8002376:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800237c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800237e:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	4d10      	ldr	r5, [pc, #64]	@ (80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8002382:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002386:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002388:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800238a:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800238c:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800238e:	d009      	beq.n	80023a4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002390:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002394:	d006      	beq.n	80023a4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002396:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002398:	4282      	cmp	r2, r0
 800239a:	d003      	beq.n	80023a4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800239c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80023a0:	4282      	cmp	r2, r0
 80023a2:	d104      	bne.n	80023ae <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023a4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023a6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023aa:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023ac:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80023ae:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80023b6:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023ba:	4610      	mov	r0, r2
}
 80023bc:	bc30      	pop	{r4, r5}
 80023be:	4770      	bx	lr
  __HAL_LOCK(htim);
 80023c0:	2002      	movs	r0, #2
}
 80023c2:	4770      	bx	lr
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40000400 	.word	0x40000400

080023cc <memset>:
 80023cc:	4603      	mov	r3, r0
 80023ce:	4402      	add	r2, r0
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d100      	bne.n	80023d6 <memset+0xa>
 80023d4:	4770      	bx	lr
 80023d6:	f803 1b01 	strb.w	r1, [r3], #1
 80023da:	e7f9      	b.n	80023d0 <memset+0x4>

080023dc <__libc_init_array>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	2600      	movs	r6, #0
 80023e0:	4d0c      	ldr	r5, [pc, #48]	@ (8002414 <__libc_init_array+0x38>)
 80023e2:	4c0d      	ldr	r4, [pc, #52]	@ (8002418 <__libc_init_array+0x3c>)
 80023e4:	1b64      	subs	r4, r4, r5
 80023e6:	10a4      	asrs	r4, r4, #2
 80023e8:	42a6      	cmp	r6, r4
 80023ea:	d109      	bne.n	8002400 <__libc_init_array+0x24>
 80023ec:	f000 f828 	bl	8002440 <_init>
 80023f0:	2600      	movs	r6, #0
 80023f2:	4d0a      	ldr	r5, [pc, #40]	@ (800241c <__libc_init_array+0x40>)
 80023f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002420 <__libc_init_array+0x44>)
 80023f6:	1b64      	subs	r4, r4, r5
 80023f8:	10a4      	asrs	r4, r4, #2
 80023fa:	42a6      	cmp	r6, r4
 80023fc:	d105      	bne.n	800240a <__libc_init_array+0x2e>
 80023fe:	bd70      	pop	{r4, r5, r6, pc}
 8002400:	f855 3b04 	ldr.w	r3, [r5], #4
 8002404:	4798      	blx	r3
 8002406:	3601      	adds	r6, #1
 8002408:	e7ee      	b.n	80023e8 <__libc_init_array+0xc>
 800240a:	f855 3b04 	ldr.w	r3, [r5], #4
 800240e:	4798      	blx	r3
 8002410:	3601      	adds	r6, #1
 8002412:	e7f2      	b.n	80023fa <__libc_init_array+0x1e>
 8002414:	0800251c 	.word	0x0800251c
 8002418:	0800251c 	.word	0x0800251c
 800241c:	0800251c 	.word	0x0800251c
 8002420:	08002520 	.word	0x08002520

08002424 <memcpy>:
 8002424:	440a      	add	r2, r1
 8002426:	4291      	cmp	r1, r2
 8002428:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800242c:	d100      	bne.n	8002430 <memcpy+0xc>
 800242e:	4770      	bx	lr
 8002430:	b510      	push	{r4, lr}
 8002432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002436:	4291      	cmp	r1, r2
 8002438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800243c:	d1f9      	bne.n	8002432 <memcpy+0xe>
 800243e:	bd10      	pop	{r4, pc}

08002440 <_init>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	bf00      	nop
 8002444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002446:	bc08      	pop	{r3}
 8002448:	469e      	mov	lr, r3
 800244a:	4770      	bx	lr

0800244c <_fini>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	bf00      	nop
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr
