
ascon-newuu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001570  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800167c  0800167c  0000267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d8  080016d8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080016d8  080016d8  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d8  080016d8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d8  080016d8  000026d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016dc  080016dc  000026dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080016e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  080016ec  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080016ec  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca9f  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff9  00000000  00000000  0000fad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00007ce4  00000000  00000000  00011acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  000197b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4e  00000000  00000000  0001a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a3e  00000000  00000000  0001afee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f805  00000000  00000000  00032a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089270  00000000  00000000  00042231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cb4a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018dc  00000000  00000000  000cb4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000ccdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001664 	.word	0x08001664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001664 	.word	0x08001664

0800014c <ascon_aead_encrypt>:
  return NOTZERO(s->x[3], s->x[4]);
}

int ascon_aead_encrypt(uint8_t* t, uint8_t* c, const uint8_t* m, uint64_t mlen,
                       const uint8_t* ad, uint64_t adlen, const uint8_t* npub,
                       const uint8_t* k) {
 800014c:	4684      	mov	ip, r0
 800014e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000152:	b093      	sub	sp, #76	@ 0x4c
 8000154:	e9dd b822 	ldrd	fp, r8, [sp, #136]	@ 0x88
 8000158:	460f      	mov	r7, r1
 800015a:	e9dd a520 	ldrd	sl, r5, [sp, #128]	@ 0x80
 800015e:	e9dd 641c 	ldrd	r6, r4, [sp, #112]	@ 0x70
}

forceinline uint64_t LOADBYTES(const uint8_t* bytes, int n) {
  uint64_t x = 0;
  memcpy(&x, bytes, n);
  return U64TOWORD(x);
 8000162:	f8d8 0000 	ldr.w	r0, [r8]
 8000166:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800016a:	9200      	str	r2, [sp, #0]
 800016c:	f8cd c014 	str.w	ip, [sp, #20]
 8000170:	f000 f9b6 	bl	80004e0 <TOBI>
 8000174:	4684      	mov	ip, r0
 8000176:	460a      	mov	r2, r1
 8000178:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800017c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8000180:	4691      	mov	r9, r2
 8000182:	46e0      	mov	r8, ip
 8000184:	f000 f9ac 	bl	80004e0 <TOBI>
  s->x[1] = key->x[0];
 8000188:	f8cd 9008 	str.w	r9, [sp, #8]
 800018c:	460a      	mov	r2, r1
 800018e:	4684      	mov	ip, r0
 8000190:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  if (ASCON_AEAD_RATE == 16) s->x[0] = ASCON_128A_IV;
 8000194:	f44f 490a 	mov.w	r9, #35328	@ 0x8a00
  s->x[1] = key->x[0];
 8000198:	f8cd 8004 	str.w	r8, [sp, #4]
 800019c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  if (ASCON_AEAD_RATE == 16) s->x[0] = ASCON_128A_IV;
 80001a0:	f8df 82d8 	ldr.w	r8, [pc, #728]	@ 800047c <ascon_aead_encrypt+0x330>
 80001a4:	f8db 0000 	ldr.w	r0, [fp]
 80001a8:	f8db 1004 	ldr.w	r1, [fp, #4]
  s->x[2] = key->x[1];
 80001ac:	9204      	str	r2, [sp, #16]
 80001ae:	920d      	str	r2, [sp, #52]	@ 0x34
 80001b0:	f8cd c00c 	str.w	ip, [sp, #12]
 80001b4:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
  if (ASCON_AEAD_RATE == 16) s->x[0] = ASCON_128A_IV;
 80001b8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80001bc:	f000 f990 	bl	80004e0 <TOBI>
  s->x[3] = LOAD(npub, 8);
 80001c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80001c4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80001c8:	f8db 100c 	ldr.w	r1, [fp, #12]
 80001cc:	f000 f988 	bl	80004e0 <TOBI>
  s->x[4] = LOAD(npub + 8, 8);
 80001d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
  P(s, 12);
 80001d4:	210c      	movs	r1, #12
 80001d6:	a808      	add	r0, sp, #32
 80001d8:	f000 fa06 	bl	80005e8 <P>
  s->x[3] ^= key->x[0];
 80001dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80001de:	9b01      	ldr	r3, [sp, #4]
  s->x[4] ^= key->x[1];
 80001e0:	9910      	ldr	r1, [sp, #64]	@ 0x40
  s->x[3] ^= key->x[0];
 80001e2:	405a      	eors	r2, r3
 80001e4:	920e      	str	r2, [sp, #56]	@ 0x38
 80001e6:	9b02      	ldr	r3, [sp, #8]
 80001e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  if (adlen) {
 80001ea:	ea5a 0005 	orrs.w	r0, sl, r5
  s->x[3] ^= key->x[0];
 80001ee:	ea82 0203 	eor.w	r2, r2, r3
  s->x[4] ^= key->x[1];
 80001f2:	9b03      	ldr	r3, [sp, #12]
  s->x[3] ^= key->x[0];
 80001f4:	920f      	str	r2, [sp, #60]	@ 0x3c
  s->x[4] ^= key->x[1];
 80001f6:	ea81 0103 	eor.w	r1, r1, r3
 80001fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80001fc:	9b04      	ldr	r3, [sp, #16]
 80001fe:	9110      	str	r1, [sp, #64]	@ 0x40
 8000200:	ea82 0203 	eor.w	r2, r2, r3
 8000204:	9211      	str	r2, [sp, #68]	@ 0x44
  if (adlen) {
 8000206:	d055      	beq.n	80002b4 <ascon_aead_encrypt+0x168>
    while (adlen >= ASCON_AEAD_RATE) {
 8000208:	f1ba 0f10 	cmp.w	sl, #16
 800020c:	f175 0200 	sbcs.w	r2, r5, #0
 8000210:	d335      	bcc.n	800027e <ascon_aead_encrypt+0x132>
 8000212:	46d0      	mov	r8, sl
 8000214:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8000216:	eb03 090a 	add.w	r9, r3, sl
 800021a:	eba9 0b08 	sub.w	fp, r9, r8
 800021e:	f8db 0000 	ldr.w	r0, [fp]
 8000222:	f8db 1004 	ldr.w	r1, [fp, #4]
 8000226:	f000 f95b 	bl	80004e0 <TOBI>
      s->x[0] ^= LOAD(ad, 8);
 800022a:	9b08      	ldr	r3, [sp, #32]
 800022c:	4043      	eors	r3, r0
 800022e:	9308      	str	r3, [sp, #32]
 8000230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000232:	f8db 0008 	ldr.w	r0, [fp, #8]
 8000236:	404b      	eors	r3, r1
 8000238:	f8db 100c 	ldr.w	r1, [fp, #12]
 800023c:	9309      	str	r3, [sp, #36]	@ 0x24
 800023e:	f000 f94f 	bl	80004e0 <TOBI>
      if (ASCON_AEAD_RATE == 16) s->x[1] ^= LOAD(ad + 8, 8);
 8000242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000244:	4043      	eors	r3, r0
 8000246:	930a      	str	r3, [sp, #40]	@ 0x28
 8000248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
      P(s, nr); // calling from permutations.c line 27.
 800024a:	a808      	add	r0, sp, #32
      if (ASCON_AEAD_RATE == 16) s->x[1] ^= LOAD(ad + 8, 8);
 800024c:	404b      	eors	r3, r1
      P(s, nr); // calling from permutations.c line 27.
 800024e:	2108      	movs	r1, #8
      if (ASCON_AEAD_RATE == 16) s->x[1] ^= LOAD(ad + 8, 8);
 8000250:	930b      	str	r3, [sp, #44]	@ 0x2c
      P(s, nr); // calling from permutations.c line 27.
 8000252:	f000 f9c9 	bl	80005e8 <P>
      adlen -= ASCON_AEAD_RATE;
 8000256:	f1b8 0810 	subs.w	r8, r8, #16
 800025a:	f165 0500 	sbc.w	r5, r5, #0
    while (adlen >= ASCON_AEAD_RATE) {
 800025e:	f1b8 0f10 	cmp.w	r8, #16
 8000262:	f175 0300 	sbcs.w	r3, r5, #0
 8000266:	d2d8      	bcs.n	800021a <ascon_aead_encrypt+0xce>
      adlen -= ASCON_AEAD_RATE;
 8000268:	2500      	movs	r5, #0
      ad += ASCON_AEAD_RATE;
 800026a:	f1ba 0210 	subs.w	r2, sl, #16
 800026e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8000270:	f022 020f 	bic.w	r2, r2, #15
 8000274:	3210      	adds	r2, #16
 8000276:	4413      	add	r3, r2
 8000278:	931e      	str	r3, [sp, #120]	@ 0x78
      adlen -= ASCON_AEAD_RATE;
 800027a:	f00a 0a0f 	and.w	sl, sl, #15
    if (ASCON_AEAD_RATE == 16 && adlen >= 8) {
 800027e:	f1ba 0f08 	cmp.w	sl, #8
 8000282:	f175 0200 	sbcs.w	r2, r5, #0
 8000286:	f080 80df 	bcs.w	8000448 <ascon_aead_encrypt+0x2fc>
    uint64_t* px = &s->x[0];
 800028a:	f10d 0b20 	add.w	fp, sp, #32
forceinline uint64_t PAD(int i) { return (uint32_t)0x01 << (4 * i); }
 800028e:	2101      	movs	r1, #1
    *px ^= PAD(adlen);
 8000290:	f8db 2000 	ldr.w	r2, [fp]
 8000294:	ea4f 008a 	mov.w	r0, sl, lsl #2
 8000298:	4081      	lsls	r1, r0
 800029a:	404a      	eors	r2, r1
    if (adlen) *px ^= LOADBYTES(ad, adlen);
 800029c:	ea5a 0505 	orrs.w	r5, sl, r5
    *px ^= PAD(adlen);
 80002a0:	f8cb 2000 	str.w	r2, [fp]
    if (adlen) *px ^= LOADBYTES(ad, adlen);
 80002a4:	f040 80ec 	bne.w	8000480 <ascon_aead_encrypt+0x334>
    P(s, nr);
 80002a8:	2108      	movs	r1, #8
 80002aa:	a808      	add	r0, sp, #32
 80002ac:	f000 f99c 	bl	80005e8 <P>
  s->x[4] ^= DSEP();
 80002b0:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	@ 0x40
  while (mlen >= ASCON_AEAD_RATE) {
 80002b4:	2e10      	cmp	r6, #16
  s->x[4] ^= DSEP();
 80002b6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
  while (mlen >= ASCON_AEAD_RATE) {
 80002ba:	f174 0300 	sbcs.w	r3, r4, #0
  s->x[4] ^= DSEP();
 80002be:	9110      	str	r1, [sp, #64]	@ 0x40
 80002c0:	9211      	str	r2, [sp, #68]	@ 0x44
  while (mlen >= ASCON_AEAD_RATE) {
 80002c2:	d341      	bcc.n	8000348 <ascon_aead_encrypt+0x1fc>
 80002c4:	46a2      	mov	sl, r4
 80002c6:	4635      	mov	r5, r6
 80002c8:	9b00      	ldr	r3, [sp, #0]
 80002ca:	eb07 0b06 	add.w	fp, r7, r6
 80002ce:	eb03 0906 	add.w	r9, r3, r6
 80002d2:	eba9 0805 	sub.w	r8, r9, r5
  return U64TOWORD(x);
 80002d6:	f8d8 0000 	ldr.w	r0, [r8]
 80002da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80002de:	f000 f8ff 	bl	80004e0 <TOBI>
    s->x[0] ^= LOAD(m, 8);
 80002e2:	9b08      	ldr	r3, [sp, #32]
 80002e4:	ebab 0405 	sub.w	r4, fp, r5
 80002e8:	4058      	eors	r0, r3
 80002ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80002ec:	9008      	str	r0, [sp, #32]
 80002ee:	4059      	eors	r1, r3
 80002f0:	9109      	str	r1, [sp, #36]	@ 0x24
}

forceinline void STOREBYTES(uint8_t* bytes, uint64_t w, int n) {
  uint64_t x = WORDTOU64(w);
 80002f2:	f000 f937 	bl	8000564 <FROMBI>
  memcpy(bytes, &x, n);
 80002f6:	6020      	str	r0, [r4, #0]
 80002f8:	6061      	str	r1, [r4, #4]
  return U64TOWORD(x);
 80002fa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80002fe:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8000302:	f000 f8ed 	bl	80004e0 <TOBI>
      s->x[1] ^= LOAD(m + 8, 8);
 8000306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000308:	4058      	eors	r0, r3
 800030a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800030c:	900a      	str	r0, [sp, #40]	@ 0x28
 800030e:	4059      	eors	r1, r3
 8000310:	910b      	str	r1, [sp, #44]	@ 0x2c
  uint64_t x = WORDTOU64(w);
 8000312:	f000 f927 	bl	8000564 <FROMBI>
  memcpy(bytes, &x, n);
 8000316:	60a0      	str	r0, [r4, #8]
 8000318:	60e1      	str	r1, [r4, #12]
    P(s, nr);
 800031a:	a808      	add	r0, sp, #32
 800031c:	2108      	movs	r1, #8
 800031e:	f000 f963 	bl	80005e8 <P>
    mlen -= ASCON_AEAD_RATE;
 8000322:	3d10      	subs	r5, #16
 8000324:	f16a 0a00 	sbc.w	sl, sl, #0
  while (mlen >= ASCON_AEAD_RATE) {
 8000328:	2d10      	cmp	r5, #16
 800032a:	f17a 0300 	sbcs.w	r3, sl, #0
 800032e:	d2d0      	bcs.n	80002d2 <ascon_aead_encrypt+0x186>
    mlen -= ASCON_AEAD_RATE;
 8000330:	2400      	movs	r4, #0
 8000332:	f1b6 0310 	subs.w	r3, r6, #16
    m += ASCON_AEAD_RATE;
 8000336:	9a00      	ldr	r2, [sp, #0]
 8000338:	f023 030f 	bic.w	r3, r3, #15
 800033c:	3310      	adds	r3, #16
 800033e:	441a      	add	r2, r3
 8000340:	9200      	str	r2, [sp, #0]
    c += ASCON_AEAD_RATE;
 8000342:	441f      	add	r7, r3
    mlen -= ASCON_AEAD_RATE;
 8000344:	f006 060f 	and.w	r6, r6, #15
  if (ASCON_AEAD_RATE == 16 && mlen >= 8) {
 8000348:	2e08      	cmp	r6, #8
 800034a:	f174 0300 	sbcs.w	r3, r4, #0
 800034e:	d260      	bcs.n	8000412 <ascon_aead_encrypt+0x2c6>
  uint64_t* px = &s->x[0];
 8000350:	f10d 0820 	add.w	r8, sp, #32
forceinline uint64_t PAD(int i) { return (uint32_t)0x01 << (4 * i); }
 8000354:	2201      	movs	r2, #1
  *px ^= PAD(mlen);
 8000356:	f8d8 3000 	ldr.w	r3, [r8]
 800035a:	00b1      	lsls	r1, r6, #2
 800035c:	408a      	lsls	r2, r1
 800035e:	4053      	eors	r3, r2
  if (mlen) {
 8000360:	4334      	orrs	r4, r6
  *px ^= PAD(mlen);
 8000362:	f8c8 3000 	str.w	r3, [r8]
  if (mlen) {
 8000366:	d133      	bne.n	80003d0 <ascon_aead_encrypt+0x284>
    s->x[2] ^= key->x[0];
 8000368:	9c01      	ldr	r4, [sp, #4]
 800036a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800036c:	9d02      	ldr	r5, [sp, #8]
 800036e:	4063      	eors	r3, r4
 8000370:	930c      	str	r3, [sp, #48]	@ 0x30
 8000372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    s->x[3] ^= key->x[1];
 8000374:	9e03      	ldr	r6, [sp, #12]
    s->x[2] ^= key->x[0];
 8000376:	406b      	eors	r3, r5
 8000378:	930d      	str	r3, [sp, #52]	@ 0x34
    s->x[3] ^= key->x[1];
 800037a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800037c:	9f04      	ldr	r7, [sp, #16]
 800037e:	4073      	eors	r3, r6
 8000380:	930e      	str	r3, [sp, #56]	@ 0x38
 8000382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  P(s, 12);
 8000384:	a808      	add	r0, sp, #32
    s->x[3] ^= key->x[1];
 8000386:	407b      	eors	r3, r7
  P(s, 12);
 8000388:	210c      	movs	r1, #12
    s->x[3] ^= key->x[1];
 800038a:	930f      	str	r3, [sp, #60]	@ 0x3c
  P(s, 12);
 800038c:	f000 f92c 	bl	80005e8 <P>
  s->x[3] ^= key->x[0];
 8000390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000392:	ea84 0003 	eor.w	r0, r4, r3
 8000396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8000398:	900e      	str	r0, [sp, #56]	@ 0x38
 800039a:	ea85 0103 	eor.w	r1, r5, r3
  s->x[4] ^= key->x[1];
 800039e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  s->x[3] ^= key->x[0];
 80003a0:	910f      	str	r1, [sp, #60]	@ 0x3c
  s->x[4] ^= key->x[1];
 80003a2:	4073      	eors	r3, r6
 80003a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80003a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80003a8:	407b      	eors	r3, r7
 80003aa:	9311      	str	r3, [sp, #68]	@ 0x44
  uint64_t x = WORDTOU64(w);
 80003ac:	f000 f8da 	bl	8000564 <FROMBI>
 80003b0:	4602      	mov	r2, r0
 80003b2:	460b      	mov	r3, r1
 80003b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
  memcpy(bytes, &x, n);
 80003b8:	9c05      	ldr	r4, [sp, #20]
 80003ba:	6063      	str	r3, [r4, #4]
 80003bc:	6022      	str	r2, [r4, #0]
  uint64_t x = WORDTOU64(w);
 80003be:	f000 f8d1 	bl	8000564 <FROMBI>
 80003c2:	4603      	mov	r3, r0
  ascon_adata(&s, ad, adlen);
  ascon_encrypt(&s, c, m, mlen);
  ascon_final(&s, &key);
  ascon_gettag(&s, t);
  return 0;
}
 80003c4:	2000      	movs	r0, #0
  memcpy(bytes, &x, n);
 80003c6:	60a3      	str	r3, [r4, #8]
 80003c8:	60e1      	str	r1, [r4, #12]
 80003ca:	b013      	add	sp, #76	@ 0x4c
 80003cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint64_t x = 0;
 80003d0:	2400      	movs	r4, #0
 80003d2:	2500      	movs	r5, #0
  memcpy(&x, bytes, n);
 80003d4:	4632      	mov	r2, r6
 80003d6:	9900      	ldr	r1, [sp, #0]
 80003d8:	a806      	add	r0, sp, #24
  uint64_t x = 0;
 80003da:	e9cd 4506 	strd	r4, r5, [sp, #24]
  memcpy(&x, bytes, n);
 80003de:	f001 f933 	bl	8001648 <memcpy>
  return U64TOWORD(x);
 80003e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80003e6:	f000 f87b 	bl	80004e0 <TOBI>
    *px ^= LOADBYTES(m, mlen);
 80003ea:	f8d8 3000 	ldr.w	r3, [r8]
 80003ee:	4058      	eors	r0, r3
 80003f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80003f4:	f8c8 0000 	str.w	r0, [r8]
 80003f8:	4059      	eors	r1, r3
 80003fa:	f8c8 1004 	str.w	r1, [r8, #4]
  uint64_t x = WORDTOU64(w);
 80003fe:	f000 f8b1 	bl	8000564 <FROMBI>
  memcpy(bytes, &x, n);
 8000402:	4632      	mov	r2, r6
  uint64_t x = WORDTOU64(w);
 8000404:	e9cd 0106 	strd	r0, r1, [sp, #24]
  memcpy(bytes, &x, n);
 8000408:	4638      	mov	r0, r7
 800040a:	a906      	add	r1, sp, #24
 800040c:	f001 f91c 	bl	8001648 <memcpy>
}
 8000410:	e7aa      	b.n	8000368 <ascon_aead_encrypt+0x21c>
  return U64TOWORD(x);
 8000412:	9d00      	ldr	r5, [sp, #0]
    c += 8;
 8000414:	3708      	adds	r7, #8
 8000416:	6828      	ldr	r0, [r5, #0]
 8000418:	6869      	ldr	r1, [r5, #4]
 800041a:	f000 f861 	bl	80004e0 <TOBI>
    m += 8;
 800041e:	f105 0308 	add.w	r3, r5, #8
 8000422:	9300      	str	r3, [sp, #0]
    s->x[0] ^= LOAD(m, 8);
 8000424:	9b08      	ldr	r3, [sp, #32]
    px = &s->x[1];
 8000426:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
    s->x[0] ^= LOAD(m, 8);
 800042a:	4058      	eors	r0, r3
 800042c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800042e:	9008      	str	r0, [sp, #32]
 8000430:	4059      	eors	r1, r3
 8000432:	9109      	str	r1, [sp, #36]	@ 0x24
  uint64_t x = WORDTOU64(w);
 8000434:	f000 f896 	bl	8000564 <FROMBI>
    mlen -= 8;
 8000438:	3e08      	subs	r6, #8
  memcpy(bytes, &x, n);
 800043a:	f847 0c08 	str.w	r0, [r7, #-8]
 800043e:	f847 1c04 	str.w	r1, [r7, #-4]
 8000442:	f164 0400 	sbc.w	r4, r4, #0
 8000446:	e785      	b.n	8000354 <ascon_aead_encrypt+0x208>
  return U64TOWORD(x);
 8000448:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
      px = &s->x[1];
 800044a:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 800044e:	6818      	ldr	r0, [r3, #0]
 8000450:	6859      	ldr	r1, [r3, #4]
 8000452:	f000 f845 	bl	80004e0 <TOBI>
      s->x[0] ^= LOAD(ad, 8);
 8000456:	9a08      	ldr	r2, [sp, #32]
      adlen -= 8;
 8000458:	f1ba 0308 	subs.w	r3, sl, #8
      s->x[0] ^= LOAD(ad, 8);
 800045c:	ea82 0200 	eor.w	r2, r2, r0
      adlen -= 8;
 8000460:	469a      	mov	sl, r3
      s->x[0] ^= LOAD(ad, 8);
 8000462:	9208      	str	r2, [sp, #32]
      ad += 8;
 8000464:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
      s->x[0] ^= LOAD(ad, 8);
 8000466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
      ad += 8;
 8000468:	f103 0308 	add.w	r3, r3, #8
      s->x[0] ^= LOAD(ad, 8);
 800046c:	ea82 0201 	eor.w	r2, r2, r1
      ad += 8;
 8000470:	931e      	str	r3, [sp, #120]	@ 0x78
      adlen -= 8;
 8000472:	f165 0500 	sbc.w	r5, r5, #0
      s->x[0] ^= LOAD(ad, 8);
 8000476:	9209      	str	r2, [sp, #36]	@ 0x24
      adlen -= 8;
 8000478:	e709      	b.n	800028e <ascon_aead_encrypt+0x142>
 800047a:	bf00      	nop
 800047c:	00400201 	.word	0x00400201
  uint64_t x = 0;
 8000480:	f04f 0800 	mov.w	r8, #0
 8000484:	f04f 0900 	mov.w	r9, #0
  memcpy(&x, bytes, n);
 8000488:	4652      	mov	r2, sl
 800048a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800048c:	a806      	add	r0, sp, #24
  uint64_t x = 0;
 800048e:	e9cd 8906 	strd	r8, r9, [sp, #24]
  memcpy(&x, bytes, n);
 8000492:	f001 f8d9 	bl	8001648 <memcpy>
  return U64TOWORD(x);
 8000496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800049a:	f000 f821 	bl	80004e0 <TOBI>
    if (adlen) *px ^= LOADBYTES(ad, adlen);
 800049e:	f8db 3000 	ldr.w	r3, [fp]
 80004a2:	4043      	eors	r3, r0
 80004a4:	f8cb 3000 	str.w	r3, [fp]
 80004a8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80004ac:	404b      	eors	r3, r1
 80004ae:	f8cb 3004 	str.w	r3, [fp, #4]
 80004b2:	e6f9      	b.n	80002a8 <ascon_aead_encrypt+0x15c>

080004b4 <crypto_aead_encrypt>:

int crypto_aead_encrypt(unsigned char* c, unsigned long long* clen,
                        const unsigned char* m, unsigned long long mlen,
                        const unsigned char* ad, unsigned long long adlen,
                        const unsigned char* nsec, const unsigned char* npub,
                        const unsigned char* k) {
 80004b4:	468c      	mov	ip, r1
 80004b6:	b430      	push	{r4, r5}
 80004b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80004ba:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  printbytes("k", k, CRYPTO_KEYBYTES);
  printbytes("n", npub, CRYPTO_NPUBBYTES);
  printbytes("a", ad, adlen);
  printbytes("m", m, mlen);
  /* ascon encryption */
  int result = ascon_aead_encrypt(t, c, m, mlen, ad, adlen, npub, k);
 80004be:	9108      	str	r1, [sp, #32]
  *clen = mlen + CRYPTO_ABYTES;
 80004c0:	f113 0510 	adds.w	r5, r3, #16
                        const unsigned char* k) {
 80004c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
  int result = ascon_aead_encrypt(t, c, m, mlen, ad, adlen, npub, k);
 80004c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
  *clen = mlen + CRYPTO_ABYTES;
 80004ca:	f144 0400 	adc.w	r4, r4, #0
  int result = ascon_aead_encrypt(t, c, m, mlen, ad, adlen, npub, k);
 80004ce:	9109      	str	r1, [sp, #36]	@ 0x24
                        const unsigned char* k) {
 80004d0:	4601      	mov	r1, r0
  *clen = mlen + CRYPTO_ABYTES;
 80004d2:	e9cc 5400 	strd	r5, r4, [ip]
  printbytes("c", c, mlen);
  printbytes("t", t, CRYPTO_ABYTES);
  print("\n");
  return result;
}
 80004d6:	bc30      	pop	{r4, r5}
  int result = ascon_aead_encrypt(t, c, m, mlen, ad, adlen, npub, k);
 80004d8:	4418      	add	r0, r3
 80004da:	f7ff be37 	b.w	800014c <ascon_aead_encrypt>
 80004de:	bf00      	nop

080004e0 <TOBI>:

extern const uint32_t B[3];

forceinline uint32_t deinterleave16(uint32_t x) {
  uint32_t t;
  t = (x ^ (x >> 1)) & B[0], x ^= t ^ (t << 1);
 80004e0:	ea80 0350 	eor.w	r3, r0, r0, lsr #1
 80004e4:	f003 3322 	and.w	r3, r3, #572662306	@ 0x22222222
 80004e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80004ec:	4043      	eors	r3, r0
 80004ee:	ea81 0051 	eor.w	r0, r1, r1, lsr #1
  t = (x ^ (x >> 2)) & B[1], x ^= t ^ (t << 2);
 80004f2:	ea83 0293 	eor.w	r2, r3, r3, lsr #2
  t = (x ^ (x >> 1)) & B[0], x ^= t ^ (t << 1);
 80004f6:	f000 3022 	and.w	r0, r0, #572662306	@ 0x22222222
  t = (x ^ (x >> 2)) & B[1], x ^= t ^ (t << 2);
 80004fa:	f002 320c 	and.w	r2, r2, #202116108	@ 0xc0c0c0c
  t = (x ^ (x >> 1)) & B[0], x ^= t ^ (t << 1);
 80004fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000502:	4048      	eors	r0, r1
 8000504:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  t = (x ^ (x >> 2)) & B[1], x ^= t ^ (t << 2);
 8000508:	4053      	eors	r3, r2
 800050a:	ea80 0290 	eor.w	r2, r0, r0, lsr #2
 800050e:	f002 320c 	and.w	r2, r2, #202116108	@ 0xc0c0c0c
 8000512:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000516:	4050      	eors	r0, r2
  t = (x ^ (x >> 4)) & B[2], x ^= t ^ (t << 4);
 8000518:	ea80 1110 	eor.w	r1, r0, r0, lsr #4
 800051c:	ea83 1213 	eor.w	r2, r3, r3, lsr #4
 8000520:	f001 11f0 	and.w	r1, r1, #15728880	@ 0xf000f0
 8000524:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8000528:	f002 12f0 	and.w	r2, r2, #15728880	@ 0xf000f0
 800052c:	4048      	eors	r0, r1
 800052e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8000532:	ea83 0102 	eor.w	r1, r3, r2
  t = (x ^ (x >> 8)) & 0xff00, x ^= t ^ (t << 8);
 8000536:	ea80 2210 	eor.w	r2, r0, r0, lsr #8
 800053a:	ea81 2311 	eor.w	r3, r1, r1, lsr #8
 800053e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8000542:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 8000546:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800054a:	4050      	eors	r0, r2
 800054c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000550:	4059      	eors	r1, r3
  uint32_t lo = in;
  uint32_t t0, t1, e, o;
  t0 = deinterleave16(lo);
  t1 = deinterleave16(hi);
  e = (t1 << 16) | (t0 & 0x0000FFFF);
  o = (t1 & 0xFFFF0000) | (t0 >> 16);
 8000552:	0c03      	lsrs	r3, r0, #16
  e = (t1 << 16) | (t0 & 0x0000FFFF);
 8000554:	b28a      	uxth	r2, r1
  o = (t1 & 0xFFFF0000) | (t0 >> 16);
 8000556:	041b      	lsls	r3, r3, #16

const uint32_t B[3] = {0x22222222, 0x0c0c0c0c, 0x00f000f0};

#if !ASCON_INLINE_BI

uint64_t TOBI(uint64_t in) { return deinterleave32(in); }
 8000558:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800055c:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <FROMBI>:
/* credit to Henry S. Warren, Hacker's Delight, Addison-Wesley, 2002 */
forceinline uint64_t interleave32(uint64_t in) {
  uint32_t e = in;
  uint32_t o = in >> 32;
  uint32_t t0, t1, lo, hi;
  t0 = (o << 16) | (e & 0x0000FFFF);
 8000564:	b282      	uxth	r2, r0
  t1 = (o & 0xFFFF0000) | (e >> 16);
 8000566:	0c0b      	lsrs	r3, r1, #16
 8000568:	041b      	lsls	r3, r3, #16
  t0 = (o << 16) | (e & 0x0000FFFF);
 800056a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  t1 = (o & 0xFFFF0000) | (e >> 16);
 800056e:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
  t = (x ^ (x >> 8)) & 0xff00, x ^= t ^ (t << 8);
 8000572:	ea81 2311 	eor.w	r3, r1, r1, lsr #8
 8000576:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800057a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800057e:	4059      	eors	r1, r3
  t = (x ^ (x >> 4)) & B[2], x ^= t ^ (t << 4);
 8000580:	ea81 1311 	eor.w	r3, r1, r1, lsr #4
 8000584:	f003 13f0 	and.w	r3, r3, #15728880	@ 0xf000f0
 8000588:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800058c:	4059      	eors	r1, r3
  t = (x ^ (x >> 8)) & 0xff00, x ^= t ^ (t << 8);
 800058e:	ea80 2310 	eor.w	r3, r0, r0, lsr #8
 8000592:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000596:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800059a:	4043      	eors	r3, r0
  t = (x ^ (x >> 4)) & B[2], x ^= t ^ (t << 4);
 800059c:	ea83 1213 	eor.w	r2, r3, r3, lsr #4
 80005a0:	f002 12f0 	and.w	r2, r2, #15728880	@ 0xf000f0
 80005a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80005a8:	4053      	eors	r3, r2
  t = (x ^ (x >> 2)) & B[1], x ^= t ^ (t << 2);
 80005aa:	ea81 0091 	eor.w	r0, r1, r1, lsr #2
 80005ae:	ea83 0293 	eor.w	r2, r3, r3, lsr #2
 80005b2:	f000 300c 	and.w	r0, r0, #202116108	@ 0xc0c0c0c
 80005b6:	f002 320c 	and.w	r2, r2, #202116108	@ 0xc0c0c0c
 80005ba:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 80005be:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80005c2:	ea81 0c0c 	eor.w	ip, r1, ip
 80005c6:	4043      	eors	r3, r0
  t = (x ^ (x >> 1)) & B[0], x ^= t ^ (t << 1);
 80005c8:	ea83 0153 	eor.w	r1, r3, r3, lsr #1
 80005cc:	ea8c 005c 	eor.w	r0, ip, ip, lsr #1
 80005d0:	f000 3022 	and.w	r0, r0, #572662306	@ 0x22222222
 80005d4:	f001 3122 	and.w	r1, r1, #572662306	@ 0x22222222
 80005d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80005dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1

uint64_t FROMBI(uint64_t in) { return interleave32(in); }
 80005e0:	ea8c 0000 	eor.w	r0, ip, r0
 80005e4:	4059      	eors	r1, r3
 80005e6:	4770      	bx	lr

080005e8 <P>:

#endif

#if !ASCON_INLINE_PERM && !ASCON_UNROLL_LOOPS

void P(ascon_state_t* s, int nr) { PROUNDS(s, nr); }
 80005e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "word.h"

forceinline void ROUND_LOOP(ascon_state_t* s, const uint8_t* C,
                            const uint8_t* E) {
  uint32_t tmp0, tmp1;
  __asm__ __volatile__(
 80005ec:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
 80005f0:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
        : [C_e] "i"((uint32_t)C), [C_o] "i"((uint32_t)(C >> 32))            \
        :);                                                                 \
  } while (0)

forceinline void PROUNDS(ascon_state_t* s, int nr) {
  ROUND_LOOP(s, constants + START(nr), constants + 24);
 80005f4:	4b42      	ldr	r3, [pc, #264]	@ (8000700 <rbegin_82+0xe6>)
 80005f6:	f1c1 010c 	rsb	r1, r1, #12
  __asm__ __volatile__(
 80005fa:	f103 0918 	add.w	r9, r3, #24
  ROUND_LOOP(s, constants + START(nr), constants + 24);
 80005fe:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  __asm__ __volatile__(
 8000602:	469a      	mov	sl, r3
 8000604:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000608:	469e      	mov	lr, r3
 800060a:	6883      	ldr	r3, [r0, #8]
 800060c:	b083      	sub	sp, #12
 800060e:	4690      	mov	r8, r2
 8000610:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8000614:	469c      	mov	ip, r3
 8000616:	9001      	str	r0, [sp, #4]
 8000618:	6a43      	ldr	r3, [r0, #36]	@ 0x24

0800061a <rbegin_82>:
 800061a:	f83a bb02 	ldrh.w	fp, [sl], #2
 800061e:	f3cb 2007 	ubfx	r0, fp, #8, #8
 8000622:	f00b 0bff 	and.w	fp, fp, #255	@ 0xff
 8000626:	ea88 0802 	eor.w	r8, r8, r2
 800062a:	ea8e 0e03 	eor.w	lr, lr, r3
 800062e:	ea86 060c 	eor.w	r6, r6, ip
 8000632:	ea86 060b 	eor.w	r6, r6, fp
 8000636:	ea85 0507 	eor.w	r5, r5, r7
 800063a:	ea85 0500 	eor.w	r5, r5, r0
 800063e:	ea62 0b08 	orn	fp, r2, r8
 8000642:	ea26 0b0c 	bic.w	fp, r6, ip
 8000646:	ea88 080b 	eor.w	r8, r8, fp
 800064a:	ea63 000e 	orn	r0, r3, lr
 800064e:	ea25 0b07 	bic.w	fp, r5, r7
 8000652:	ea8e 0e0b 	eor.w	lr, lr, fp
 8000656:	ea64 0b02 	orn	fp, r4, r2
 800065a:	ea86 060b 	eor.w	r6, r6, fp
 800065e:	ea2c 0b08 	bic.w	fp, ip, r8
 8000662:	ea82 020b 	eor.w	r2, r2, fp
 8000666:	ea04 0b06 	and.w	fp, r4, r6
 800066a:	ea8c 0c0b 	eor.w	ip, ip, fp
 800066e:	ea84 0400 	eor.w	r4, r4, r0
 8000672:	ea61 0b03 	orn	fp, r1, r3
 8000676:	ea85 050b 	eor.w	r5, r5, fp
 800067a:	ea27 0b0e 	bic.w	fp, r7, lr
 800067e:	ea83 030b 	eor.w	r3, r3, fp
 8000682:	ea01 0b05 	and.w	fp, r1, r5
 8000686:	ea87 070b 	eor.w	r7, r7, fp
 800068a:	ea81 0100 	eor.w	r1, r1, r0
 800068e:	ea88 103e 	eor.w	r0, r8, lr, ror #4
 8000692:	ea8e 1b78 	eor.w	fp, lr, r8, ror #5
 8000696:	ea8e 2eb0 	eor.w	lr, lr, r0, ror #10
 800069a:	ea88 287b 	eor.w	r8, r8, fp, ror #9
 800069e:	ea8c 20fc 	eor.w	r0, ip, ip, ror #11
 80006a2:	ea87 2bf7 	eor.w	fp, r7, r7, ror #11
 80006a6:	ea87 5730 	eor.w	r7, r7, r0, ror #20
 80006aa:	ea8c 4cfb 	eor.w	ip, ip, fp, ror #19
 80006ae:	ea86 00b5 	eor.w	r0, r6, r5, ror #2
 80006b2:	ea85 0bf6 	eor.w	fp, r5, r6, ror #3
 80006b6:	ea85 0570 	eor.w	r5, r5, r0, ror #1
 80006ba:	ea86 060b 	eor.w	r6, r6, fp
 80006be:	ea84 00f1 	eor.w	r0, r4, r1, ror #3
 80006c2:	ea81 1b34 	eor.w	fp, r1, r4, ror #4
 80006c6:	ea84 1470 	eor.w	r4, r4, r0, ror #5
 80006ca:	ea81 117b 	eor.w	r1, r1, fp, ror #5
 80006ce:	ea82 4072 	eor.w	r0, r2, r2, ror #17
 80006d2:	ea83 4b73 	eor.w	fp, r3, r3, ror #17
 80006d6:	ea83 1330 	eor.w	r3, r3, r0, ror #4
 80006da:	ea82 02fb 	eor.w	r2, r2, fp, ror #3
 80006de:	45ca      	cmp	sl, r9
 80006e0:	d19b      	bne.n	800061a <rbegin_82>
 80006e2:	9801      	ldr	r0, [sp, #4]
 80006e4:	e9c0 8e00 	strd	r8, lr, [r0]
 80006e8:	e9c0 c702 	strd	ip, r7, [r0, #8]
 80006ec:	e9c0 6504 	strd	r6, r5, [r0, #16]
 80006f0:	e9c0 4106 	strd	r4, r1, [r0, #24]
 80006f4:	6202      	str	r2, [r0, #32]
 80006f6:	6243      	str	r3, [r0, #36]	@ 0x24
 80006f8:	b003      	add	sp, #12
 80006fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006fe:	bf00      	nop
 8000700:	0800169c 	.word	0x0800169c

08000704 <ascon_main>:
  printf("%c[%d]=", c, (int)xlen);
  for (i = 0; i < xlen; ++i) printf("%02x", x[i]);
  printf("\n");
}

int ascon_main() {
 8000704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000708:	b0bb      	sub	sp, #236	@ 0xec
  /* Sample data (key, nonce, associated data, plaintext) */
  unsigned char n[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 800070a:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
 800070e:	46c2      	mov	sl, r8
 8000710:	4f3c      	ldr	r7, [pc, #240]	@ (8000804 <ascon_main+0x100>)
                           11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                           22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
                           11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                           22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000712:	ab2a      	add	r3, sp, #168	@ 0xa8
 8000714:	930e      	str	r3, [sp, #56]	@ 0x38
  unsigned char n[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000716:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000718:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
  unsigned char k[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 800071c:	463b      	mov	r3, r7
  unsigned char n[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 800071e:	46d4      	mov	ip, sl
  unsigned char k[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000720:	f1a7 0210 	sub.w	r2, r7, #16
 8000724:	920c      	str	r2, [sp, #48]	@ 0x30
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000726:	920d      	str	r2, [sp, #52]	@ 0x34
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000728:	920f      	str	r2, [sp, #60]	@ 0x3c
  unsigned char n[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 800072a:	930a      	str	r3, [sp, #40]	@ 0x28
 800072c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  unsigned char k[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000732:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 8000736:	f10d 0968 	add.w	r9, sp, #104	@ 0x68
 800073a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800073e:	46cc      	mov	ip, r9
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000740:	ae22      	add	r6, sp, #136	@ 0x88
 8000742:	46b6      	mov	lr, r6
                           22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
  unsigned char c[32], h[32], t[32];
  unsigned long long alen = 16;
  unsigned long long mlen = 16;
  unsigned long long clen;
  int result = 0;
 8000744:	2500      	movs	r5, #0
  unsigned char k[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800074a:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 800074e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28

  uint32_t total_time = 0;
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);    // LED ON
    HAL_Delay(5000);                                          // Wait 5 seconds
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // LED OFF
  uint32_t start_time = HAL_GetTick();
 8000750:	f644 6420 	movw	r4, #20000	@ 0x4e20
  unsigned char k[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000756:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 800075a:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
  for (int i = 0; i < 20000; i++) {

      result |= crypto_aead_encrypt(c, &clen, m, mlen, a, alen, NULL, n, k);
 800075e:	462f      	mov	r7, r5
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000760:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000764:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000768:	f8dd c03c 	ldr.w	ip, [sp, #60]	@ 0x3c
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 800076c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
      result |= crypto_aead_encrypt(c, &clen, m, mlen, a, alen, NULL, n, k);
 800076e:	f04f 0a10 	mov.w	sl, #16
  unsigned char a[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000774:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000778:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800077c:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
      result |= crypto_aead_encrypt(c, &clen, m, mlen, a, alen, NULL, n, k);
 8000780:	f04f 0b00 	mov.w	fp, #0
  unsigned char m[32] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
 8000784:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800078a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800078c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);    // LED ON
 8000790:	462a      	mov	r2, r5
 8000792:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000796:	481c      	ldr	r0, [pc, #112]	@ (8000808 <ascon_main+0x104>)
 8000798:	f000 fb2a 	bl	8000df0 <HAL_GPIO_WritePin>
    HAL_Delay(5000);                                          // Wait 5 seconds
 800079c:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007a0:	f000 f992 	bl	8000ac8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // LED OFF
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007aa:	4817      	ldr	r0, [pc, #92]	@ (8000808 <ascon_main+0x104>)
 80007ac:	f000 fb20 	bl	8000df0 <HAL_GPIO_WritePin>
  uint32_t start_time = HAL_GetTick();
 80007b0:	f000 f984 	bl	8000abc <HAL_GetTick>
      result |= crypto_aead_encrypt(c, &clen, m, mlen, a, alen, NULL, n, k);
 80007b4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80007b8:	e9cd ab00 	strd	sl, fp, [sp]
 80007bc:	e9cd 8907 	strd	r8, r9, [sp, #28]
 80007c0:	aa2a      	add	r2, sp, #168	@ 0xa8
 80007c2:	a910      	add	r1, sp, #64	@ 0x40
 80007c4:	9706      	str	r7, [sp, #24]
 80007c6:	9602      	str	r6, [sp, #8]
 80007c8:	a832      	add	r0, sp, #200	@ 0xc8
 80007ca:	f7ff fe73 	bl	80004b4 <crypto_aead_encrypt>
  for (int i = 0; i < 20000; i++) {
 80007ce:	3c01      	subs	r4, #1
      result |= crypto_aead_encrypt(c, &clen, m, mlen, a, alen, NULL, n, k);
 80007d0:	ea45 0500 	orr.w	r5, r5, r0
  for (int i = 0; i < 20000; i++) {
 80007d4:	d1ee      	bne.n	80007b4 <ascon_main+0xb0>

      //printf("Encryption %d took %lu ms\n", i + 1, elapsed);
  }
  uint32_t end_time = HAL_GetTick();
 80007d6:	f000 f971 	bl	8000abc <HAL_GetTick>
//#elif defined(CRYPTO_AUTH)
  // Similar modifications for the authentication variant (if needed)
//#endif

  /* Turn ON LED on PC13, wait 5 seconds, then turn OFF LED */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);    // LED ON
 80007da:	4622      	mov	r2, r4
 80007dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e0:	4809      	ldr	r0, [pc, #36]	@ (8000808 <ascon_main+0x104>)
 80007e2:	f000 fb05 	bl	8000df0 <HAL_GPIO_WritePin>
  HAL_Delay(5000+result);                                          // Wait 5 seconds
 80007e6:	f505 509c 	add.w	r0, r5, #4992	@ 0x1380
 80007ea:	3008      	adds	r0, #8
 80007ec:	f000 f96c 	bl	8000ac8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // LED OFF
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <ascon_main+0x104>)
 80007f8:	f000 fafa 	bl	8000df0 <HAL_GPIO_WritePin>

  return result;
}
 80007fc:	4628      	mov	r0, r5
 80007fe:	b03b      	add	sp, #236	@ 0xec
 8000800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000804:	0800167c 	.word	0x0800167c
 8000808:	40011000 	.word	0x40011000

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000810:	2224      	movs	r2, #36	@ 0x24
 8000812:	2100      	movs	r1, #0
 8000814:	a807      	add	r0, sp, #28
 8000816:	f000 feeb 	bl	80015f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081a:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081e:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800082c:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	9206      	str	r2, [sp, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000832:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f000 fae0 	bl	8000df8 <HAL_RCC_OscConfig>
 8000838:	b108      	cbz	r0, 800083e <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	4601      	mov	r1, r0
 8000840:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000842:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000848:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084e:	f000 fcc1 	bl	80011d4 <HAL_RCC_ClockConfig>
 8000852:	b108      	cbz	r0, 8000858 <SystemClock_Config+0x4c>
 8000854:	b672      	cpsid	i
  while (1)
 8000856:	e7fe      	b.n	8000856 <SystemClock_Config+0x4a>
}
 8000858:	b011      	add	sp, #68	@ 0x44
 800085a:	bd30      	pop	{r4, r5, pc}

0800085c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	2400      	movs	r4, #0
{
 800085e:	b500      	push	{lr}
 8000860:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8000862:	f000 f90d 	bl	8000a80 <HAL_Init>
  SystemClock_Config();
 8000866:	f7ff ffd1 	bl	800080c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800086e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b34      	ldr	r3, [pc, #208]	@ (8000944 <main+0xe8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000874:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800087a:	4833      	ldr	r0, [pc, #204]	@ (8000948 <main+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	f042 0210 	orr.w	r2, r2, #16
 8000880:	619a      	str	r2, [r3, #24]
 8000882:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8000884:	4d31      	ldr	r5, [pc, #196]	@ (800094c <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	f002 0210 	and.w	r2, r2, #16
 800088a:	9200      	str	r2, [sp, #0]
 800088c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	699a      	ldr	r2, [r3, #24]
 8000890:	f042 0204 	orr.w	r2, r2, #4
 8000894:	619a      	str	r2, [r3, #24]
 8000896:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000898:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008a2:	f000 faa5 	bl	8000df0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ac:	e9cd 3204 	strd	r3, r2, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	4825      	ldr	r0, [pc, #148]	@ (8000948 <main+0xec>)
 80008b4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f000 f97d 	bl	8000bb8 <HAL_GPIO_Init>
  htim1.Instance = TIM1;
 80008be:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <main+0xf4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c0:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 80008c2:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 65535;
 80008c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80008cc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	e9cd 4402 	strd	r4, r4, [sp, #8]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 80008d8:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80008dc:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 65535;
 80008de:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e0:	f000 fd3a 	bl	8001358 <HAL_TIM_Base_Init>
 80008e4:	b108      	cbz	r0, 80008ea <main+0x8e>
 80008e6:	b672      	cpsid	i
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <main+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008ee:	4628      	mov	r0, r5
 80008f0:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f4:	f000 fda0 	bl	8001438 <HAL_TIM_ConfigClockSource>
 80008f8:	b108      	cbz	r0, 80008fe <main+0xa2>
 80008fa:	b672      	cpsid	i
  while (1)
 80008fc:	e7fe      	b.n	80008fc <main+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2200      	movs	r2, #0
 8000900:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000902:	4628      	mov	r0, r5
 8000904:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090a:	f000 fe3f 	bl	800158c <HAL_TIMEx_MasterConfigSynchronization>
 800090e:	b108      	cbz	r0, 8000914 <main+0xb8>
 8000910:	b672      	cpsid	i
  while (1)
 8000912:	e7fe      	b.n	8000912 <main+0xb6>
  ascon_main();
 8000914:	f7ff fef6 	bl	8000704 <ascon_main>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000918:	4c0b      	ldr	r4, [pc, #44]	@ (8000948 <main+0xec>)
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000920:	4620      	mov	r0, r4
 8000922:	f000 fa65 	bl	8000df0 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 8000926:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800092a:	f000 f8cd 	bl	8000ac8 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800092e:	4620      	mov	r0, r4
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000936:	f000 fa5b 	bl	8000df0 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 800093a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800093e:	f000 f8c3 	bl	8000ac8 <HAL_Delay>
  while (1)
 8000942:	e7ea      	b.n	800091a <main+0xbe>
 8000944:	40021000 	.word	0x40021000
 8000948:	40011000 	.word	0x40011000
 800094c:	20000030 	.word	0x20000030
 8000950:	40012c00 	.word	0x40012c00

08000954 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <HAL_MspInit+0x3c>)
{
 8000956:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000958:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800095a:	490e      	ldr	r1, [pc, #56]	@ (8000994 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800095c:	f042 0201 	orr.w	r2, r2, #1
 8000960:	619a      	str	r2, [r3, #24]
 8000962:	699a      	ldr	r2, [r3, #24]
 8000964:	f002 0201 	and.w	r2, r2, #1
 8000968:	9200      	str	r2, [sp, #0]
 800096a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	69da      	ldr	r2, [r3, #28]
 800096e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000972:	61da      	str	r2, [r3, #28]
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097e:	684b      	ldr	r3, [r1, #4]
 8000980:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000984:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000988:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	b002      	add	sp, #8
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <HAL_TIM_Base_MspInit+0x28>)
 800099a:	6802      	ldr	r2, [r0, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d000      	beq.n	80009a2 <HAL_TIM_Base_MspInit+0xa>
 80009a0:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009a2:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80009a6:	699a      	ldr	r2, [r3, #24]
{
 80009a8:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80009ae:	619a      	str	r2, [r3, #24]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009ba:	b002      	add	sp, #8
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40012c00 	.word	0x40012c00

080009c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler>
 80009c6:	bf00      	nop

080009c8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <HardFault_Handler>
 80009ca:	bf00      	nop

080009cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler>
 80009ce:	bf00      	nop

080009d0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <BusFault_Handler>
 80009d2:	bf00      	nop

080009d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler>
 80009d6:	bf00      	nop

080009d8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop

080009e0 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 b85e 	b.w	8000aa4 <HAL_IncTick>

080009e8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff fffc 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009f2:	490c      	ldr	r1, [pc, #48]	@ (8000a24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a28 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a08:	4c09      	ldr	r4, [pc, #36]	@ (8000a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f000 fdf3 	bl	8001600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff ff1f 	bl	800085c <main>
  bx lr
 8000a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	080016e0 	.word	0x080016e0
  ldr r2, =_sbss
 8000a2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a30:	2000007c 	.word	0x2000007c

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <HAL_InitTick+0x3c>)
{
 8000a40:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a42:	7811      	ldrb	r1, [r2, #0]
 8000a44:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <HAL_InitTick+0x40>)
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	fbb2 f0f3 	udiv	r0, r2, r3
 8000a50:	f000 f89a 	bl	8000b88 <HAL_SYSTICK_Config>
 8000a54:	b908      	cbnz	r0, 8000a5a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	2d0f      	cmp	r5, #15
 8000a58:	d901      	bls.n	8000a5e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000a5a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
 8000a5e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	4602      	mov	r2, r0
 8000a62:	4629      	mov	r1, r5
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 f852 	bl	8000b10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <HAL_InitTick+0x44>)
 8000a6e:	4620      	mov	r0, r4
 8000a70:	601d      	str	r5, [r3, #0]
}
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	20000004 	.word	0x20000004
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008

08000a80 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <HAL_Init+0x20>)
{
 8000a82:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a86:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8e:	f000 f82d 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f7ff ffd0 	bl	8000a38 <HAL_InitTick>
  HAL_MspInit();
 8000a98:	f7ff ff5c 	bl	8000954 <HAL_MspInit>
}
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	bd08      	pop	{r3, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aa4:	4a03      	ldr	r2, [pc, #12]	@ (8000ab4 <HAL_IncTick+0x10>)
 8000aa6:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <HAL_IncTick+0x14>)
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	440b      	add	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000078 	.word	0x20000078
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000abc:	4b01      	ldr	r3, [pc, #4]	@ (8000ac4 <HAL_GetTick+0x8>)
 8000abe:	6818      	ldr	r0, [r3, #0]
}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000078 	.word	0x20000078

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff fff6 	bl	8000abc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000ad2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000ad4:	d002      	beq.n	8000adc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <HAL_Delay+0x20>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	1b40      	subs	r0, r0, r5
 8000ae2:	42a0      	cmp	r0, r4
 8000ae4:	d3fa      	bcc.n	8000adc <HAL_Delay+0x14>
  {
  }
}
 8000ae6:	bd38      	pop	{r3, r4, r5, pc}
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aec:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4906      	ldr	r1, [pc, #24]	@ (8000b0c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b08:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b500      	push	{lr}
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1a:	f1c3 0e07 	rsb	lr, r3, #7
 8000b1e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b26:	bf28      	it	cs
 8000b28:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2c:	f1bc 0f06 	cmp.w	ip, #6
 8000b30:	d91c      	bls.n	8000b6c <HAL_NVIC_SetPriority+0x5c>
 8000b32:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b3a:	fa03 f30c 	lsl.w	r3, r3, ip
 8000b3e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b46:	fa03 f30e 	lsl.w	r3, r3, lr
 8000b4a:	ea21 0303 	bic.w	r3, r1, r3
 8000b4e:	fa03 f30c 	lsl.w	r3, r3, ip
 8000b52:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000b56:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	db0a      	blt.n	8000b72 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000b60:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000b64:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b6c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	4694      	mov	ip, r2
 8000b70:	e7e7      	b.n	8000b42 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_NVIC_SetPriority+0x74>)
 8000b74:	f000 000f 	and.w	r0, r0, #15
 8000b78:	4402      	add	r2, r0
 8000b7a:	7613      	strb	r3, [r2, #24]
 8000b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	e000ecfc 	.word	0xe000ecfc

08000b88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	3801      	subs	r0, #1
 8000b8a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b8e:	d301      	bcc.n	8000b94 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b90:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b92:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	2107      	movs	r1, #7
{
 8000ba0:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	4c04      	ldr	r4, [pc, #16]	@ (8000bb4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000baa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	619a      	str	r2, [r3, #24]
}
 8000bae:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb0:	6119      	str	r1, [r3, #16]
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bbc:	680d      	ldr	r5, [r1, #0]
{
 8000bbe:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	f000 80c3 	beq.w	8000d4c <HAL_GPIO_Init+0x194>
 8000bc6:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc8:	4e80      	ldr	r6, [pc, #512]	@ (8000dcc <HAL_GPIO_Init+0x214>)
  uint32_t config = 0x00u;
 8000bca:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000bcc:	4613      	mov	r3, r2
      switch (GPIO_Init->Mode)
 8000bce:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 8000dd0 <HAL_GPIO_Init+0x218>
 8000bd2:	4f80      	ldr	r7, [pc, #512]	@ (8000dd4 <HAL_GPIO_Init+0x21c>)
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x2c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000bd6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd8:	fa35 f403 	lsrs.w	r4, r5, r3
 8000bdc:	f102 0204 	add.w	r2, r2, #4
 8000be0:	f000 80b4 	beq.w	8000d4c <HAL_GPIO_Init+0x194>
    ioposition = (0x01uL << position);
 8000be4:	2401      	movs	r4, #1
 8000be6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8000be8:	ea34 0e05 	bics.w	lr, r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bec:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8000bf0:	d1f1      	bne.n	8000bd6 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8000bf2:	684d      	ldr	r5, [r1, #4]
 8000bf4:	2d12      	cmp	r5, #18
 8000bf6:	f200 80ac 	bhi.w	8000d52 <HAL_GPIO_Init+0x19a>
 8000bfa:	2d12      	cmp	r5, #18
 8000bfc:	d81a      	bhi.n	8000c34 <HAL_GPIO_Init+0x7c>
 8000bfe:	e8df f005 	tbb	[pc, r5]
 8000c02:	c5b3      	.short	0xc5b3
 8000c04:	1919ccc1 	.word	0x1919ccc1
 8000c08:	19191919 	.word	0x19191919
 8000c0c:	19191919 	.word	0x19191919
 8000c10:	bd191919 	.word	0xbd191919
 8000c14:	c8          	.byte	0xc8
 8000c15:	00          	.byte	0x00
 8000c16:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 8000dd8 <HAL_GPIO_Init+0x220>
 8000c1a:	4575      	cmp	r5, lr
 8000c1c:	f000 80a4 	beq.w	8000d68 <HAL_GPIO_Init+0x1b0>
 8000c20:	f50e 2e70 	add.w	lr, lr, #983040	@ 0xf0000
 8000c24:	4575      	cmp	r5, lr
 8000c26:	f000 809f 	beq.w	8000d68 <HAL_GPIO_Init+0x1b0>
 8000c2a:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8000c2e:	4575      	cmp	r5, lr
 8000c30:	f000 809a 	beq.w	8000d68 <HAL_GPIO_Init+0x1b0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c34:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8000c38:	bf9c      	itt	ls
 8000c3a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c3c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c3e:	f04f 050f 	mov.w	r5, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c42:	bf84      	itt	hi
 8000c44:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c48:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c4c:	f8de 4000 	ldr.w	r4, [lr]
 8000c50:	fa0a f90b 	lsl.w	r9, sl, fp
 8000c54:	fa05 fb0b 	lsl.w	fp, r5, fp
 8000c58:	ea24 040b 	bic.w	r4, r4, fp
 8000c5c:	ea44 0409 	orr.w	r4, r4, r9
 8000c60:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c64:	684c      	ldr	r4, [r1, #4]
 8000c66:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8000c6a:	f000 8085 	beq.w	8000d78 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6e:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c72:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c76:	f04e 0e01 	orr.w	lr, lr, #1
 8000c7a:	f8c6 e018 	str.w	lr, [r6, #24]
 8000c7e:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c82:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	f00e 0e01 	and.w	lr, lr, #1
 8000c8a:	f8cd e004 	str.w	lr, [sp, #4]
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000c92:	f023 0e03 	bic.w	lr, r3, #3
 8000c96:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 8000c9a:	f50e 3e80 	add.w	lr, lr, #65536	@ 0x10000
 8000c9e:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ca2:	fa05 f509 	lsl.w	r5, r5, r9
 8000ca6:	ea2b 0505 	bic.w	r5, fp, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000caa:	f8df b130 	ldr.w	fp, [pc, #304]	@ 8000ddc <HAL_GPIO_Init+0x224>
 8000cae:	4558      	cmp	r0, fp
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0x122>
 8000cb2:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 8000cb6:	4558      	cmp	r0, fp
 8000cb8:	d079      	beq.n	8000dae <HAL_GPIO_Init+0x1f6>
 8000cba:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8000de0 <HAL_GPIO_Init+0x228>
 8000cbe:	4558      	cmp	r0, fp
 8000cc0:	d06e      	beq.n	8000da0 <HAL_GPIO_Init+0x1e8>
 8000cc2:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8000de4 <HAL_GPIO_Init+0x22c>
 8000cc6:	4558      	cmp	r0, fp
 8000cc8:	bf0c      	ite	eq
 8000cca:	f04f 0b03 	moveq.w	fp, #3
 8000cce:	f04f 0b04 	movne.w	fp, #4
 8000cd2:	fa0b f909 	lsl.w	r9, fp, r9
 8000cd6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000cda:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cde:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8000de8 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce2:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce6:	f8de 5008 	ldr.w	r5, [lr, #8]
 8000cea:	bf14      	ite	ne
 8000cec:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf0:	ea25 050c 	biceq.w	r5, r5, ip
 8000cf4:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf8:	f8df e0ec 	ldr.w	lr, [pc, #236]	@ 8000de8 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfc:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d00:	f8de 500c 	ldr.w	r5, [lr, #12]
 8000d04:	bf14      	ite	ne
 8000d06:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d0a:	ea25 050c 	biceq.w	r5, r5, ip
 8000d0e:	f8ce 500c 	str.w	r5, [lr, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000d12:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8000de8 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d16:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000d1a:	f8de 5004 	ldr.w	r5, [lr, #4]
 8000d1e:	bf14      	ite	ne
 8000d20:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d24:	ea25 050c 	biceq.w	r5, r5, ip
 8000d28:	f8ce 5004 	str.w	r5, [lr, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2c:	4d2e      	ldr	r5, [pc, #184]	@ (8000de8 <HAL_GPIO_Init+0x230>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d2e:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000d32:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d34:	d01d      	beq.n	8000d72 <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->IMR, iocurrent);
 8000d36:	ea44 040c 	orr.w	r4, r4, ip
 8000d3a:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3c:	680d      	ldr	r5, [r1, #0]
	position++;
 8000d3e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d40:	fa35 f403 	lsrs.w	r4, r5, r3
 8000d44:	f102 0204 	add.w	r2, r2, #4
 8000d48:	f47f af4c 	bne.w	8000be4 <HAL_GPIO_Init+0x2c>
  }
}
 8000d4c:	b003      	add	sp, #12
 8000d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000d52:	4545      	cmp	r5, r8
 8000d54:	d008      	beq.n	8000d68 <HAL_GPIO_Init+0x1b0>
 8000d56:	f67f af5e 	bls.w	8000c16 <HAL_GPIO_Init+0x5e>
 8000d5a:	42bd      	cmp	r5, r7
 8000d5c:	d004      	beq.n	8000d68 <HAL_GPIO_Init+0x1b0>
 8000d5e:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 8000dec <HAL_GPIO_Init+0x234>
 8000d62:	4575      	cmp	r5, lr
 8000d64:	f47f af66 	bne.w	8000c34 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d68:	688d      	ldr	r5, [r1, #8]
 8000d6a:	bb3d      	cbnz	r5, 8000dbc <HAL_GPIO_Init+0x204>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6c:	f04f 0a04 	mov.w	sl, #4
 8000d70:	e760      	b.n	8000c34 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d72:	ea24 040c 	bic.w	r4, r4, ip
 8000d76:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d78:	680d      	ldr	r5, [r1, #0]
 8000d7a:	e72c      	b.n	8000bd6 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d7c:	68cc      	ldr	r4, [r1, #12]
 8000d7e:	f104 0a04 	add.w	sl, r4, #4
          break;
 8000d82:	e757      	b.n	8000c34 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d84:	68cc      	ldr	r4, [r1, #12]
 8000d86:	f104 0a08 	add.w	sl, r4, #8
          break;
 8000d8a:	e753      	b.n	8000c34 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d8c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000d90:	e750      	b.n	8000c34 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d92:	68cc      	ldr	r4, [r1, #12]
 8000d94:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8000d98:	e74c      	b.n	8000c34 <HAL_GPIO_Init+0x7c>
      switch (GPIO_Init->Mode)
 8000d9a:	f04f 0a00 	mov.w	sl, #0
 8000d9e:	e749      	b.n	8000c34 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da0:	f04f 0b02 	mov.w	fp, #2
 8000da4:	fa0b f909 	lsl.w	r9, fp, r9
 8000da8:	ea45 0509 	orr.w	r5, r5, r9
 8000dac:	e795      	b.n	8000cda <HAL_GPIO_Init+0x122>
 8000dae:	f04f 0b01 	mov.w	fp, #1
 8000db2:	fa0b f909 	lsl.w	r9, fp, r9
 8000db6:	ea45 0509 	orr.w	r5, r5, r9
 8000dba:	e78e      	b.n	8000cda <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dbc:	2d01      	cmp	r5, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dbe:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000dc2:	bf0c      	ite	eq
 8000dc4:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8000dc6:	6144      	strne	r4, [r0, #20]
 8000dc8:	e734      	b.n	8000c34 <HAL_GPIO_Init+0x7c>
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	10220000 	.word	0x10220000
 8000dd4:	10310000 	.word	0x10310000
 8000dd8:	10120000 	.word	0x10120000
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40011400 	.word	0x40011400
 8000de8:	40010400 	.word	0x40010400
 8000dec:	10320000 	.word	0x10320000

08000df0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df0:	b902      	cbnz	r2, 8000df4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000df2:	0409      	lsls	r1, r1, #16
 8000df4:	6101      	str	r1, [r0, #16]
  }
}
 8000df6:	4770      	bx	lr

08000df8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	f000 81e4 	beq.w	80011c6 <HAL_RCC_OscConfig+0x3ce>
{
 8000dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e02:	6803      	ldr	r3, [r0, #0]
 8000e04:	4604      	mov	r4, r0
 8000e06:	07dd      	lsls	r5, r3, #31
{
 8000e08:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0a:	d535      	bpl.n	8000e78 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e0c:	4999      	ldr	r1, [pc, #612]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000e0e:	684a      	ldr	r2, [r1, #4]
 8000e10:	f002 020c 	and.w	r2, r2, #12
 8000e14:	2a04      	cmp	r2, #4
 8000e16:	f000 80ed 	beq.w	8000ff4 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e1a:	684a      	ldr	r2, [r1, #4]
 8000e1c:	f002 020c 	and.w	r2, r2, #12
 8000e20:	2a08      	cmp	r2, #8
 8000e22:	f000 80e3 	beq.w	8000fec <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e26:	6863      	ldr	r3, [r4, #4]
 8000e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e2c:	d010      	beq.n	8000e50 <HAL_RCC_OscConfig+0x58>
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 810a 	beq.w	8001048 <HAL_RCC_OscConfig+0x250>
 8000e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e38:	f000 8180 	beq.w	800113c <HAL_RCC_OscConfig+0x344>
 8000e3c:	4b8d      	ldr	r3, [pc, #564]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000e4c:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4e:	e004      	b.n	8000e5a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e50:	4a88      	ldr	r2, [pc, #544]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000e52:	6813      	ldr	r3, [r2, #0]
 8000e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fe2f 	bl	8000abc <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	4e85      	ldr	r6, [pc, #532]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8000e60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	e005      	b.n	8000e70 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fe2a 	bl	8000abc <HAL_GetTick>
 8000e68:	1b40      	subs	r0, r0, r5
 8000e6a:	2864      	cmp	r0, #100	@ 0x64
 8000e6c:	f200 80e8 	bhi.w	8001040 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e70:	6833      	ldr	r3, [r6, #0]
 8000e72:	039a      	lsls	r2, r3, #14
 8000e74:	d5f6      	bpl.n	8000e64 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	079f      	lsls	r7, r3, #30
 8000e7a:	d528      	bpl.n	8000ece <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e7c:	4a7d      	ldr	r2, [pc, #500]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000e7e:	6851      	ldr	r1, [r2, #4]
 8000e80:	f011 0f0c 	tst.w	r1, #12
 8000e84:	f000 8096 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e88:	6851      	ldr	r1, [r2, #4]
 8000e8a:	f001 010c 	and.w	r1, r1, #12
 8000e8e:	2908      	cmp	r1, #8
 8000e90:	f000 808c 	beq.w	8000fac <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e94:	6923      	ldr	r3, [r4, #16]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8116 	beq.w	80010c8 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4b76      	ldr	r3, [pc, #472]	@ (8001078 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	4e74      	ldr	r6, [pc, #464]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 8000ea2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fe0a 	bl	8000abc <HAL_GetTick>
 8000ea8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eaa:	e005      	b.n	8000eb8 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eac:	f7ff fe06 	bl	8000abc <HAL_GetTick>
 8000eb0:	1b40      	subs	r0, r0, r5
 8000eb2:	2802      	cmp	r0, #2
 8000eb4:	f200 80c4 	bhi.w	8001040 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb8:	6833      	ldr	r3, [r6, #0]
 8000eba:	0798      	lsls	r0, r3, #30
 8000ebc:	d5f6      	bpl.n	8000eac <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebe:	6833      	ldr	r3, [r6, #0]
 8000ec0:	6962      	ldr	r2, [r4, #20]
 8000ec2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000ec6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000eca:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	071a      	lsls	r2, r3, #28
 8000ed0:	d429      	bmi.n	8000f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed2:	075d      	lsls	r5, r3, #29
 8000ed4:	d54b      	bpl.n	8000f6e <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed6:	4b67      	ldr	r3, [pc, #412]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	00d0      	lsls	r0, r2, #3
 8000edc:	f100 8084 	bmi.w	8000fe8 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000ee0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ee8:	61da      	str	r2, [r3, #28]
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef4:	4e61      	ldr	r6, [pc, #388]	@ (800107c <HAL_RCC_OscConfig+0x284>)
 8000ef6:	6833      	ldr	r3, [r6, #0]
 8000ef8:	05d9      	lsls	r1, r3, #23
 8000efa:	f140 8091 	bpl.w	8001020 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efe:	68e3      	ldr	r3, [r4, #12]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	f000 80f2 	beq.w	80010ea <HAL_RCC_OscConfig+0x2f2>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 80be 	beq.w	8001088 <HAL_RCC_OscConfig+0x290>
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	4b59      	ldr	r3, [pc, #356]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	f000 8120 	beq.w	8001156 <HAL_RCC_OscConfig+0x35e>
 8000f16:	f022 0201 	bic.w	r2, r2, #1
 8000f1a:	621a      	str	r2, [r3, #32]
 8000f1c:	6a1a      	ldr	r2, [r3, #32]
 8000f1e:	f022 0204 	bic.w	r2, r2, #4
 8000f22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f24:	e0e6      	b.n	80010f4 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f26:	69a3      	ldr	r3, [r4, #24]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d04c      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4b52      	ldr	r3, [pc, #328]	@ (8001078 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f30:	4e50      	ldr	r6, [pc, #320]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 8000f32:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000f36:	f7ff fdc1 	bl	8000abc <HAL_GetTick>
 8000f3a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3c:	e004      	b.n	8000f48 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fdbd 	bl	8000abc <HAL_GetTick>
 8000f42:	1b40      	subs	r0, r0, r5
 8000f44:	2802      	cmp	r0, #2
 8000f46:	d87b      	bhi.n	8001040 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f48:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8000f4a:	079b      	lsls	r3, r3, #30
 8000f4c:	d5f7      	bpl.n	8000f3e <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001080 <HAL_RCC_OscConfig+0x288>)
 8000f50:	4a4c      	ldr	r2, [pc, #304]	@ (8001084 <HAL_RCC_OscConfig+0x28c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	0a5b      	lsrs	r3, r3, #9
 8000f5a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f5c:	bf00      	nop
  }
  while (Delay --);
 8000f5e:	9b01      	ldr	r3, [sp, #4]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	9201      	str	r2, [sp, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f9      	bne.n	8000f5c <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	075d      	lsls	r5, r3, #29
 8000f6c:	d4b3      	bmi.n	8000ed6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6e:	69e3      	ldr	r3, [r4, #28]
 8000f70:	b1c3      	cbz	r3, 8000fa4 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f72:	4d40      	ldr	r5, [pc, #256]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000f74:	686a      	ldr	r2, [r5, #4]
 8000f76:	f002 020c 	and.w	r2, r2, #12
 8000f7a:	2a08      	cmp	r2, #8
 8000f7c:	f000 80cd 	beq.w	800111a <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8000f80:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f82:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000f84:	4b3c      	ldr	r3, [pc, #240]	@ (8001078 <HAL_RCC_OscConfig+0x280>)
 8000f86:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f88:	f000 80ed 	beq.w	8001166 <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fd96 	bl	8000abc <HAL_GetTick>
 8000f90:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f92:	e004      	b.n	8000f9e <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f94:	f7ff fd92 	bl	8000abc <HAL_GetTick>
 8000f98:	1b00      	subs	r0, r0, r4
 8000f9a:	2802      	cmp	r0, #2
 8000f9c:	d850      	bhi.n	8001040 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9e:	682b      	ldr	r3, [r5, #0]
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	d4f7      	bmi.n	8000f94 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 8000fa4:	2000      	movs	r0, #0
}
 8000fa6:	b002      	add	sp, #8
 8000fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fac:	6852      	ldr	r2, [r2, #4]
 8000fae:	03d6      	lsls	r6, r2, #15
 8000fb0:	f53f af70 	bmi.w	8000e94 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	0795      	lsls	r5, r2, #30
 8000fba:	d525      	bpl.n	8001008 <HAL_RCC_OscConfig+0x210>
 8000fbc:	6922      	ldr	r2, [r4, #16]
 8000fbe:	2a01      	cmp	r2, #1
 8000fc0:	d022      	beq.n	8001008 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	e7ef      	b.n	8000fa6 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 8000fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8001078 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	4e2a      	ldr	r6, [pc, #168]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8000fca:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000fce:	f7ff fd75 	bl	8000abc <HAL_GetTick>
 8000fd2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd4:	e004      	b.n	8000fe0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fd71 	bl	8000abc <HAL_GetTick>
 8000fda:	1b40      	subs	r0, r0, r5
 8000fdc:	2802      	cmp	r0, #2
 8000fde:	d82f      	bhi.n	8001040 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8000fe2:	079f      	lsls	r7, r3, #30
 8000fe4:	d4f7      	bmi.n	8000fd6 <HAL_RCC_OscConfig+0x1de>
 8000fe6:	e7bf      	b.n	8000f68 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8000fe8:	2500      	movs	r5, #0
 8000fea:	e783      	b.n	8000ef4 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fec:	684a      	ldr	r2, [r1, #4]
 8000fee:	03d0      	lsls	r0, r2, #15
 8000ff0:	f57f af19 	bpl.w	8000e26 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	0391      	lsls	r1, r2, #14
 8000ffa:	f57f af3d 	bpl.w	8000e78 <HAL_RCC_OscConfig+0x80>
 8000ffe:	6862      	ldr	r2, [r4, #4]
 8001000:	2a00      	cmp	r2, #0
 8001002:	f47f af39 	bne.w	8000e78 <HAL_RCC_OscConfig+0x80>
 8001006:	e7dc      	b.n	8000fc2 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	491a      	ldr	r1, [pc, #104]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 800100a:	6960      	ldr	r0, [r4, #20]
 800100c:	680a      	ldr	r2, [r1, #0]
 800100e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001012:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001016:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001018:	071a      	lsls	r2, r3, #28
 800101a:	f57f af5a 	bpl.w	8000ed2 <HAL_RCC_OscConfig+0xda>
 800101e:	e782      	b.n	8000f26 <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001020:	6833      	ldr	r3, [r6, #0]
 8001022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001026:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001028:	f7ff fd48 	bl	8000abc <HAL_GetTick>
 800102c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102e:	6833      	ldr	r3, [r6, #0]
 8001030:	05da      	lsls	r2, r3, #23
 8001032:	f53f af64 	bmi.w	8000efe <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001036:	f7ff fd41 	bl	8000abc <HAL_GetTick>
 800103a:	1bc0      	subs	r0, r0, r7
 800103c:	2864      	cmp	r0, #100	@ 0x64
 800103e:	d9f6      	bls.n	800102e <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8001040:	2003      	movs	r0, #3
}
 8001042:	b002      	add	sp, #8
 8001044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001048:	4d0a      	ldr	r5, [pc, #40]	@ (8001074 <HAL_RCC_OscConfig+0x27c>)
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001050:	602b      	str	r3, [r5, #0]
 8001052:	682b      	ldr	r3, [r5, #0]
 8001054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001058:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800105a:	f7ff fd2f 	bl	8000abc <HAL_GetTick>
 800105e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001060:	e004      	b.n	800106c <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001062:	f7ff fd2b 	bl	8000abc <HAL_GetTick>
 8001066:	1b80      	subs	r0, r0, r6
 8001068:	2864      	cmp	r0, #100	@ 0x64
 800106a:	d8e9      	bhi.n	8001040 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	039b      	lsls	r3, r3, #14
 8001070:	d4f7      	bmi.n	8001062 <HAL_RCC_OscConfig+0x26a>
 8001072:	e700      	b.n	8000e76 <HAL_RCC_OscConfig+0x7e>
 8001074:	40021000 	.word	0x40021000
 8001078:	42420000 	.word	0x42420000
 800107c:	40007000 	.word	0x40007000
 8001080:	20000000 	.word	0x20000000
 8001084:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001088:	4e50      	ldr	r6, [pc, #320]	@ (80011cc <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108e:	6a33      	ldr	r3, [r6, #32]
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	6233      	str	r3, [r6, #32]
 8001096:	6a33      	ldr	r3, [r6, #32]
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800109e:	f7ff fd0d 	bl	8000abc <HAL_GetTick>
 80010a2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a4:	e004      	b.n	80010b0 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f7ff fd09 	bl	8000abc <HAL_GetTick>
 80010aa:	1bc0      	subs	r0, r0, r7
 80010ac:	4540      	cmp	r0, r8
 80010ae:	d8c7      	bhi.n	8001040 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b0:	6a33      	ldr	r3, [r6, #32]
 80010b2:	0798      	lsls	r0, r3, #30
 80010b4:	d4f7      	bmi.n	80010a6 <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 80010b6:	2d00      	cmp	r5, #0
 80010b8:	f43f af59 	beq.w	8000f6e <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010bc:	4a43      	ldr	r2, [pc, #268]	@ (80011cc <HAL_RCC_OscConfig+0x3d4>)
 80010be:	69d3      	ldr	r3, [r2, #28]
 80010c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	e752      	b.n	8000f6e <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 80010c8:	4a41      	ldr	r2, [pc, #260]	@ (80011d0 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ca:	4e40      	ldr	r6, [pc, #256]	@ (80011cc <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 80010cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010ce:	f7ff fcf5 	bl	8000abc <HAL_GetTick>
 80010d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d4:	e004      	b.n	80010e0 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d6:	f7ff fcf1 	bl	8000abc <HAL_GetTick>
 80010da:	1b40      	subs	r0, r0, r5
 80010dc:	2802      	cmp	r0, #2
 80010de:	d8af      	bhi.n	8001040 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e0:	6833      	ldr	r3, [r6, #0]
 80010e2:	0799      	lsls	r1, r3, #30
 80010e4:	d4f7      	bmi.n	80010d6 <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	e6f1      	b.n	8000ece <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ea:	4a38      	ldr	r2, [pc, #224]	@ (80011cc <HAL_RCC_OscConfig+0x3d4>)
 80010ec:	6a13      	ldr	r3, [r2, #32]
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80010f4:	f7ff fce2 	bl	8000abc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80010fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fe:	4f33      	ldr	r7, [pc, #204]	@ (80011cc <HAL_RCC_OscConfig+0x3d4>)
 8001100:	e004      	b.n	800110c <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001102:	f7ff fcdb 	bl	8000abc <HAL_GetTick>
 8001106:	1b80      	subs	r0, r0, r6
 8001108:	4540      	cmp	r0, r8
 800110a:	d899      	bhi.n	8001040 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	079b      	lsls	r3, r3, #30
 8001110:	d5f7      	bpl.n	8001102 <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 8001112:	2d00      	cmp	r5, #0
 8001114:	f43f af2b 	beq.w	8000f6e <HAL_RCC_OscConfig+0x176>
 8001118:	e7d0      	b.n	80010bc <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800111a:	2b01      	cmp	r3, #1
 800111c:	f43f af51 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8001120:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001122:	6a22      	ldr	r2, [r4, #32]
 8001124:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8001128:	4291      	cmp	r1, r2
 800112a:	f47f af4a 	bne.w	8000fc2 <HAL_RCC_OscConfig+0x1ca>
 800112e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001130:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001134:	1a18      	subs	r0, r3, r0
 8001136:	bf18      	it	ne
 8001138:	2001      	movne	r0, #1
 800113a:	e734      	b.n	8000fa6 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001140:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001152:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001154:	e681      	b.n	8000e5a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001156:	f042 0204 	orr.w	r2, r2, #4
 800115a:	621a      	str	r2, [r3, #32]
 800115c:	6a1a      	ldr	r2, [r3, #32]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001164:	e7c6      	b.n	80010f4 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 8001166:	f7ff fca9 	bl	8000abc <HAL_GetTick>
 800116a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	e005      	b.n	800117a <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116e:	f7ff fca5 	bl	8000abc <HAL_GetTick>
 8001172:	1b80      	subs	r0, r0, r6
 8001174:	2802      	cmp	r0, #2
 8001176:	f63f af63 	bhi.w	8001040 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117a:	682b      	ldr	r3, [r5, #0]
 800117c:	0199      	lsls	r1, r3, #6
 800117e:	d4f6      	bmi.n	800116e <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001180:	6a23      	ldr	r3, [r4, #32]
 8001182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001186:	d105      	bne.n	8001194 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001188:	686a      	ldr	r2, [r5, #4]
 800118a:	68a1      	ldr	r1, [r4, #8]
 800118c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001190:	430a      	orrs	r2, r1
 8001192:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001194:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001196:	4d0d      	ldr	r5, [pc, #52]	@ (80011cc <HAL_RCC_OscConfig+0x3d4>)
 8001198:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800119a:	686a      	ldr	r2, [r5, #4]
 800119c:	430b      	orrs	r3, r1
 800119e:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80011a2:	490b      	ldr	r1, [pc, #44]	@ (80011d0 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a4:	4313      	orrs	r3, r2
 80011a6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011a8:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80011aa:	f7ff fc87 	bl	8000abc <HAL_GetTick>
 80011ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b0:	e005      	b.n	80011be <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b2:	f7ff fc83 	bl	8000abc <HAL_GetTick>
 80011b6:	1b00      	subs	r0, r0, r4
 80011b8:	2802      	cmp	r0, #2
 80011ba:	f63f af41 	bhi.w	8001040 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	019a      	lsls	r2, r3, #6
 80011c2:	d5f6      	bpl.n	80011b2 <HAL_RCC_OscConfig+0x3ba>
 80011c4:	e6ee      	b.n	8000fa4 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 80011c6:	2001      	movs	r0, #1
}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	42420000 	.word	0x42420000

080011d4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f000 80a1 	beq.w	800131c <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011da:	4a56      	ldr	r2, [pc, #344]	@ (8001334 <HAL_RCC_ClockConfig+0x160>)
{
 80011dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	4604      	mov	r4, r0
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	428b      	cmp	r3, r1
 80011ea:	460d      	mov	r5, r1
 80011ec:	d20c      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	f023 0307 	bic.w	r3, r3, #7
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f8:	6813      	ldr	r3, [r2, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	428b      	cmp	r3, r1
 8001200:	d002      	beq.n	8001208 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
}
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	079e      	lsls	r6, r3, #30
 800120c:	d514      	bpl.n	8001238 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120e:	0758      	lsls	r0, r3, #29
 8001210:	d504      	bpl.n	800121c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001212:	4949      	ldr	r1, [pc, #292]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
 8001214:	684a      	ldr	r2, [r1, #4]
 8001216:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800121a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121c:	0719      	lsls	r1, r3, #28
 800121e:	d504      	bpl.n	800122a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001220:	4945      	ldr	r1, [pc, #276]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
 8001222:	684a      	ldr	r2, [r1, #4]
 8001224:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8001228:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122a:	4943      	ldr	r1, [pc, #268]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
 800122c:	68a0      	ldr	r0, [r4, #8]
 800122e:	684a      	ldr	r2, [r1, #4]
 8001230:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001234:	4302      	orrs	r2, r0
 8001236:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001238:	07da      	lsls	r2, r3, #31
 800123a:	d520      	bpl.n	800127e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001240:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001244:	d06c      	beq.n	8001320 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001246:	2a02      	cmp	r2, #2
 8001248:	d065      	beq.n	8001316 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124a:	079e      	lsls	r6, r3, #30
 800124c:	d5d9      	bpl.n	8001202 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124e:	4e3a      	ldr	r6, [pc, #232]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001254:	6873      	ldr	r3, [r6, #4]
 8001256:	f023 0303 	bic.w	r3, r3, #3
 800125a:	4313      	orrs	r3, r2
 800125c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800125e:	f7ff fc2d 	bl	8000abc <HAL_GetTick>
 8001262:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001264:	e004      	b.n	8001270 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001266:	f7ff fc29 	bl	8000abc <HAL_GetTick>
 800126a:	1bc0      	subs	r0, r0, r7
 800126c:	4540      	cmp	r0, r8
 800126e:	d85a      	bhi.n	8001326 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001270:	6873      	ldr	r3, [r6, #4]
 8001272:	6862      	ldr	r2, [r4, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800127c:	d1f3      	bne.n	8001266 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800127e:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <HAL_RCC_ClockConfig+0x160>)
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	42ab      	cmp	r3, r5
 8001288:	d909      	bls.n	800129e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	f023 0307 	bic.w	r3, r3, #7
 8001290:	432b      	orrs	r3, r5
 8001292:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	42ab      	cmp	r3, r5
 800129c:	d1b1      	bne.n	8001202 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	0758      	lsls	r0, r3, #29
 80012a2:	d506      	bpl.n	80012b2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a4:	4924      	ldr	r1, [pc, #144]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
 80012a6:	68e0      	ldr	r0, [r4, #12]
 80012a8:	684a      	ldr	r2, [r1, #4]
 80012aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80012ae:	4302      	orrs	r2, r0
 80012b0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b2:	0719      	lsls	r1, r3, #28
 80012b4:	d507      	bpl.n	80012c6 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b6:	4a20      	ldr	r2, [pc, #128]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
 80012b8:	6921      	ldr	r1, [r4, #16]
 80012ba:	6853      	ldr	r3, [r2, #4]
 80012bc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80012c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012c4:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 80012c6:	491c      	ldr	r1, [pc, #112]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
 80012c8:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80012ca:	f002 030c 	and.w	r3, r2, #12
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d010      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <HAL_RCC_ClockConfig+0x164>)
 80012d6:	481a      	ldr	r0, [pc, #104]	@ (8001340 <HAL_RCC_ClockConfig+0x16c>)
 80012d8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80012da:	491a      	ldr	r1, [pc, #104]	@ (8001344 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012dc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80012e0:	5c80      	ldrb	r0, [r0, r2]
 80012e2:	4a19      	ldr	r2, [pc, #100]	@ (8001348 <HAL_RCC_ClockConfig+0x174>)
 80012e4:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80012e6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012e8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80012ea:	f7ff fba5 	bl	8000a38 <HAL_InitTick>
  return HAL_OK;
 80012ee:	2000      	movs	r0, #0
}
 80012f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012f4:	4815      	ldr	r0, [pc, #84]	@ (800134c <HAL_RCC_ClockConfig+0x178>)
 80012f6:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012fa:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012fc:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012fe:	d514      	bpl.n	800132a <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001300:	480e      	ldr	r0, [pc, #56]	@ (800133c <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001302:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001304:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001308:	4911      	ldr	r1, [pc, #68]	@ (8001350 <HAL_RCC_ClockConfig+0x17c>)
 800130a:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800130e:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001310:	fbb3 f3f2 	udiv	r3, r3, r2
 8001314:	e7de      	b.n	80012d4 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001316:	019f      	lsls	r7, r3, #6
 8001318:	d499      	bmi.n	800124e <HAL_RCC_ClockConfig+0x7a>
 800131a:	e772      	b.n	8001202 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800131c:	2001      	movs	r0, #1
}
 800131e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001320:	039b      	lsls	r3, r3, #14
 8001322:	d494      	bmi.n	800124e <HAL_RCC_ClockConfig+0x7a>
 8001324:	e76d      	b.n	8001202 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001326:	2003      	movs	r0, #3
 8001328:	e76c      	b.n	8001204 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <HAL_RCC_ClockConfig+0x180>)
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	e7d0      	b.n	80012d4 <HAL_RCC_ClockConfig+0x100>
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000
 8001338:	40021000 	.word	0x40021000
 800133c:	007a1200 	.word	0x007a1200
 8001340:	080016b4 	.word	0x080016b4
 8001344:	20000008 	.word	0x20000008
 8001348:	20000000 	.word	0x20000000
 800134c:	080016c8 	.word	0x080016c8
 8001350:	080016c4 	.word	0x080016c4
 8001354:	003d0900 	.word	0x003d0900

08001358 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001358:	2800      	cmp	r0, #0
 800135a:	d068      	beq.n	800142e <HAL_TIM_Base_Init+0xd6>
{
 800135c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800135e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001362:	4604      	mov	r4, r0
 8001364:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001368:	2b00      	cmp	r3, #0
 800136a:	d04a      	beq.n	8001402 <HAL_TIM_Base_Init+0xaa>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800136c:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001370:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001372:	4e30      	ldr	r6, [pc, #192]	@ (8001434 <HAL_TIM_Base_Init+0xdc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001374:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001378:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800137a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800137c:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 800137e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001380:	d044      	beq.n	800140c <HAL_TIM_Base_Init+0xb4>
 8001382:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001386:	d00e      	beq.n	80013a6 <HAL_TIM_Base_Init+0x4e>
 8001388:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800138c:	42b2      	cmp	r2, r6
 800138e:	d00a      	beq.n	80013a6 <HAL_TIM_Base_Init+0x4e>
 8001390:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001394:	42b2      	cmp	r2, r6
 8001396:	d006      	beq.n	80013a6 <HAL_TIM_Base_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800139c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800139e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013a0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80013a2:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013a4:	e00d      	b.n	80013c2 <HAL_TIM_Base_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80013a6:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80013ac:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013ae:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80013b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013b4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013ba:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 80013bc:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013be:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80013c0:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013c2:	2301      	movs	r3, #1
 80013c4:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80013c6:	6913      	ldr	r3, [r2, #16]
 80013c8:	07db      	lsls	r3, r3, #31
 80013ca:	d503      	bpl.n	80013d4 <HAL_TIM_Base_Init+0x7c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80013cc:	6913      	ldr	r3, [r2, #16]
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013da:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80013de:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80013e2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80013e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013ea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80013ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80013f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80013fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80013fe:	2000      	movs	r0, #0
}
 8001400:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001402:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001406:	f7ff fac7 	bl	8000998 <HAL_TIM_Base_MspInit>
 800140a:	e7af      	b.n	800136c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800140c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800140e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001412:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001414:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800141a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800141c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001420:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001422:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001424:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001426:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001428:	6963      	ldr	r3, [r4, #20]
 800142a:	6313      	str	r3, [r2, #48]	@ 0x30
 800142c:	e7c9      	b.n	80013c2 <HAL_TIM_Base_Init+0x6a>
    return HAL_ERROR;
 800142e:	2001      	movs	r0, #1
}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40012c00 	.word	0x40012c00

08001438 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001438:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800143c:	2b01      	cmp	r3, #1
 800143e:	d071      	beq.n	8001524 <HAL_TIM_ConfigClockSource+0xec>
 8001440:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8001442:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8001444:	2001      	movs	r0, #1
{
 8001446:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8001448:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 800144a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800144e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001452:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001454:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001458:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800145c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800145e:	680b      	ldr	r3, [r1, #0]
 8001460:	2b60      	cmp	r3, #96	@ 0x60
 8001462:	d061      	beq.n	8001528 <HAL_TIM_ConfigClockSource+0xf0>
 8001464:	d824      	bhi.n	80014b0 <HAL_TIM_ConfigClockSource+0x78>
 8001466:	2b40      	cmp	r3, #64	@ 0x40
 8001468:	d077      	beq.n	800155a <HAL_TIM_ConfigClockSource+0x122>
 800146a:	d94a      	bls.n	8001502 <HAL_TIM_ConfigClockSource+0xca>
 800146c:	2b50      	cmp	r3, #80	@ 0x50
 800146e:	d117      	bne.n	80014a0 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8001470:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001472:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001474:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001476:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800147a:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800147c:	6a23      	ldr	r3, [r4, #32]
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001484:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800148a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800148e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001490:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001492:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001498:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800149c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80014a0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80014a2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80014a4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80014a8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80014ac:	bc30      	pop	{r4, r5}
 80014ae:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80014b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014b4:	d0f3      	beq.n	800149e <HAL_TIM_ConfigClockSource+0x66>
 80014b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014ba:	d110      	bne.n	80014de <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014bc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80014c0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014c2:	432b      	orrs	r3, r5
 80014c4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014c6:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80014ce:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80014d0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014d2:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80014d4:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014da:	60a3      	str	r3, [r4, #8]
      break;
 80014dc:	e7e0      	b.n	80014a0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80014de:	2b70      	cmp	r3, #112	@ 0x70
 80014e0:	d1de      	bne.n	80014a0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014e2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80014e6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014e8:	432b      	orrs	r3, r5
 80014ea:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014ec:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014f0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80014f4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80014f6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80014f8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014fa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80014fe:	60a3      	str	r3, [r4, #8]
      break;
 8001500:	e7cd      	b.n	800149e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001502:	2b20      	cmp	r3, #32
 8001504:	d002      	beq.n	800150c <HAL_TIM_ConfigClockSource+0xd4>
 8001506:	d909      	bls.n	800151c <HAL_TIM_ConfigClockSource+0xe4>
 8001508:	2b30      	cmp	r3, #48	@ 0x30
 800150a:	d1c9      	bne.n	80014a0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800150c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800150e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001512:	430b      	orrs	r3, r1
 8001514:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001518:	60a3      	str	r3, [r4, #8]
}
 800151a:	e7c0      	b.n	800149e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800151c:	f033 0110 	bics.w	r1, r3, #16
 8001520:	d1be      	bne.n	80014a0 <HAL_TIM_ConfigClockSource+0x68>
 8001522:	e7f3      	b.n	800150c <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8001524:	2002      	movs	r0, #2
}
 8001526:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8001528:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800152a:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800152c:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800152e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001530:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001534:	f021 0110 	bic.w	r1, r1, #16
 8001538:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800153a:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 800153c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001540:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001544:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001548:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800154a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800154c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800154e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001552:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8001556:	60a3      	str	r3, [r4, #8]
}
 8001558:	e7a1      	b.n	800149e <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 800155a:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800155c:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800155e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001560:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001564:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001566:	6a23      	ldr	r3, [r4, #32]
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800156e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001570:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001574:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001578:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800157a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800157c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800157e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001582:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8001586:	60a3      	str	r3, [r4, #8]
}
 8001588:	e789      	b.n	800149e <HAL_TIM_ConfigClockSource+0x66>
 800158a:	bf00      	nop

0800158c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800158c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001590:	2a01      	cmp	r2, #1
 8001592:	d027      	beq.n	80015e4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001594:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001596:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001598:	681a      	ldr	r2, [r3, #0]
{
 800159a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800159c:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80015a0:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80015a2:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015a4:	4d10      	ldr	r5, [pc, #64]	@ (80015e8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80015a6:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80015aa:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015ac:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80015ae:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 80015b0:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015b2:	d009      	beq.n	80015c8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80015b4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80015b8:	d006      	beq.n	80015c8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80015ba:	480c      	ldr	r0, [pc, #48]	@ (80015ec <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80015bc:	4282      	cmp	r2, r0
 80015be:	d003      	beq.n	80015c8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80015c0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80015c4:	4282      	cmp	r2, r0
 80015c6:	d104      	bne.n	80015d2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80015c8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80015ca:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80015ce:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80015d0:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80015d2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80015d4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80015da:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015de:	4610      	mov	r0, r2
}
 80015e0:	bc30      	pop	{r4, r5}
 80015e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80015e4:	2002      	movs	r0, #2
}
 80015e6:	4770      	bx	lr
 80015e8:	40012c00 	.word	0x40012c00
 80015ec:	40000400 	.word	0x40000400

080015f0 <memset>:
 80015f0:	4603      	mov	r3, r0
 80015f2:	4402      	add	r2, r0
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d100      	bne.n	80015fa <memset+0xa>
 80015f8:	4770      	bx	lr
 80015fa:	f803 1b01 	strb.w	r1, [r3], #1
 80015fe:	e7f9      	b.n	80015f4 <memset+0x4>

08001600 <__libc_init_array>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	2600      	movs	r6, #0
 8001604:	4d0c      	ldr	r5, [pc, #48]	@ (8001638 <__libc_init_array+0x38>)
 8001606:	4c0d      	ldr	r4, [pc, #52]	@ (800163c <__libc_init_array+0x3c>)
 8001608:	1b64      	subs	r4, r4, r5
 800160a:	10a4      	asrs	r4, r4, #2
 800160c:	42a6      	cmp	r6, r4
 800160e:	d109      	bne.n	8001624 <__libc_init_array+0x24>
 8001610:	f000 f828 	bl	8001664 <_init>
 8001614:	2600      	movs	r6, #0
 8001616:	4d0a      	ldr	r5, [pc, #40]	@ (8001640 <__libc_init_array+0x40>)
 8001618:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <__libc_init_array+0x44>)
 800161a:	1b64      	subs	r4, r4, r5
 800161c:	10a4      	asrs	r4, r4, #2
 800161e:	42a6      	cmp	r6, r4
 8001620:	d105      	bne.n	800162e <__libc_init_array+0x2e>
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	f855 3b04 	ldr.w	r3, [r5], #4
 8001628:	4798      	blx	r3
 800162a:	3601      	adds	r6, #1
 800162c:	e7ee      	b.n	800160c <__libc_init_array+0xc>
 800162e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001632:	4798      	blx	r3
 8001634:	3601      	adds	r6, #1
 8001636:	e7f2      	b.n	800161e <__libc_init_array+0x1e>
 8001638:	080016d8 	.word	0x080016d8
 800163c:	080016d8 	.word	0x080016d8
 8001640:	080016d8 	.word	0x080016d8
 8001644:	080016dc 	.word	0x080016dc

08001648 <memcpy>:
 8001648:	440a      	add	r2, r1
 800164a:	4291      	cmp	r1, r2
 800164c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001650:	d100      	bne.n	8001654 <memcpy+0xc>
 8001652:	4770      	bx	lr
 8001654:	b510      	push	{r4, lr}
 8001656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800165a:	4291      	cmp	r1, r2
 800165c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001660:	d1f9      	bne.n	8001656 <memcpy+0xe>
 8001662:	bd10      	pop	{r4, pc}

08001664 <_init>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	bf00      	nop
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr

08001670 <_fini>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr
